
posit-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ff4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008100  08008100  00018100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008174  08008174  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08008174  08008174  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008174  08008174  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008174  08008174  00018174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008178  08008178  00018178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800817c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001288  2000017c  080082f8  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001404  080082f8  00021404  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014dd0  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000318a  00000000  00000000  00034f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00038100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  000392e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa22  00000000  00000000  0003a378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000159f9  00000000  00000000  00054d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f504  00000000  00000000  0006a793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9c97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f4  00000000  00000000  000f9ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	080080e8 	.word	0x080080e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	080080e8 	.word	0x080080e8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 faa8 	bl	80006a4 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000154:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000158:	4808      	ldr	r0, [pc, #32]	; (800017c <main+0x30>)
 800015a:	f000 fdd3 	bl	8000d04 <HAL_GPIO_TogglePin>
  HAL_Delay(1000);
 800015e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000162:	f000 fb01 	bl	8000768 <HAL_Delay>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f80b 	bl	8000180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f925 	bl	80003b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800016e:	f000 f8f9 	bl	8000364 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000172:	f007 fb17 	bl	80077a4 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000176:	f000 f85d 	bl	8000234 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800017a:	e7fe      	b.n	800017a <main+0x2e>
 800017c:	40011000 	.word	0x40011000

08000180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b094      	sub	sp, #80	; 0x50
 8000184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000186:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800018a:	2228      	movs	r2, #40	; 0x28
 800018c:	2100      	movs	r1, #0
 800018e:	4618      	mov	r0, r3
 8000190:	f007 ffa2 	bl	80080d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000194:	f107 0314 	add.w	r3, r7, #20
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
 800019c:	605a      	str	r2, [r3, #4]
 800019e:	609a      	str	r2, [r3, #8]
 80001a0:	60da      	str	r2, [r3, #12]
 80001a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2200      	movs	r2, #0
 80001a8:	601a      	str	r2, [r3, #0]
 80001aa:	605a      	str	r2, [r3, #4]
 80001ac:	609a      	str	r2, [r3, #8]
 80001ae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b0:	2301      	movs	r3, #1
 80001b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ba:	2300      	movs	r3, #0
 80001bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001be:	2301      	movs	r3, #1
 80001c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c2:	2302      	movs	r3, #2
 80001c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80001cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80001d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d6:	4618      	mov	r0, r3
 80001d8:	f002 fb1c 	bl	8002814 <HAL_RCC_OscConfig>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001e2:	f000 f95f 	bl	80004a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e6:	230f      	movs	r3, #15
 80001e8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80001ea:	2301      	movs	r3, #1
 80001ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001fa:	f107 0314 	add.w	r3, r7, #20
 80001fe:	2100      	movs	r1, #0
 8000200:	4618      	mov	r0, r3
 8000202:	f002 fd89 	bl	8002d18 <HAL_RCC_ClockConfig>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800020c:	f000 f94a 	bl	80004a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000210:	2310      	movs	r3, #16
 8000212:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000214:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000218:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f002 ff0b 	bl	8003038 <HAL_RCCEx_PeriphCLKConfig>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000228:	f000 f93c 	bl	80004a4 <Error_Handler>
  }
}
 800022c:	bf00      	nop
 800022e:	3750      	adds	r7, #80	; 0x50
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}

08000234 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b092      	sub	sp, #72	; 0x48
 8000238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800023a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
 8000254:	615a      	str	r2, [r3, #20]
 8000256:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2220      	movs	r2, #32
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f007 ff3a 	bl	80080d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000264:	4b3d      	ldr	r3, [pc, #244]	; (800035c <MX_TIM1_Init+0x128>)
 8000266:	4a3e      	ldr	r2, [pc, #248]	; (8000360 <MX_TIM1_Init+0x12c>)
 8000268:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800026a:	4b3c      	ldr	r3, [pc, #240]	; (800035c <MX_TIM1_Init+0x128>)
 800026c:	2200      	movs	r2, #0
 800026e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000270:	4b3a      	ldr	r3, [pc, #232]	; (800035c <MX_TIM1_Init+0x128>)
 8000272:	2200      	movs	r2, #0
 8000274:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000276:	4b39      	ldr	r3, [pc, #228]	; (800035c <MX_TIM1_Init+0x128>)
 8000278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800027c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800027e:	4b37      	ldr	r3, [pc, #220]	; (800035c <MX_TIM1_Init+0x128>)
 8000280:	2200      	movs	r2, #0
 8000282:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000284:	4b35      	ldr	r3, [pc, #212]	; (800035c <MX_TIM1_Init+0x128>)
 8000286:	2200      	movs	r2, #0
 8000288:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800028a:	4b34      	ldr	r3, [pc, #208]	; (800035c <MX_TIM1_Init+0x128>)
 800028c:	2200      	movs	r2, #0
 800028e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000290:	4832      	ldr	r0, [pc, #200]	; (800035c <MX_TIM1_Init+0x128>)
 8000292:	f002 ff87 	bl	80031a4 <HAL_TIM_OC_Init>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800029c:	f000 f902 	bl	80004a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002a0:	2300      	movs	r3, #0
 80002a2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002a4:	2300      	movs	r3, #0
 80002a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80002a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002ac:	4619      	mov	r1, r3
 80002ae:	482b      	ldr	r0, [pc, #172]	; (800035c <MX_TIM1_Init+0x128>)
 80002b0:	f003 fa0e 	bl	80036d0 <HAL_TIMEx_MasterConfigSynchronization>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80002ba:	f000 f8f3 	bl	80004a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80002be:	2300      	movs	r3, #0
 80002c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80002c2:	2300      	movs	r3, #0
 80002c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002c6:	2300      	movs	r3, #0
 80002c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80002ca:	2300      	movs	r3, #0
 80002cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80002ce:	2300      	movs	r3, #0
 80002d0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80002d2:	2300      	movs	r3, #0
 80002d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80002d6:	2300      	movs	r3, #0
 80002d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80002da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002de:	2204      	movs	r2, #4
 80002e0:	4619      	mov	r1, r3
 80002e2:	481e      	ldr	r0, [pc, #120]	; (800035c <MX_TIM1_Init+0x128>)
 80002e4:	f002 ffae 	bl	8003244 <HAL_TIM_OC_ConfigChannel>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80002ee:	f000 f8d9 	bl	80004a4 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80002f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002f6:	2208      	movs	r2, #8
 80002f8:	4619      	mov	r1, r3
 80002fa:	4818      	ldr	r0, [pc, #96]	; (800035c <MX_TIM1_Init+0x128>)
 80002fc:	f002 ffa2 	bl	8003244 <HAL_TIM_OC_ConfigChannel>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000306:	f000 f8cd 	bl	80004a4 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800030a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800030e:	220c      	movs	r2, #12
 8000310:	4619      	mov	r1, r3
 8000312:	4812      	ldr	r0, [pc, #72]	; (800035c <MX_TIM1_Init+0x128>)
 8000314:	f002 ff96 	bl	8003244 <HAL_TIM_OC_ConfigChannel>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800031e:	f000 f8c1 	bl	80004a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000322:	2300      	movs	r3, #0
 8000324:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000326:	2300      	movs	r3, #0
 8000328:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800032a:	2300      	movs	r3, #0
 800032c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800032e:	2300      	movs	r3, #0
 8000330:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000332:	2300      	movs	r3, #0
 8000334:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000336:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800033a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800033c:	2300      	movs	r3, #0
 800033e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	4619      	mov	r1, r3
 8000344:	4805      	ldr	r0, [pc, #20]	; (800035c <MX_TIM1_Init+0x128>)
 8000346:	f003 fa21 	bl	800378c <HAL_TIMEx_ConfigBreakDeadTime>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000350:	f000 f8a8 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000354:	bf00      	nop
 8000356:	3748      	adds	r7, #72	; 0x48
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000198 	.word	0x20000198
 8000360:	40012c00 	.word	0x40012c00

08000364 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 800036a:	4a12      	ldr	r2, [pc, #72]	; (80003b4 <MX_USART1_UART_Init+0x50>)
 800036c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800036e:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000374:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 800037e:	2200      	movs	r2, #0
 8000380:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000382:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 800038a:	220c      	movs	r2, #12
 800038c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000390:	2200      	movs	r2, #0
 8000392:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 8000396:	2200      	movs	r2, #0
 8000398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800039a:	4805      	ldr	r0, [pc, #20]	; (80003b0 <MX_USART1_UART_Init+0x4c>)
 800039c:	f003 fa47 	bl	800382e <HAL_UART_Init>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003a6:	f000 f87d 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	200001e0 	.word	0x200001e0
 80003b4:	40013800 	.word	0x40013800

080003b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b088      	sub	sp, #32
 80003bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003be:	f107 0310 	add.w	r3, r7, #16
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003cc:	4b32      	ldr	r3, [pc, #200]	; (8000498 <MX_GPIO_Init+0xe0>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a31      	ldr	r2, [pc, #196]	; (8000498 <MX_GPIO_Init+0xe0>)
 80003d2:	f043 0320 	orr.w	r3, r3, #32
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b2f      	ldr	r3, [pc, #188]	; (8000498 <MX_GPIO_Init+0xe0>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0320 	and.w	r3, r3, #32
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e4:	4b2c      	ldr	r3, [pc, #176]	; (8000498 <MX_GPIO_Init+0xe0>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a2b      	ldr	r2, [pc, #172]	; (8000498 <MX_GPIO_Init+0xe0>)
 80003ea:	f043 0304 	orr.w	r3, r3, #4
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b29      	ldr	r3, [pc, #164]	; (8000498 <MX_GPIO_Init+0xe0>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0304 	and.w	r3, r3, #4
 80003f8:	60bb      	str	r3, [r7, #8]
 80003fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fc:	4b26      	ldr	r3, [pc, #152]	; (8000498 <MX_GPIO_Init+0xe0>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a25      	ldr	r2, [pc, #148]	; (8000498 <MX_GPIO_Init+0xe0>)
 8000402:	f043 0308 	orr.w	r3, r3, #8
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b23      	ldr	r3, [pc, #140]	; (8000498 <MX_GPIO_Init+0xe0>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0308 	and.w	r3, r3, #8
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M2_IN1_Pin|M2_IN2_Pin, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	210c      	movs	r1, #12
 8000418:	4820      	ldr	r0, [pc, #128]	; (800049c <MX_GPIO_Init+0xe4>)
 800041a:	f000 fc5b 	bl	8000cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_IN1_Pin|M1_IN2_Pin, GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	21c0      	movs	r1, #192	; 0xc0
 8000422:	481f      	ldr	r0, [pc, #124]	; (80004a0 <MX_GPIO_Init+0xe8>)
 8000424:	f000 fc56 	bl	8000cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M2_IN1_Pin M2_IN2_Pin */
  GPIO_InitStruct.Pin = M2_IN1_Pin|M2_IN2_Pin;
 8000428:	230c      	movs	r3, #12
 800042a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042c:	2301      	movs	r3, #1
 800042e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000430:	2300      	movs	r3, #0
 8000432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000434:	2302      	movs	r3, #2
 8000436:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	4619      	mov	r1, r3
 800043e:	4817      	ldr	r0, [pc, #92]	; (800049c <MX_GPIO_Init+0xe4>)
 8000440:	f000 fac4 	bl	80009cc <HAL_GPIO_Init>

  /*Configure GPIO pins : M2_ENCA_Pin M2_ENCB_Pin */
  GPIO_InitStruct.Pin = M2_ENCA_Pin|M2_ENCB_Pin;
 8000444:	2330      	movs	r3, #48	; 0x30
 8000446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044c:	2300      	movs	r3, #0
 800044e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000450:	f107 0310 	add.w	r3, r7, #16
 8000454:	4619      	mov	r1, r3
 8000456:	4811      	ldr	r0, [pc, #68]	; (800049c <MX_GPIO_Init+0xe4>)
 8000458:	f000 fab8 	bl	80009cc <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_ENCB_Pin M1_ENCA_Pin */
  GPIO_InitStruct.Pin = M1_ENCB_Pin|M1_ENCA_Pin;
 800045c:	2330      	movs	r3, #48	; 0x30
 800045e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	4619      	mov	r1, r3
 800046e:	480c      	ldr	r0, [pc, #48]	; (80004a0 <MX_GPIO_Init+0xe8>)
 8000470:	f000 faac 	bl	80009cc <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN1_Pin M1_IN2_Pin */
  GPIO_InitStruct.Pin = M1_IN1_Pin|M1_IN2_Pin;
 8000474:	23c0      	movs	r3, #192	; 0xc0
 8000476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000478:	2301      	movs	r3, #1
 800047a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	2300      	movs	r3, #0
 800047e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000480:	2302      	movs	r3, #2
 8000482:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	4619      	mov	r1, r3
 800048a:	4805      	ldr	r0, [pc, #20]	; (80004a0 <MX_GPIO_Init+0xe8>)
 800048c:	f000 fa9e 	bl	80009cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000490:	bf00      	nop
 8000492:	3720      	adds	r7, #32
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40021000 	.word	0x40021000
 800049c:	40010800 	.word	0x40010800
 80004a0:	40010c00 	.word	0x40010c00

080004a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a8:	b672      	cpsid	i
}
 80004aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ac:	e7fe      	b.n	80004ac <Error_Handler+0x8>
	...

080004b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004b6:	4b15      	ldr	r3, [pc, #84]	; (800050c <HAL_MspInit+0x5c>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	4a14      	ldr	r2, [pc, #80]	; (800050c <HAL_MspInit+0x5c>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6193      	str	r3, [r2, #24]
 80004c2:	4b12      	ldr	r3, [pc, #72]	; (800050c <HAL_MspInit+0x5c>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <HAL_MspInit+0x5c>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	4a0e      	ldr	r2, [pc, #56]	; (800050c <HAL_MspInit+0x5c>)
 80004d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d8:	61d3      	str	r3, [r2, #28]
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_MspInit+0x5c>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004e6:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <HAL_MspInit+0x60>)
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <HAL_MspInit+0x60>)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	40021000 	.word	0x40021000
 8000510:	40010000 	.word	0x40010000

08000514 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a09      	ldr	r2, [pc, #36]	; (8000548 <HAL_TIM_OC_MspInit+0x34>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d10b      	bne.n	800053e <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <HAL_TIM_OC_MspInit+0x38>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	4a08      	ldr	r2, [pc, #32]	; (800054c <HAL_TIM_OC_MspInit+0x38>)
 800052c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000530:	6193      	str	r3, [r2, #24]
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <HAL_TIM_OC_MspInit+0x38>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	40012c00 	.word	0x40012c00
 800054c:	40021000 	.word	0x40021000

08000550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a1c      	ldr	r2, [pc, #112]	; (80005dc <HAL_UART_MspInit+0x8c>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d131      	bne.n	80005d4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000570:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <HAL_UART_MspInit+0x90>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a1a      	ldr	r2, [pc, #104]	; (80005e0 <HAL_UART_MspInit+0x90>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <HAL_UART_MspInit+0x90>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <HAL_UART_MspInit+0x90>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <HAL_UART_MspInit+0x90>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <HAL_UART_MspInit+0x90>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a6:	2302      	movs	r3, #2
 80005a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005aa:	2303      	movs	r3, #3
 80005ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ae:	f107 0310 	add.w	r3, r7, #16
 80005b2:	4619      	mov	r1, r3
 80005b4:	480b      	ldr	r0, [pc, #44]	; (80005e4 <HAL_UART_MspInit+0x94>)
 80005b6:	f000 fa09 	bl	80009cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	4619      	mov	r1, r3
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <HAL_UART_MspInit+0x94>)
 80005d0:	f000 f9fc 	bl	80009cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005d4:	bf00      	nop
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40013800 	.word	0x40013800
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010800 	.word	0x40010800

080005e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <NMI_Handler+0x4>

080005ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f2:	e7fe      	b.n	80005f2 <HardFault_Handler+0x4>

080005f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <MemManage_Handler+0x4>

080005fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <BusFault_Handler+0x4>

08000600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <UsageFault_Handler+0x4>

08000606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr

08000612 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr

0800061e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr

0800062a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062e:	f000 f87f 	bl	8000730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800063c:	4802      	ldr	r0, [pc, #8]	; (8000648 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800063e:	f000 fc9f 	bl	8000f80 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000ef4 	.word	0x20000ef4

0800064c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000658:	f7ff fff8 	bl	800064c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800065c:	480b      	ldr	r0, [pc, #44]	; (800068c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800065e:	490c      	ldr	r1, [pc, #48]	; (8000690 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000660:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000664:	e002      	b.n	800066c <LoopCopyDataInit>

08000666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066a:	3304      	adds	r3, #4

0800066c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800066c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000670:	d3f9      	bcc.n	8000666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000672:	4a09      	ldr	r2, [pc, #36]	; (8000698 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000674:	4c09      	ldr	r4, [pc, #36]	; (800069c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000678:	e001      	b.n	800067e <LoopFillZerobss>

0800067a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800067c:	3204      	adds	r2, #4

0800067e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000680:	d3fb      	bcc.n	800067a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000682:	f007 fd05 	bl	8008090 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000686:	f7ff fd61 	bl	800014c <main>
  bx lr
 800068a:	4770      	bx	lr
  ldr r0, =_sdata
 800068c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000690:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000694:	0800817c 	.word	0x0800817c
  ldr r2, =_sbss
 8000698:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 800069c:	20001404 	.word	0x20001404

080006a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a0:	e7fe      	b.n	80006a0 <ADC1_2_IRQHandler>
	...

080006a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <HAL_Init+0x28>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a07      	ldr	r2, [pc, #28]	; (80006cc <HAL_Init+0x28>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b4:	2003      	movs	r0, #3
 80006b6:	f000 f947 	bl	8000948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ba:	200f      	movs	r0, #15
 80006bc:	f000 f808 	bl	80006d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006c0:	f7ff fef6 	bl	80004b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006c4:	2300      	movs	r3, #0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40022000 	.word	0x40022000

080006d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_InitTick+0x54>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_InitTick+0x58>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f95f 	bl	80009b2 <HAL_SYSTICK_Config>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e00e      	b.n	800071c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b0f      	cmp	r3, #15
 8000702:	d80a      	bhi.n	800071a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000704:	2200      	movs	r2, #0
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	f04f 30ff 	mov.w	r0, #4294967295
 800070c:	f000 f927 	bl	800095e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000710:	4a06      	ldr	r2, [pc, #24]	; (800072c <HAL_InitTick+0x5c>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000716:	2300      	movs	r3, #0
 8000718:	e000      	b.n	800071c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
}
 800071c:	4618      	mov	r0, r3
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000000 	.word	0x20000000
 8000728:	20000008 	.word	0x20000008
 800072c:	20000004 	.word	0x20000004

08000730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <HAL_IncTick+0x1c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <HAL_IncTick+0x20>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4413      	add	r3, r2
 8000740:	4a03      	ldr	r2, [pc, #12]	; (8000750 <HAL_IncTick+0x20>)
 8000742:	6013      	str	r3, [r2, #0]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	20000008 	.word	0x20000008
 8000750:	20000228 	.word	0x20000228

08000754 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return uwTick;
 8000758:	4b02      	ldr	r3, [pc, #8]	; (8000764 <HAL_GetTick+0x10>)
 800075a:	681b      	ldr	r3, [r3, #0]
}
 800075c:	4618      	mov	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	20000228 	.word	0x20000228

08000768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000770:	f7ff fff0 	bl	8000754 <HAL_GetTick>
 8000774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000780:	d005      	beq.n	800078e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <HAL_Delay+0x44>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	4413      	add	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800078e:	bf00      	nop
 8000790:	f7ff ffe0 	bl	8000754 <HAL_GetTick>
 8000794:	4602      	mov	r2, r0
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	429a      	cmp	r2, r3
 800079e:	d8f7      	bhi.n	8000790 <HAL_Delay+0x28>
  {
  }
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000008 	.word	0x20000008

080007b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e2:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	60d3      	str	r3, [r2, #12]
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <__NVIC_GetPriorityGrouping+0x18>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	f003 0307 	and.w	r3, r3, #7
}
 8000806:	4618      	mov	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	db0b      	blt.n	800083e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	f003 021f 	and.w	r2, r3, #31
 800082c:	4906      	ldr	r1, [pc, #24]	; (8000848 <__NVIC_EnableIRQ+0x34>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	095b      	lsrs	r3, r3, #5
 8000834:	2001      	movs	r0, #1
 8000836:	fa00 f202 	lsl.w	r2, r0, r2
 800083a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	e000e100 	.word	0xe000e100

0800084c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	db0a      	blt.n	8000876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	490c      	ldr	r1, [pc, #48]	; (8000898 <__NVIC_SetPriority+0x4c>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	0112      	lsls	r2, r2, #4
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	440b      	add	r3, r1
 8000870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000874:	e00a      	b.n	800088c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4908      	ldr	r1, [pc, #32]	; (800089c <__NVIC_SetPriority+0x50>)
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	3b04      	subs	r3, #4
 8000884:	0112      	lsls	r2, r2, #4
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	440b      	add	r3, r1
 800088a:	761a      	strb	r2, [r3, #24]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000e100 	.word	0xe000e100
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b089      	sub	sp, #36	; 0x24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	f1c3 0307 	rsb	r3, r3, #7
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	bf28      	it	cs
 80008be:	2304      	movcs	r3, #4
 80008c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3304      	adds	r3, #4
 80008c6:	2b06      	cmp	r3, #6
 80008c8:	d902      	bls.n	80008d0 <NVIC_EncodePriority+0x30>
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3b03      	subs	r3, #3
 80008ce:	e000      	b.n	80008d2 <NVIC_EncodePriority+0x32>
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	f04f 32ff 	mov.w	r2, #4294967295
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43da      	mvns	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	401a      	ands	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	43d9      	mvns	r1, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	4313      	orrs	r3, r2
         );
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3724      	adds	r7, #36	; 0x24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000914:	d301      	bcc.n	800091a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000916:	2301      	movs	r3, #1
 8000918:	e00f      	b.n	800093a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <SysTick_Config+0x40>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000922:	210f      	movs	r1, #15
 8000924:	f04f 30ff 	mov.w	r0, #4294967295
 8000928:	f7ff ff90 	bl	800084c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <SysTick_Config+0x40>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <SysTick_Config+0x40>)
 8000934:	2207      	movs	r2, #7
 8000936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	e000e010 	.word	0xe000e010

08000948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ff2d 	bl	80007b0 <__NVIC_SetPriorityGrouping>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800095e:	b580      	push	{r7, lr}
 8000960:	b086      	sub	sp, #24
 8000962:	af00      	add	r7, sp, #0
 8000964:	4603      	mov	r3, r0
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000970:	f7ff ff42 	bl	80007f8 <__NVIC_GetPriorityGrouping>
 8000974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	6978      	ldr	r0, [r7, #20]
 800097c:	f7ff ff90 	bl	80008a0 <NVIC_EncodePriority>
 8000980:	4602      	mov	r2, r0
 8000982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff5f 	bl	800084c <__NVIC_SetPriority>
}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff35 	bl	8000814 <__NVIC_EnableIRQ>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff ffa2 	bl	8000904 <SysTick_Config>
 80009c0:	4603      	mov	r3, r0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b08b      	sub	sp, #44	; 0x2c
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009de:	e169      	b.n	8000cb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009e0:	2201      	movs	r2, #1
 80009e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	69fa      	ldr	r2, [r7, #28]
 80009f0:	4013      	ands	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	f040 8158 	bne.w	8000cae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	4a9a      	ldr	r2, [pc, #616]	; (8000c6c <HAL_GPIO_Init+0x2a0>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d05e      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a08:	4a98      	ldr	r2, [pc, #608]	; (8000c6c <HAL_GPIO_Init+0x2a0>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d875      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a0e:	4a98      	ldr	r2, [pc, #608]	; (8000c70 <HAL_GPIO_Init+0x2a4>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d058      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a14:	4a96      	ldr	r2, [pc, #600]	; (8000c70 <HAL_GPIO_Init+0x2a4>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d86f      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a1a:	4a96      	ldr	r2, [pc, #600]	; (8000c74 <HAL_GPIO_Init+0x2a8>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d052      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a20:	4a94      	ldr	r2, [pc, #592]	; (8000c74 <HAL_GPIO_Init+0x2a8>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d869      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a26:	4a94      	ldr	r2, [pc, #592]	; (8000c78 <HAL_GPIO_Init+0x2ac>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d04c      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a2c:	4a92      	ldr	r2, [pc, #584]	; (8000c78 <HAL_GPIO_Init+0x2ac>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d863      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a32:	4a92      	ldr	r2, [pc, #584]	; (8000c7c <HAL_GPIO_Init+0x2b0>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d046      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a38:	4a90      	ldr	r2, [pc, #576]	; (8000c7c <HAL_GPIO_Init+0x2b0>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d85d      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a3e:	2b12      	cmp	r3, #18
 8000a40:	d82a      	bhi.n	8000a98 <HAL_GPIO_Init+0xcc>
 8000a42:	2b12      	cmp	r3, #18
 8000a44:	d859      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a46:	a201      	add	r2, pc, #4	; (adr r2, 8000a4c <HAL_GPIO_Init+0x80>)
 8000a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4c:	08000ac7 	.word	0x08000ac7
 8000a50:	08000aa1 	.word	0x08000aa1
 8000a54:	08000ab3 	.word	0x08000ab3
 8000a58:	08000af5 	.word	0x08000af5
 8000a5c:	08000afb 	.word	0x08000afb
 8000a60:	08000afb 	.word	0x08000afb
 8000a64:	08000afb 	.word	0x08000afb
 8000a68:	08000afb 	.word	0x08000afb
 8000a6c:	08000afb 	.word	0x08000afb
 8000a70:	08000afb 	.word	0x08000afb
 8000a74:	08000afb 	.word	0x08000afb
 8000a78:	08000afb 	.word	0x08000afb
 8000a7c:	08000afb 	.word	0x08000afb
 8000a80:	08000afb 	.word	0x08000afb
 8000a84:	08000afb 	.word	0x08000afb
 8000a88:	08000afb 	.word	0x08000afb
 8000a8c:	08000afb 	.word	0x08000afb
 8000a90:	08000aa9 	.word	0x08000aa9
 8000a94:	08000abd 	.word	0x08000abd
 8000a98:	4a79      	ldr	r2, [pc, #484]	; (8000c80 <HAL_GPIO_Init+0x2b4>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d013      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a9e:	e02c      	b.n	8000afa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	623b      	str	r3, [r7, #32]
          break;
 8000aa6:	e029      	b.n	8000afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	3304      	adds	r3, #4
 8000aae:	623b      	str	r3, [r7, #32]
          break;
 8000ab0:	e024      	b.n	8000afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	3308      	adds	r3, #8
 8000ab8:	623b      	str	r3, [r7, #32]
          break;
 8000aba:	e01f      	b.n	8000afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	330c      	adds	r3, #12
 8000ac2:	623b      	str	r3, [r7, #32]
          break;
 8000ac4:	e01a      	b.n	8000afc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d102      	bne.n	8000ad4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ace:	2304      	movs	r3, #4
 8000ad0:	623b      	str	r3, [r7, #32]
          break;
 8000ad2:	e013      	b.n	8000afc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d105      	bne.n	8000ae8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000adc:	2308      	movs	r3, #8
 8000ade:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	69fa      	ldr	r2, [r7, #28]
 8000ae4:	611a      	str	r2, [r3, #16]
          break;
 8000ae6:	e009      	b.n	8000afc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ae8:	2308      	movs	r3, #8
 8000aea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	69fa      	ldr	r2, [r7, #28]
 8000af0:	615a      	str	r2, [r3, #20]
          break;
 8000af2:	e003      	b.n	8000afc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
          break;
 8000af8:	e000      	b.n	8000afc <HAL_GPIO_Init+0x130>
          break;
 8000afa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	2bff      	cmp	r3, #255	; 0xff
 8000b00:	d801      	bhi.n	8000b06 <HAL_GPIO_Init+0x13a>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	e001      	b.n	8000b0a <HAL_GPIO_Init+0x13e>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	2bff      	cmp	r3, #255	; 0xff
 8000b10:	d802      	bhi.n	8000b18 <HAL_GPIO_Init+0x14c>
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	e002      	b.n	8000b1e <HAL_GPIO_Init+0x152>
 8000b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1a:	3b08      	subs	r3, #8
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	210f      	movs	r1, #15
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	401a      	ands	r2, r3
 8000b30:	6a39      	ldr	r1, [r7, #32]
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	fa01 f303 	lsl.w	r3, r1, r3
 8000b38:	431a      	orrs	r2, r3
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f000 80b1 	beq.w	8000cae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b4c:	4b4d      	ldr	r3, [pc, #308]	; (8000c84 <HAL_GPIO_Init+0x2b8>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a4c      	ldr	r2, [pc, #304]	; (8000c84 <HAL_GPIO_Init+0x2b8>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b4a      	ldr	r3, [pc, #296]	; (8000c84 <HAL_GPIO_Init+0x2b8>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b64:	4a48      	ldr	r2, [pc, #288]	; (8000c88 <HAL_GPIO_Init+0x2bc>)
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	089b      	lsrs	r3, r3, #2
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	220f      	movs	r2, #15
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	4013      	ands	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a40      	ldr	r2, [pc, #256]	; (8000c8c <HAL_GPIO_Init+0x2c0>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d013      	beq.n	8000bb8 <HAL_GPIO_Init+0x1ec>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a3f      	ldr	r2, [pc, #252]	; (8000c90 <HAL_GPIO_Init+0x2c4>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d00d      	beq.n	8000bb4 <HAL_GPIO_Init+0x1e8>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a3e      	ldr	r2, [pc, #248]	; (8000c94 <HAL_GPIO_Init+0x2c8>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d007      	beq.n	8000bb0 <HAL_GPIO_Init+0x1e4>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a3d      	ldr	r2, [pc, #244]	; (8000c98 <HAL_GPIO_Init+0x2cc>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d101      	bne.n	8000bac <HAL_GPIO_Init+0x1e0>
 8000ba8:	2303      	movs	r3, #3
 8000baa:	e006      	b.n	8000bba <HAL_GPIO_Init+0x1ee>
 8000bac:	2304      	movs	r3, #4
 8000bae:	e004      	b.n	8000bba <HAL_GPIO_Init+0x1ee>
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	e002      	b.n	8000bba <HAL_GPIO_Init+0x1ee>
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e000      	b.n	8000bba <HAL_GPIO_Init+0x1ee>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bbc:	f002 0203 	and.w	r2, r2, #3
 8000bc0:	0092      	lsls	r2, r2, #2
 8000bc2:	4093      	lsls	r3, r2
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bca:	492f      	ldr	r1, [pc, #188]	; (8000c88 <HAL_GPIO_Init+0x2bc>)
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	089b      	lsrs	r3, r3, #2
 8000bd0:	3302      	adds	r3, #2
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d006      	beq.n	8000bf2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000be4:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000be6:	689a      	ldr	r2, [r3, #8]
 8000be8:	492c      	ldr	r1, [pc, #176]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	608b      	str	r3, [r1, #8]
 8000bf0:	e006      	b.n	8000c00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bf2:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	4928      	ldr	r1, [pc, #160]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d006      	beq.n	8000c1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c0c:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c0e:	68da      	ldr	r2, [r3, #12]
 8000c10:	4922      	ldr	r1, [pc, #136]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	60cb      	str	r3, [r1, #12]
 8000c18:	e006      	b.n	8000c28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c1a:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c1c:	68da      	ldr	r2, [r3, #12]
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	491e      	ldr	r1, [pc, #120]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c24:	4013      	ands	r3, r2
 8000c26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d006      	beq.n	8000c42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	4918      	ldr	r1, [pc, #96]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	604b      	str	r3, [r1, #4]
 8000c40:	e006      	b.n	8000c50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c42:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	4914      	ldr	r1, [pc, #80]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d021      	beq.n	8000ca0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	490e      	ldr	r1, [pc, #56]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	600b      	str	r3, [r1, #0]
 8000c68:	e021      	b.n	8000cae <HAL_GPIO_Init+0x2e2>
 8000c6a:	bf00      	nop
 8000c6c:	10320000 	.word	0x10320000
 8000c70:	10310000 	.word	0x10310000
 8000c74:	10220000 	.word	0x10220000
 8000c78:	10210000 	.word	0x10210000
 8000c7c:	10120000 	.word	0x10120000
 8000c80:	10110000 	.word	0x10110000
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40010000 	.word	0x40010000
 8000c8c:	40010800 	.word	0x40010800
 8000c90:	40010c00 	.word	0x40010c00
 8000c94:	40011000 	.word	0x40011000
 8000c98:	40011400 	.word	0x40011400
 8000c9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_GPIO_Init+0x304>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	4909      	ldr	r1, [pc, #36]	; (8000cd0 <HAL_GPIO_Init+0x304>)
 8000caa:	4013      	ands	r3, r2
 8000cac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cba:	fa22 f303 	lsr.w	r3, r2, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f47f ae8e 	bne.w	80009e0 <HAL_GPIO_Init+0x14>
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	372c      	adds	r7, #44	; 0x2c
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	40010400 	.word	0x40010400

08000cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	807b      	strh	r3, [r7, #2]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ce4:	787b      	ldrb	r3, [r7, #1]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cea:	887a      	ldrh	r2, [r7, #2]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cf0:	e003      	b.n	8000cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cf2:	887b      	ldrh	r3, [r7, #2]
 8000cf4:	041a      	lsls	r2, r3, #16
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	611a      	str	r2, [r3, #16]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d16:	887a      	ldrh	r2, [r7, #2]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	041a      	lsls	r2, r3, #16
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	43d9      	mvns	r1, r3
 8000d22:	887b      	ldrh	r3, [r7, #2]
 8000d24:	400b      	ands	r3, r1
 8000d26:	431a      	orrs	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	611a      	str	r2, [r3, #16]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr

08000d36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d38:	b08b      	sub	sp, #44	; 0x2c
 8000d3a:	af06      	add	r7, sp, #24
 8000d3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d101      	bne.n	8000d48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e0f1      	b.n	8000f2c <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d106      	bne.n	8000d62 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f006 feed 	bl	8007b3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2203      	movs	r2, #3
 8000d66:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f002 fe62 	bl	8003a38 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	687e      	ldr	r6, [r7, #4]
 8000d7c:	466d      	mov	r5, sp
 8000d7e:	f106 0410 	add.w	r4, r6, #16
 8000d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d86:	6823      	ldr	r3, [r4, #0]
 8000d88:	602b      	str	r3, [r5, #0]
 8000d8a:	1d33      	adds	r3, r6, #4
 8000d8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d8e:	6838      	ldr	r0, [r7, #0]
 8000d90:	f002 fe2c 	bl	80039ec <USB_CoreInit>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d005      	beq.n	8000da6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e0c2      	b.n	8000f2c <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f002 fe5d 	bl	8003a6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	73fb      	strb	r3, [r7, #15]
 8000db6:	e040      	b.n	8000e3a <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	1c5a      	adds	r2, r3, #1
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	440b      	add	r3, r1
 8000dc8:	3301      	adds	r3, #1
 8000dca:	2201      	movs	r2, #1
 8000dcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	440b      	add	r3, r1
 8000dde:	7bfa      	ldrb	r2, [r7, #15]
 8000de0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	4613      	mov	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	440b      	add	r3, r1
 8000df2:	3303      	adds	r3, #3
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000df8:	7bfa      	ldrb	r2, [r7, #15]
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	440b      	add	r3, r1
 8000e06:	3338      	adds	r3, #56	; 0x38
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e0c:	7bfa      	ldrb	r2, [r7, #15]
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	440b      	add	r3, r1
 8000e1a:	333c      	adds	r3, #60	; 0x3c
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e20:	7bfa      	ldrb	r2, [r7, #15]
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	4613      	mov	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	440b      	add	r3, r1
 8000e2e:	3340      	adds	r3, #64	; 0x40
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	3301      	adds	r3, #1
 8000e38:	73fb      	strb	r3, [r7, #15]
 8000e3a:	7bfa      	ldrb	r2, [r7, #15]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d3b9      	bcc.n	8000db8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]
 8000e48:	e044      	b.n	8000ed4 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e4a:	7bfa      	ldrb	r2, [r7, #15]
 8000e4c:	6879      	ldr	r1, [r7, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	440b      	add	r3, r1
 8000e58:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000e60:	7bfa      	ldrb	r2, [r7, #15]
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	4613      	mov	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	440b      	add	r3, r1
 8000e6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e72:	7bfa      	ldrb	r2, [r7, #15]
 8000e74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e76:	7bfa      	ldrb	r2, [r7, #15]
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	440b      	add	r3, r1
 8000e84:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e8c:	7bfa      	ldrb	r2, [r7, #15]
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	4613      	mov	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	440b      	add	r3, r1
 8000e9a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ea2:	7bfa      	ldrb	r2, [r7, #15]
 8000ea4:	6879      	ldr	r1, [r7, #4]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4413      	add	r3, r2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	440b      	add	r3, r1
 8000eb0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000eb8:	7bfa      	ldrb	r2, [r7, #15]
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	4413      	add	r3, r2
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	440b      	add	r3, r1
 8000ec6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	7bfa      	ldrb	r2, [r7, #15]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d3b5      	bcc.n	8000e4a <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	687e      	ldr	r6, [r7, #4]
 8000ee6:	466d      	mov	r5, sp
 8000ee8:	f106 0410 	add.w	r4, r6, #16
 8000eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ef0:	6823      	ldr	r3, [r4, #0]
 8000ef2:	602b      	str	r3, [r5, #0]
 8000ef4:	1d33      	adds	r3, r6, #4
 8000ef6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ef8:	6838      	ldr	r0, [r7, #0]
 8000efa:	f002 fdc3 	bl	8003a84 <USB_DevInit>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d005      	beq.n	8000f10 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2202      	movs	r2, #2
 8000f08:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e00d      	b.n	8000f2c <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f005 f844 	bl	8005fb2 <USB_DevDisconnect>

  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f34 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d101      	bne.n	8000f4a <HAL_PCD_Start+0x16>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e016      	b.n	8000f78 <HAL_PCD_Start+0x44>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f002 fd58 	bl	8003a0c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f007 f85f 	bl	8008022 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f005 f818 	bl	8005f9e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f005 f81a 	bl	8005fc6 <USB_ReadInterrupts>
 8000f92:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 fb1b 	bl	80015da <PCD_EP_ISR_Handler>

    return;
 8000fa4:	e119      	b.n	80011da <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d013      	beq.n	8000fd8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fc2:	b292      	uxth	r2, r2
 8000fc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f006 fe32 	bl	8007c32 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000fce:	2100      	movs	r1, #0
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f905 	bl	80011e0 <HAL_PCD_SetAddress>

    return;
 8000fd6:	e100      	b.n	80011da <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00c      	beq.n	8000ffc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ff4:	b292      	uxth	r2, r2
 8000ff6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000ffa:	e0ee      	b.n	80011da <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d00c      	beq.n	8001020 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800100e:	b29a      	uxth	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001018:	b292      	uxth	r2, r2
 800101a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800101e:	e0dc      	b.n	80011da <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d027      	beq.n	800107a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001032:	b29a      	uxth	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0204 	bic.w	r2, r2, #4
 800103c:	b292      	uxth	r2, r2
 800103e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800104a:	b29a      	uxth	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 0208 	bic.w	r2, r2, #8
 8001054:	b292      	uxth	r2, r2
 8001056:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f006 fe22 	bl	8007ca4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001068:	b29a      	uxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001072:	b292      	uxth	r2, r2
 8001074:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001078:	e0af      	b.n	80011da <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 8083 	beq.w	800118c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001086:	2300      	movs	r3, #0
 8001088:	77fb      	strb	r3, [r7, #31]
 800108a:	e010      	b.n	80010ae <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	7ffb      	ldrb	r3, [r7, #31]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	441a      	add	r2, r3
 8001098:	7ffb      	ldrb	r3, [r7, #31]
 800109a:	8812      	ldrh	r2, [r2, #0]
 800109c:	b292      	uxth	r2, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	3320      	adds	r3, #32
 80010a2:	443b      	add	r3, r7
 80010a4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80010a8:	7ffb      	ldrb	r3, [r7, #31]
 80010aa:	3301      	adds	r3, #1
 80010ac:	77fb      	strb	r3, [r7, #31]
 80010ae:	7ffb      	ldrb	r3, [r7, #31]
 80010b0:	2b07      	cmp	r3, #7
 80010b2:	d9eb      	bls.n	800108c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010bc:	b29a      	uxth	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 0201 	orr.w	r2, r2, #1
 80010c6:	b292      	uxth	r2, r2
 80010c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0201 	bic.w	r2, r2, #1
 80010de:	b292      	uxth	r2, r2
 80010e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80010e4:	bf00      	nop
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0f6      	beq.n	80010e6 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001100:	b29a      	uxth	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800110a:	b292      	uxth	r2, r2
 800110c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001110:	2300      	movs	r3, #0
 8001112:	77fb      	strb	r3, [r7, #31]
 8001114:	e00f      	b.n	8001136 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001116:	7ffb      	ldrb	r3, [r7, #31]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	4611      	mov	r1, r2
 800111e:	7ffa      	ldrb	r2, [r7, #31]
 8001120:	0092      	lsls	r2, r2, #2
 8001122:	440a      	add	r2, r1
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	3320      	adds	r3, #32
 8001128:	443b      	add	r3, r7
 800112a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800112e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001130:	7ffb      	ldrb	r3, [r7, #31]
 8001132:	3301      	adds	r3, #1
 8001134:	77fb      	strb	r3, [r7, #31]
 8001136:	7ffb      	ldrb	r3, [r7, #31]
 8001138:	2b07      	cmp	r3, #7
 800113a:	d9ec      	bls.n	8001116 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001144:	b29a      	uxth	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0208 	orr.w	r2, r2, #8
 800114e:	b292      	uxth	r2, r2
 8001150:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800115c:	b29a      	uxth	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001166:	b292      	uxth	r2, r2
 8001168:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001174:	b29a      	uxth	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0204 	orr.w	r2, r2, #4
 800117e:	b292      	uxth	r2, r2
 8001180:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f006 fd73 	bl	8007c70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800118a:	e026      	b.n	80011da <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00f      	beq.n	80011b6 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800119e:	b29a      	uxth	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80011a8:	b292      	uxth	r2, r2
 80011aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f006 fd31 	bl	8007c16 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80011b4:	e011      	b.n	80011da <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00c      	beq.n	80011da <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011d2:	b292      	uxth	r2, r2
 80011d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80011d8:	bf00      	nop
  }
}
 80011da:	3720      	adds	r7, #32
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <HAL_PCD_SetAddress+0x1a>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e013      	b.n	8001222 <HAL_PCD_SetAddress+0x42>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	78fa      	ldrb	r2, [r7, #3]
 8001206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	78fa      	ldrb	r2, [r7, #3]
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f004 feb0 	bl	8005f78 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	4608      	mov	r0, r1
 8001234:	4611      	mov	r1, r2
 8001236:	461a      	mov	r2, r3
 8001238:	4603      	mov	r3, r0
 800123a:	70fb      	strb	r3, [r7, #3]
 800123c:	460b      	mov	r3, r1
 800123e:	803b      	strh	r3, [r7, #0]
 8001240:	4613      	mov	r3, r2
 8001242:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001248:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800124c:	2b00      	cmp	r3, #0
 800124e:	da0e      	bge.n	800126e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	4413      	add	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2201      	movs	r2, #1
 800126a:	705a      	strb	r2, [r3, #1]
 800126c:	e00e      	b.n	800128c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800126e:	78fb      	ldrb	r3, [r7, #3]
 8001270:	f003 0207 	and.w	r2, r3, #7
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2200      	movs	r2, #0
 800128a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800128c:	78fb      	ldrb	r3, [r7, #3]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	b2da      	uxtb	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001298:	883a      	ldrh	r2, [r7, #0]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	78ba      	ldrb	r2, [r7, #2]
 80012a2:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80012a4:	78bb      	ldrb	r3, [r7, #2]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d102      	bne.n	80012b0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2200      	movs	r2, #0
 80012ae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d101      	bne.n	80012be <HAL_PCD_EP_Open+0x94>
 80012ba:	2302      	movs	r3, #2
 80012bc:	e00e      	b.n	80012dc <HAL_PCD_EP_Open+0xb2>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68f9      	ldr	r1, [r7, #12]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f002 fbf9 	bl	8003ac4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80012da:	7afb      	ldrb	r3, [r7, #11]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	da0e      	bge.n	8001316 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012f8:	78fb      	ldrb	r3, [r7, #3]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	4413      	add	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2201      	movs	r2, #1
 8001312:	705a      	strb	r2, [r3, #1]
 8001314:	e00e      	b.n	8001334 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001316:	78fb      	ldrb	r3, [r7, #3]
 8001318:	f003 0207 	and.w	r2, r3, #7
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	4413      	add	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2200      	movs	r2, #0
 8001332:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	b2da      	uxtb	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <HAL_PCD_EP_Close+0x6a>
 800134a:	2302      	movs	r3, #2
 800134c:	e00e      	b.n	800136c <HAL_PCD_EP_Close+0x88>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68f9      	ldr	r1, [r7, #12]
 800135c:	4618      	mov	r0, r3
 800135e:	f002 ff71 	bl	8004244 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	460b      	mov	r3, r1
 8001382:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001384:	7afb      	ldrb	r3, [r7, #11]
 8001386:	f003 0207 	and.w	r2, r3, #7
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	4413      	add	r3, r2
 800139a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	2200      	movs	r2, #0
 80013b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013b4:	7afb      	ldrb	r3, [r7, #11]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6979      	ldr	r1, [r7, #20]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f003 f928 	bl	800461c <USB_EPStartXfer>

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	f003 0207 	and.w	r2, r3, #7
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	440b      	add	r3, r1
 80013f4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80013f8:	681b      	ldr	r3, [r3, #0]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	460b      	mov	r3, r1
 8001412:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001414:	7afb      	ldrb	r3, [r7, #11]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	2201      	movs	r2, #1
 800144e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001450:	7afb      	ldrb	r3, [r7, #11]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	b2da      	uxtb	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6979      	ldr	r1, [r7, #20]
 8001462:	4618      	mov	r0, r3
 8001464:	f003 f8da 	bl	800461c <USB_EPStartXfer>

  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b084      	sub	sp, #16
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	460b      	mov	r3, r1
 800147c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800147e:	78fb      	ldrb	r3, [r7, #3]
 8001480:	f003 0207 	and.w	r2, r3, #7
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	429a      	cmp	r2, r3
 800148a:	d901      	bls.n	8001490 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e04c      	b.n	800152a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001490:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001494:	2b00      	cmp	r3, #0
 8001496:	da0e      	bge.n	80014b6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	4413      	add	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2201      	movs	r2, #1
 80014b2:	705a      	strb	r2, [r3, #1]
 80014b4:	e00c      	b.n	80014d0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80014b6:	78fa      	ldrb	r2, [r7, #3]
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2200      	movs	r2, #0
 80014ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2201      	movs	r2, #1
 80014d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d101      	bne.n	80014f0 <HAL_PCD_EP_SetStall+0x7e>
 80014ec:	2302      	movs	r3, #2
 80014ee:	e01c      	b.n	800152a <HAL_PCD_EP_SetStall+0xb8>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68f9      	ldr	r1, [r7, #12]
 80014fe:	4618      	mov	r0, r3
 8001500:	f004 fc3d 	bl	8005d7e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	2b00      	cmp	r3, #0
 800150c:	d108      	bne.n	8001520 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001518:	4619      	mov	r1, r3
 800151a:	4610      	mov	r0, r2
 800151c:	f004 fd62 	bl	8005fe4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b084      	sub	sp, #16
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	460b      	mov	r3, r1
 800153c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800153e:	78fb      	ldrb	r3, [r7, #3]
 8001540:	f003 020f 	and.w	r2, r3, #15
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	d901      	bls.n	8001550 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e040      	b.n	80015d2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001554:	2b00      	cmp	r3, #0
 8001556:	da0e      	bge.n	8001576 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2201      	movs	r2, #1
 8001572:	705a      	strb	r2, [r3, #1]
 8001574:	e00e      	b.n	8001594 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001576:	78fb      	ldrb	r3, [r7, #3]
 8001578:	f003 0207 	and.w	r2, r3, #7
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	4413      	add	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2200      	movs	r2, #0
 8001592:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2200      	movs	r2, #0
 8001598:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_PCD_EP_ClrStall+0x82>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e00e      	b.n	80015d2 <HAL_PCD_EP_ClrStall+0xa0>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68f9      	ldr	r1, [r7, #12]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f004 fc2b 	bl	8005e1e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b096      	sub	sp, #88	; 0x58
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80015e2:	e3bf      	b.n	8001d64 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80015f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80015fe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001602:	2b00      	cmp	r3, #0
 8001604:	f040 8179 	bne.w	80018fa <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001608:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	2b00      	cmp	r3, #0
 8001612:	d152      	bne.n	80016ba <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001624:	81fb      	strh	r3, [r7, #14]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	89fb      	ldrh	r3, [r7, #14]
 800162c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001634:	b29b      	uxth	r3, r3
 8001636:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3328      	adds	r3, #40	; 0x28
 800163c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001646:	b29b      	uxth	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	4413      	add	r3, r2
 8001652:	3302      	adds	r3, #2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	4413      	add	r3, r2
 800165c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001668:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800166a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	441a      	add	r2, r3
 8001674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001676:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001678:	2100      	movs	r1, #0
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f006 fab1 	bl	8007be2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 836b 	beq.w	8001d64 <PCD_EP_ISR_Handler+0x78a>
 800168e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	2b00      	cmp	r3, #0
 8001694:	f040 8366 	bne.w	8001d64 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	b292      	uxth	r2, r2
 80016ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80016b8:	e354      	b.n	8001d64 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016c0:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80016cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80016d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d034      	beq.n	8001742 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	461a      	mov	r2, r3
 80016e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4413      	add	r3, r2
 80016ec:	3306      	adds	r3, #6
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	4413      	add	r3, r2
 80016f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001702:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800170e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001710:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001714:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001716:	b29b      	uxth	r3, r3
 8001718:	f004 fcb4 	bl	8006084 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	b29a      	uxth	r2, r3
 8001724:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001728:	4013      	ands	r3, r2
 800172a:	823b      	strh	r3, [r7, #16]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	8a3a      	ldrh	r2, [r7, #16]
 8001732:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001736:	b292      	uxth	r2, r2
 8001738:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f006 fa24 	bl	8007b88 <HAL_PCD_SetupStageCallback>
 8001740:	e310      	b.n	8001d64 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001742:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001746:	2b00      	cmp	r3, #0
 8001748:	f280 830c 	bge.w	8001d64 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	b29a      	uxth	r2, r3
 8001754:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001758:	4013      	ands	r3, r2
 800175a:	83fb      	strh	r3, [r7, #30]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	8bfa      	ldrh	r2, [r7, #30]
 8001762:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001766:	b292      	uxth	r2, r2
 8001768:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001772:	b29b      	uxth	r3, r3
 8001774:	461a      	mov	r2, r3
 8001776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4413      	add	r3, r2
 800177e:	3306      	adds	r3, #6
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	4413      	add	r3, r2
 8001788:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001794:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d019      	beq.n	80017d2 <PCD_EP_ISR_Handler+0x1f8>
 800179e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d015      	beq.n	80017d2 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6818      	ldr	r0, [r3, #0]
 80017aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ac:	6959      	ldr	r1, [r3, #20]
 80017ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80017b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	f004 fc64 	bl	8006084 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80017bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017be:	695a      	ldr	r2, [r3, #20]
 80017c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	441a      	add	r2, r3
 80017c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80017ca:	2100      	movs	r1, #0
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f006 f9ed 	bl	8007bac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80017dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80017e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f040 82bd 	bne.w	8001d64 <PCD_EP_ISR_Handler+0x78a>
 80017ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80017ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80017f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80017f6:	f000 82b5 	beq.w	8001d64 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	61bb      	str	r3, [r7, #24]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001808:	b29b      	uxth	r3, r3
 800180a:	461a      	mov	r2, r3
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	4413      	add	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	b29b      	uxth	r3, r3
 8001820:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001824:	b29a      	uxth	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	801a      	strh	r2, [r3, #0]
 800182a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	2b3e      	cmp	r3, #62	; 0x3e
 8001830:	d91d      	bls.n	800186e <PCD_EP_ISR_Handler+0x294>
 8001832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	095b      	lsrs	r3, r3, #5
 8001838:	647b      	str	r3, [r7, #68]	; 0x44
 800183a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	f003 031f 	and.w	r3, r3, #31
 8001842:	2b00      	cmp	r3, #0
 8001844:	d102      	bne.n	800184c <PCD_EP_ISR_Handler+0x272>
 8001846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001848:	3b01      	subs	r3, #1
 800184a:	647b      	str	r3, [r7, #68]	; 0x44
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	b29a      	uxth	r2, r3
 8001852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001854:	b29b      	uxth	r3, r3
 8001856:	029b      	lsls	r3, r3, #10
 8001858:	b29b      	uxth	r3, r3
 800185a:	4313      	orrs	r3, r2
 800185c:	b29b      	uxth	r3, r3
 800185e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001866:	b29a      	uxth	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	801a      	strh	r2, [r3, #0]
 800186c:	e026      	b.n	80018bc <PCD_EP_ISR_Handler+0x2e2>
 800186e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10a      	bne.n	800188c <PCD_EP_ISR_Handler+0x2b2>
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	b29b      	uxth	r3, r3
 800187c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001884:	b29a      	uxth	r2, r3
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	801a      	strh	r2, [r3, #0]
 800188a:	e017      	b.n	80018bc <PCD_EP_ISR_Handler+0x2e2>
 800188c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	085b      	lsrs	r3, r3, #1
 8001892:	647b      	str	r3, [r7, #68]	; 0x44
 8001894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <PCD_EP_ISR_Handler+0x2cc>
 80018a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018a2:	3301      	adds	r3, #1
 80018a4:	647b      	str	r3, [r7, #68]	; 0x44
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	029b      	lsls	r3, r3, #10
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	4313      	orrs	r3, r2
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018cc:	827b      	strh	r3, [r7, #18]
 80018ce:	8a7b      	ldrh	r3, [r7, #18]
 80018d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80018d4:	827b      	strh	r3, [r7, #18]
 80018d6:	8a7b      	ldrh	r3, [r7, #18]
 80018d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80018dc:	827b      	strh	r3, [r7, #18]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	8a7b      	ldrh	r3, [r7, #18]
 80018e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	8013      	strh	r3, [r2, #0]
 80018f8:	e234      	b.n	8001d64 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800190e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001912:	2b00      	cmp	r3, #0
 8001914:	f280 80fc 	bge.w	8001b10 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	b29a      	uxth	r2, r3
 800192a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800192e:	4013      	ands	r3, r2
 8001930:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001946:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800194a:	b292      	uxth	r2, r2
 800194c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800194e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001966:	7b1b      	ldrb	r3, [r3, #12]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d125      	bne.n	80019b8 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001974:	b29b      	uxth	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4413      	add	r3, r2
 8001980:	3306      	adds	r3, #6
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	4413      	add	r3, r2
 800198a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001994:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001998:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 8092 	beq.w	8001ac6 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6818      	ldr	r0, [r3, #0]
 80019a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a8:	6959      	ldr	r1, [r3, #20]
 80019aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ac:	88da      	ldrh	r2, [r3, #6]
 80019ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019b2:	f004 fb67 	bl	8006084 <USB_ReadPMA>
 80019b6:	e086      	b.n	8001ac6 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80019b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ba:	78db      	ldrb	r3, [r3, #3]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d10a      	bne.n	80019d6 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80019c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80019c4:	461a      	mov	r2, r3
 80019c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f9d9 	bl	8001d80 <HAL_PCD_EP_DB_Receive>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80019d4:	e077      	b.n	8001ac6 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019f0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	441a      	add	r2, r3
 8001a02:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d024      	beq.n	8001a7e <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	4413      	add	r3, r2
 8001a48:	3302      	adds	r3, #2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	4413      	add	r3, r2
 8001a52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a5c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001a60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d02e      	beq.n	8001ac6 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a6e:	6959      	ldr	r1, [r3, #20]
 8001a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a72:	891a      	ldrh	r2, [r3, #8]
 8001a74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a78:	f004 fb04 	bl	8006084 <USB_ReadPMA>
 8001a7c:	e023      	b.n	8001ac6 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4413      	add	r3, r2
 8001a92:	3306      	adds	r3, #6
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aa6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001aaa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d009      	beq.n	8001ac6 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6818      	ldr	r0, [r3, #0]
 8001ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab8:	6959      	ldr	r1, [r3, #20]
 8001aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001abc:	895a      	ldrh	r2, [r3, #10]
 8001abe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ac2:	f004 fadf 	bl	8006084 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac8:	69da      	ldr	r2, [r3, #28]
 8001aca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ace:	441a      	add	r2, r3
 8001ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad6:	695a      	ldr	r2, [r3, #20]
 8001ad8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001adc:	441a      	add	r2, r3
 8001ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ae0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d005      	beq.n	8001af6 <PCD_EP_ISR_Handler+0x51c>
 8001aea:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d206      	bcs.n	8001b04 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	4619      	mov	r1, r3
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f006 f855 	bl	8007bac <HAL_PCD_DataOutStageCallback>
 8001b02:	e005      	b.n	8001b10 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f002 fd86 	bl	800461c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b10:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 8123 	beq.w	8001d64 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001b1e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	4413      	add	r3, r2
 8001b30:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b4c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	441a      	add	r2, r3
 8001b5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b70:	78db      	ldrb	r3, [r3, #3]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	f040 80a2 	bne.w	8001cbc <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b80:	7b1b      	ldrb	r3, [r3, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8093 	beq.w	8001cae <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d046      	beq.n	8001c22 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b96:	785b      	ldrb	r3, [r3, #1]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d126      	bne.n	8001bea <PCD_EP_ISR_Handler+0x610>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	461a      	mov	r2, r3
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	4413      	add	r3, r2
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	011a      	lsls	r2, r3, #4
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001bc2:	623b      	str	r3, [r7, #32]
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	801a      	strh	r2, [r3, #0]
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	801a      	strh	r2, [r3, #0]
 8001be8:	e061      	b.n	8001cae <PCD_EP_ISR_Handler+0x6d4>
 8001bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bec:	785b      	ldrb	r3, [r3, #1]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d15d      	bne.n	8001cae <PCD_EP_ISR_Handler+0x6d4>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c06:	4413      	add	r3, r2
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	011a      	lsls	r2, r3, #4
 8001c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c12:	4413      	add	r3, r2
 8001c14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	801a      	strh	r2, [r3, #0]
 8001c20:	e045      	b.n	8001cae <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2a:	785b      	ldrb	r3, [r3, #1]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d126      	bne.n	8001c7e <PCD_EP_ISR_Handler+0x6a4>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c44:	4413      	add	r3, r2
 8001c46:	637b      	str	r3, [r7, #52]	; 0x34
 8001c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	011a      	lsls	r2, r3, #4
 8001c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c50:	4413      	add	r3, r2
 8001c52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
 8001c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c66:	801a      	strh	r2, [r3, #0]
 8001c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c7a:	801a      	strh	r2, [r3, #0]
 8001c7c:	e017      	b.n	8001cae <PCD_EP_ISR_Handler+0x6d4>
 8001c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c80:	785b      	ldrb	r3, [r3, #1]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d113      	bne.n	8001cae <PCD_EP_ISR_Handler+0x6d4>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c94:	4413      	add	r3, r2
 8001c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	011a      	lsls	r2, r3, #4
 8001c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ca6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001caa:	2200      	movs	r2, #0
 8001cac:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f005 ff94 	bl	8007be2 <HAL_PCD_DataInStageCallback>
 8001cba:	e053      	b.n	8001d64 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001cbc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d146      	bne.n	8001d56 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4413      	add	r3, r2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cf0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf6:	699a      	ldr	r2, [r3, #24]
 8001cf8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d907      	bls.n	8001d10 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d02:	699a      	ldr	r2, [r3, #24]
 8001d04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d08:	1ad2      	subs	r2, r2, r3
 8001d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0c:	619a      	str	r2, [r3, #24]
 8001d0e:	e002      	b.n	8001d16 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d12:	2200      	movs	r2, #0
 8001d14:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	4619      	mov	r1, r3
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f005 ff5c 	bl	8007be2 <HAL_PCD_DataInStageCallback>
 8001d2a:	e01b      	b.n	8001d64 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2e:	695a      	ldr	r2, [r3, #20]
 8001d30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d34:	441a      	add	r2, r3
 8001d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d38:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d3c:	69da      	ldr	r2, [r3, #28]
 8001d3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d42:	441a      	add	r2, r3
 8001d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d46:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f002 fc64 	bl	800461c <USB_EPStartXfer>
 8001d54:	e006      	b.n	8001d64 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001d56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f91b 	bl	8001f9a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	b21b      	sxth	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f6ff ac37 	blt.w	80015e4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3758      	adds	r7, #88	; 0x58
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d07e      	beq.n	8001e96 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	461a      	mov	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4413      	add	r3, r2
 8001dac:	3302      	adds	r3, #2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	4413      	add	r3, r2
 8001db6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dc0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	699a      	ldr	r2, [r3, #24]
 8001dc6:	8b7b      	ldrh	r3, [r7, #26]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d306      	bcc.n	8001dda <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	699a      	ldr	r2, [r3, #24]
 8001dd0:	8b7b      	ldrh	r3, [r7, #26]
 8001dd2:	1ad2      	subs	r2, r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	619a      	str	r2, [r3, #24]
 8001dd8:	e002      	b.n	8001de0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d123      	bne.n	8001e30 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e02:	833b      	strh	r3, [r7, #24]
 8001e04:	8b3b      	ldrh	r3, [r7, #24]
 8001e06:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e0a:	833b      	strh	r3, [r7, #24]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	441a      	add	r2, r3
 8001e1a:	8b3b      	ldrh	r3, [r7, #24]
 8001e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d01f      	beq.n	8001e7a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e54:	82fb      	strh	r3, [r7, #22]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	441a      	add	r2, r3
 8001e64:	8afb      	ldrh	r3, [r7, #22]
 8001e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001e7a:	8b7b      	ldrh	r3, [r7, #26]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 8087 	beq.w	8001f90 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	6959      	ldr	r1, [r3, #20]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	891a      	ldrh	r2, [r3, #8]
 8001e8e:	8b7b      	ldrh	r3, [r7, #26]
 8001e90:	f004 f8f8 	bl	8006084 <USB_ReadPMA>
 8001e94:	e07c      	b.n	8001f90 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3306      	adds	r3, #6
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ebe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	699a      	ldr	r2, [r3, #24]
 8001ec4:	8b7b      	ldrh	r3, [r7, #26]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d306      	bcc.n	8001ed8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	699a      	ldr	r2, [r3, #24]
 8001ece:	8b7b      	ldrh	r3, [r7, #26]
 8001ed0:	1ad2      	subs	r2, r2, r3
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	619a      	str	r2, [r3, #24]
 8001ed6:	e002      	b.n	8001ede <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2200      	movs	r2, #0
 8001edc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d123      	bne.n	8001f2e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f00:	83fb      	strh	r3, [r7, #30]
 8001f02:	8bfb      	ldrh	r3, [r7, #30]
 8001f04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f08:	83fb      	strh	r3, [r7, #30]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	441a      	add	r2, r3
 8001f18:	8bfb      	ldrh	r3, [r7, #30]
 8001f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d11f      	bne.n	8001f78 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f52:	83bb      	strh	r3, [r7, #28]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	441a      	add	r2, r3
 8001f62:	8bbb      	ldrh	r3, [r7, #28]
 8001f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f78:	8b7b      	ldrh	r3, [r7, #26]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	6959      	ldr	r1, [r3, #20]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	895a      	ldrh	r2, [r3, #10]
 8001f8a:	8b7b      	ldrh	r3, [r7, #26]
 8001f8c:	f004 f87a 	bl	8006084 <USB_ReadPMA>
    }
  }

  return count;
 8001f90:	8b7b      	ldrh	r3, [r7, #26]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3720      	adds	r7, #32
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b0a4      	sub	sp, #144	; 0x90
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fa8:	88fb      	ldrh	r3, [r7, #6]
 8001faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 81dd 	beq.w	800236e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fdc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	699a      	ldr	r2, [r3, #24]
 8001fe4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d907      	bls.n	8001ffc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	699a      	ldr	r2, [r3, #24]
 8001ff0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ff4:	1ad2      	subs	r2, r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	619a      	str	r2, [r3, #24]
 8001ffa:	e002      	b.n	8002002 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f040 80b9 	bne.w	800217e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	785b      	ldrb	r3, [r3, #1]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d126      	bne.n	8002062 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002022:	b29b      	uxth	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002028:	4413      	add	r3, r2
 800202a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	011a      	lsls	r2, r3, #4
 8002032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002034:	4413      	add	r3, r2
 8002036:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
 800203c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	b29b      	uxth	r3, r3
 8002042:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002046:	b29a      	uxth	r2, r3
 8002048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204a:	801a      	strh	r2, [r3, #0]
 800204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	b29b      	uxth	r3, r3
 8002052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800205a:	b29a      	uxth	r2, r3
 800205c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205e:	801a      	strh	r2, [r3, #0]
 8002060:	e01a      	b.n	8002098 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	785b      	ldrb	r3, [r3, #1]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d116      	bne.n	8002098 <HAL_PCD_EP_DB_Transmit+0xfe>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	637b      	str	r3, [r7, #52]	; 0x34
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002078:	b29b      	uxth	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207e:	4413      	add	r3, r2
 8002080:	637b      	str	r3, [r7, #52]	; 0x34
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	011a      	lsls	r2, r3, #4
 8002088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800208a:	4413      	add	r3, r2
 800208c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002090:	633b      	str	r3, [r7, #48]	; 0x30
 8002092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002094:	2200      	movs	r2, #0
 8002096:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	785b      	ldrb	r3, [r3, #1]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d126      	bne.n	80020f4 <HAL_PCD_EP_DB_Transmit+0x15a>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	61fb      	str	r3, [r7, #28]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	4413      	add	r3, r2
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	011a      	lsls	r2, r3, #4
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	4413      	add	r3, r2
 80020c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020cc:	61bb      	str	r3, [r7, #24]
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020d8:	b29a      	uxth	r2, r3
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	801a      	strh	r2, [r3, #0]
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	801a      	strh	r2, [r3, #0]
 80020f2:	e017      	b.n	8002124 <HAL_PCD_EP_DB_Transmit+0x18a>
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	785b      	ldrb	r3, [r3, #1]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d113      	bne.n	8002124 <HAL_PCD_EP_DB_Transmit+0x18a>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002104:	b29b      	uxth	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	4413      	add	r3, r2
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	011a      	lsls	r2, r3, #4
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	4413      	add	r3, r2
 8002118:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800211c:	623b      	str	r3, [r7, #32]
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	2200      	movs	r2, #0
 8002122:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f005 fd59 	bl	8007be2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 82fc 	beq.w	8002734 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002156:	82fb      	strh	r3, [r7, #22]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	441a      	add	r2, r3
 8002166:	8afb      	ldrh	r3, [r7, #22]
 8002168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800216c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002178:	b29b      	uxth	r3, r3
 800217a:	8013      	strh	r3, [r2, #0]
 800217c:	e2da      	b.n	8002734 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d021      	beq.n	80021cc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	b29b      	uxth	r3, r3
 800219a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800219e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	441a      	add	r2, r3
 80021b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80021b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	f040 82ae 	bne.w	8002734 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	695a      	ldr	r2, [r3, #20]
 80021dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80021e0:	441a      	add	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	69da      	ldr	r2, [r3, #28]
 80021ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80021ee:	441a      	add	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	6a1a      	ldr	r2, [r3, #32]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d30b      	bcc.n	8002218 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	6a1a      	ldr	r2, [r3, #32]
 800220c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002210:	1ad2      	subs	r2, r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	621a      	str	r2, [r3, #32]
 8002216:	e017      	b.n	8002248 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d108      	bne.n	8002232 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002220:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002224:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002230:	e00a      	b.n	8002248 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2200      	movs	r2, #0
 8002246:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	785b      	ldrb	r3, [r3, #1]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d165      	bne.n	800231c <HAL_PCD_EP_DB_Transmit+0x382>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800225e:	b29b      	uxth	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002264:	4413      	add	r3, r2
 8002266:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	011a      	lsls	r2, r3, #4
 800226e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002270:	4413      	add	r3, r2
 8002272:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002276:	63bb      	str	r3, [r7, #56]	; 0x38
 8002278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	b29b      	uxth	r3, r3
 800227e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002282:	b29a      	uxth	r2, r3
 8002284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002286:	801a      	strh	r2, [r3, #0]
 8002288:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800228c:	2b3e      	cmp	r3, #62	; 0x3e
 800228e:	d91d      	bls.n	80022cc <HAL_PCD_EP_DB_Transmit+0x332>
 8002290:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002294:	095b      	lsrs	r3, r3, #5
 8002296:	64bb      	str	r3, [r7, #72]	; 0x48
 8002298:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <HAL_PCD_EP_DB_Transmit+0x310>
 80022a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022a6:	3b01      	subs	r3, #1
 80022a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80022aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	029b      	lsls	r3, r3, #10
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	4313      	orrs	r3, r2
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c8:	801a      	strh	r2, [r3, #0]
 80022ca:	e044      	b.n	8002356 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80022cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10a      	bne.n	80022ea <HAL_PCD_EP_DB_Transmit+0x350>
 80022d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e6:	801a      	strh	r2, [r3, #0]
 80022e8:	e035      	b.n	8002356 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80022ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022ee:	085b      	lsrs	r3, r3, #1
 80022f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80022f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_PCD_EP_DB_Transmit+0x36a>
 80022fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002300:	3301      	adds	r3, #1
 8002302:	64bb      	str	r3, [r7, #72]	; 0x48
 8002304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	b29a      	uxth	r2, r3
 800230a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800230c:	b29b      	uxth	r3, r3
 800230e:	029b      	lsls	r3, r3, #10
 8002310:	b29b      	uxth	r3, r3
 8002312:	4313      	orrs	r3, r2
 8002314:	b29a      	uxth	r2, r3
 8002316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002318:	801a      	strh	r2, [r3, #0]
 800231a:	e01c      	b.n	8002356 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	785b      	ldrb	r3, [r3, #1]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d118      	bne.n	8002356 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	647b      	str	r3, [r7, #68]	; 0x44
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002332:	b29b      	uxth	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002338:	4413      	add	r3, r2
 800233a:	647b      	str	r3, [r7, #68]	; 0x44
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	011a      	lsls	r2, r3, #4
 8002342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002344:	4413      	add	r3, r2
 8002346:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800234a:	643b      	str	r3, [r7, #64]	; 0x40
 800234c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002350:	b29a      	uxth	r2, r3
 8002352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002354:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	6959      	ldr	r1, [r3, #20]
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	891a      	ldrh	r2, [r3, #8]
 8002362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002366:	b29b      	uxth	r3, r3
 8002368:	f003 fe47 	bl	8005ffa <USB_WritePMA>
 800236c:	e1e2      	b.n	8002734 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002376:	b29b      	uxth	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	3306      	adds	r3, #6
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	4413      	add	r3, r2
 800238c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002396:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d307      	bcc.n	80023b6 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023ae:	1ad2      	subs	r2, r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	619a      	str	r2, [r3, #24]
 80023b4:	e002      	b.n	80023bc <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f040 80c0 	bne.w	8002546 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	785b      	ldrb	r3, [r3, #1]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d126      	bne.n	800241c <HAL_PCD_EP_DB_Transmit+0x482>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023dc:	b29b      	uxth	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023e2:	4413      	add	r3, r2
 80023e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	011a      	lsls	r2, r3, #4
 80023ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023ee:	4413      	add	r3, r2
 80023f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80023f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002400:	b29a      	uxth	r2, r3
 8002402:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002404:	801a      	strh	r2, [r3, #0]
 8002406:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002414:	b29a      	uxth	r2, r3
 8002416:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002418:	801a      	strh	r2, [r3, #0]
 800241a:	e01a      	b.n	8002452 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	785b      	ldrb	r3, [r3, #1]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d116      	bne.n	8002452 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	667b      	str	r3, [r7, #100]	; 0x64
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002432:	b29b      	uxth	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002438:	4413      	add	r3, r2
 800243a:	667b      	str	r3, [r7, #100]	; 0x64
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	011a      	lsls	r2, r3, #4
 8002442:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002444:	4413      	add	r3, r2
 8002446:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800244a:	663b      	str	r3, [r7, #96]	; 0x60
 800244c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800244e:	2200      	movs	r2, #0
 8002450:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	677b      	str	r3, [r7, #116]	; 0x74
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	785b      	ldrb	r3, [r3, #1]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d12b      	bne.n	80024b8 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800246e:	b29b      	uxth	r3, r3
 8002470:	461a      	mov	r2, r3
 8002472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002474:	4413      	add	r3, r2
 8002476:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	011a      	lsls	r2, r3, #4
 800247e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002480:	4413      	add	r3, r2
 8002482:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002486:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800248a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	b29b      	uxth	r3, r3
 8002492:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002496:	b29a      	uxth	r2, r3
 8002498:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800249c:	801a      	strh	r2, [r3, #0]
 800249e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024b4:	801a      	strh	r2, [r3, #0]
 80024b6:	e017      	b.n	80024e8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	785b      	ldrb	r3, [r3, #1]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d113      	bne.n	80024e8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ce:	4413      	add	r3, r2
 80024d0:	677b      	str	r3, [r7, #116]	; 0x74
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	011a      	lsls	r2, r3, #4
 80024d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024da:	4413      	add	r3, r2
 80024dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024e0:	673b      	str	r3, [r7, #112]	; 0x70
 80024e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024e4:	2200      	movs	r2, #0
 80024e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	4619      	mov	r1, r3
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f005 fb77 	bl	8007be2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f040 811a 	bne.w	8002734 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	b29b      	uxth	r3, r3
 8002512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	441a      	add	r2, r3
 800252c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002538:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800253c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002540:	b29b      	uxth	r3, r3
 8002542:	8013      	strh	r3, [r2, #0]
 8002544:	e0f6      	b.n	8002734 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d121      	bne.n	8002594 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	b29b      	uxth	r3, r3
 8002562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800256a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	441a      	add	r2, r3
 800257c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002588:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800258c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002590:	b29b      	uxth	r3, r3
 8002592:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800259a:	2b01      	cmp	r3, #1
 800259c:	f040 80ca 	bne.w	8002734 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	695a      	ldr	r2, [r3, #20]
 80025a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025a8:	441a      	add	r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	69da      	ldr	r2, [r3, #28]
 80025b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025b6:	441a      	add	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	6a1a      	ldr	r2, [r3, #32]
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d30b      	bcc.n	80025e0 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	6a1a      	ldr	r2, [r3, #32]
 80025d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025d8:	1ad2      	subs	r2, r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	621a      	str	r2, [r3, #32]
 80025de:	e017      	b.n	8002610 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d108      	bne.n	80025fa <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80025e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025f8:	e00a      	b.n	8002610 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2200      	movs	r2, #0
 8002606:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	657b      	str	r3, [r7, #84]	; 0x54
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	785b      	ldrb	r3, [r3, #1]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d165      	bne.n	80026ea <HAL_PCD_EP_DB_Transmit+0x750>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800262c:	b29b      	uxth	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002632:	4413      	add	r3, r2
 8002634:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	011a      	lsls	r2, r3, #4
 800263c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800263e:	4413      	add	r3, r2
 8002640:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002644:	65bb      	str	r3, [r7, #88]	; 0x58
 8002646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002650:	b29a      	uxth	r2, r3
 8002652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002654:	801a      	strh	r2, [r3, #0]
 8002656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800265a:	2b3e      	cmp	r3, #62	; 0x3e
 800265c:	d91d      	bls.n	800269a <HAL_PCD_EP_DB_Transmit+0x700>
 800265e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	66bb      	str	r3, [r7, #104]	; 0x68
 8002666:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	2b00      	cmp	r3, #0
 8002670:	d102      	bne.n	8002678 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002672:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002674:	3b01      	subs	r3, #1
 8002676:	66bb      	str	r3, [r7, #104]	; 0x68
 8002678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	b29a      	uxth	r2, r3
 800267e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002680:	b29b      	uxth	r3, r3
 8002682:	029b      	lsls	r3, r3, #10
 8002684:	b29b      	uxth	r3, r3
 8002686:	4313      	orrs	r3, r2
 8002688:	b29b      	uxth	r3, r3
 800268a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800268e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002692:	b29a      	uxth	r2, r3
 8002694:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002696:	801a      	strh	r2, [r3, #0]
 8002698:	e041      	b.n	800271e <HAL_PCD_EP_DB_Transmit+0x784>
 800269a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10a      	bne.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x71e>
 80026a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026b4:	801a      	strh	r2, [r3, #0]
 80026b6:	e032      	b.n	800271e <HAL_PCD_EP_DB_Transmit+0x784>
 80026b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026bc:	085b      	lsrs	r3, r3, #1
 80026be:	66bb      	str	r3, [r7, #104]	; 0x68
 80026c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_PCD_EP_DB_Transmit+0x738>
 80026cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026ce:	3301      	adds	r3, #1
 80026d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80026d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026da:	b29b      	uxth	r3, r3
 80026dc:	029b      	lsls	r3, r3, #10
 80026de:	b29b      	uxth	r3, r3
 80026e0:	4313      	orrs	r3, r2
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026e6:	801a      	strh	r2, [r3, #0]
 80026e8:	e019      	b.n	800271e <HAL_PCD_EP_DB_Transmit+0x784>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	785b      	ldrb	r3, [r3, #1]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d115      	bne.n	800271e <HAL_PCD_EP_DB_Transmit+0x784>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002700:	4413      	add	r3, r2
 8002702:	657b      	str	r3, [r7, #84]	; 0x54
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	011a      	lsls	r2, r3, #4
 800270a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270c:	4413      	add	r3, r2
 800270e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002712:	653b      	str	r3, [r7, #80]	; 0x50
 8002714:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002718:	b29a      	uxth	r2, r3
 800271a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800271c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	6959      	ldr	r1, [r3, #20]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	895a      	ldrh	r2, [r3, #10]
 800272a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800272e:	b29b      	uxth	r3, r3
 8002730:	f003 fc63 	bl	8005ffa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b29b      	uxth	r3, r3
 8002746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800274a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800274e:	82bb      	strh	r3, [r7, #20]
 8002750:	8abb      	ldrh	r3, [r7, #20]
 8002752:	f083 0310 	eor.w	r3, r3, #16
 8002756:	82bb      	strh	r3, [r7, #20]
 8002758:	8abb      	ldrh	r3, [r7, #20]
 800275a:	f083 0320 	eor.w	r3, r3, #32
 800275e:	82bb      	strh	r3, [r7, #20]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	441a      	add	r2, r3
 800276e:	8abb      	ldrh	r3, [r7, #20]
 8002770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800277c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002780:	b29b      	uxth	r3, r3
 8002782:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3790      	adds	r7, #144	; 0x90
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800278e:	b480      	push	{r7}
 8002790:	b087      	sub	sp, #28
 8002792:	af00      	add	r7, sp, #0
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	607b      	str	r3, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	817b      	strh	r3, [r7, #10]
 800279c:	4613      	mov	r3, r2
 800279e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80027a0:	897b      	ldrh	r3, [r7, #10]
 80027a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00b      	beq.n	80027c4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ac:	897b      	ldrh	r3, [r7, #10]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4413      	add	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	e009      	b.n	80027d8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027c4:	897a      	ldrh	r2, [r7, #10]
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4413      	add	r3, r2
 80027d6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80027d8:	893b      	ldrh	r3, [r7, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d107      	bne.n	80027ee <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2200      	movs	r2, #0
 80027e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	80da      	strh	r2, [r3, #6]
 80027ec:	e00b      	b.n	8002806 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2201      	movs	r2, #1
 80027f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	0c1b      	lsrs	r3, r3, #16
 8002800:	b29a      	uxth	r2, r3
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	371c      	adds	r7, #28
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr
	...

08002814 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e272      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 8087 	beq.w	8002942 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002834:	4b92      	ldr	r3, [pc, #584]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b04      	cmp	r3, #4
 800283e:	d00c      	beq.n	800285a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002840:	4b8f      	ldr	r3, [pc, #572]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 030c 	and.w	r3, r3, #12
 8002848:	2b08      	cmp	r3, #8
 800284a:	d112      	bne.n	8002872 <HAL_RCC_OscConfig+0x5e>
 800284c:	4b8c      	ldr	r3, [pc, #560]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002858:	d10b      	bne.n	8002872 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285a:	4b89      	ldr	r3, [pc, #548]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d06c      	beq.n	8002940 <HAL_RCC_OscConfig+0x12c>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d168      	bne.n	8002940 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e24c      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287a:	d106      	bne.n	800288a <HAL_RCC_OscConfig+0x76>
 800287c:	4b80      	ldr	r3, [pc, #512]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a7f      	ldr	r2, [pc, #508]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	e02e      	b.n	80028e8 <HAL_RCC_OscConfig+0xd4>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0x98>
 8002892:	4b7b      	ldr	r3, [pc, #492]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a7a      	ldr	r2, [pc, #488]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b78      	ldr	r3, [pc, #480]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a77      	ldr	r2, [pc, #476]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e01d      	b.n	80028e8 <HAL_RCC_OscConfig+0xd4>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCC_OscConfig+0xbc>
 80028b6:	4b72      	ldr	r3, [pc, #456]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a71      	ldr	r2, [pc, #452]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4b6f      	ldr	r3, [pc, #444]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a6e      	ldr	r2, [pc, #440]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e00b      	b.n	80028e8 <HAL_RCC_OscConfig+0xd4>
 80028d0:	4b6b      	ldr	r3, [pc, #428]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a6a      	ldr	r2, [pc, #424]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	4b68      	ldr	r3, [pc, #416]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a67      	ldr	r2, [pc, #412]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d013      	beq.n	8002918 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7fd ff30 	bl	8000754 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f8:	f7fd ff2c 	bl	8000754 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	; 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e200      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290a:	4b5d      	ldr	r3, [pc, #372]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0xe4>
 8002916:	e014      	b.n	8002942 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7fd ff1c 	bl	8000754 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002920:	f7fd ff18 	bl	8000754 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	; 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e1ec      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002932:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x10c>
 800293e:	e000      	b.n	8002942 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d063      	beq.n	8002a16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800294e:	4b4c      	ldr	r3, [pc, #304]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00b      	beq.n	8002972 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800295a:	4b49      	ldr	r3, [pc, #292]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b08      	cmp	r3, #8
 8002964:	d11c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x18c>
 8002966:	4b46      	ldr	r3, [pc, #280]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d116      	bne.n	80029a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002972:	4b43      	ldr	r3, [pc, #268]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <HAL_RCC_OscConfig+0x176>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d001      	beq.n	800298a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e1c0      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298a:	4b3d      	ldr	r3, [pc, #244]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4939      	ldr	r1, [pc, #228]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299e:	e03a      	b.n	8002a16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d020      	beq.n	80029ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029a8:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ae:	f7fd fed1 	bl	8000754 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b6:	f7fd fecd 	bl	8000754 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e1a1      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c8:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d4:	4b2a      	ldr	r3, [pc, #168]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4927      	ldr	r1, [pc, #156]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	600b      	str	r3, [r1, #0]
 80029e8:	e015      	b.n	8002a16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ea:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <HAL_RCC_OscConfig+0x270>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f0:	f7fd feb0 	bl	8000754 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f8:	f7fd feac 	bl	8000754 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e180      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0a:	4b1d      	ldr	r3, [pc, #116]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d03a      	beq.n	8002a98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d019      	beq.n	8002a5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2a:	4b17      	ldr	r3, [pc, #92]	; (8002a88 <HAL_RCC_OscConfig+0x274>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a30:	f7fd fe90 	bl	8000754 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a38:	f7fd fe8c 	bl	8000754 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e160      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a56:	2001      	movs	r0, #1
 8002a58:	f000 fad0 	bl	8002ffc <RCC_Delay>
 8002a5c:	e01c      	b.n	8002a98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <HAL_RCC_OscConfig+0x274>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a64:	f7fd fe76 	bl	8000754 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a6a:	e00f      	b.n	8002a8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a6c:	f7fd fe72 	bl	8000754 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d908      	bls.n	8002a8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e146      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
 8002a7e:	bf00      	nop
 8002a80:	40021000 	.word	0x40021000
 8002a84:	42420000 	.word	0x42420000
 8002a88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8c:	4b92      	ldr	r3, [pc, #584]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1e9      	bne.n	8002a6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80a6 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aaa:	4b8b      	ldr	r3, [pc, #556]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10d      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab6:	4b88      	ldr	r3, [pc, #544]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	4a87      	ldr	r2, [pc, #540]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	61d3      	str	r3, [r2, #28]
 8002ac2:	4b85      	ldr	r3, [pc, #532]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad2:	4b82      	ldr	r3, [pc, #520]	; (8002cdc <HAL_RCC_OscConfig+0x4c8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d118      	bne.n	8002b10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ade:	4b7f      	ldr	r3, [pc, #508]	; (8002cdc <HAL_RCC_OscConfig+0x4c8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a7e      	ldr	r2, [pc, #504]	; (8002cdc <HAL_RCC_OscConfig+0x4c8>)
 8002ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aea:	f7fd fe33 	bl	8000754 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af2:	f7fd fe2f 	bl	8000754 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b64      	cmp	r3, #100	; 0x64
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e103      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b04:	4b75      	ldr	r3, [pc, #468]	; (8002cdc <HAL_RCC_OscConfig+0x4c8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d106      	bne.n	8002b26 <HAL_RCC_OscConfig+0x312>
 8002b18:	4b6f      	ldr	r3, [pc, #444]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	4a6e      	ldr	r2, [pc, #440]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	6213      	str	r3, [r2, #32]
 8002b24:	e02d      	b.n	8002b82 <HAL_RCC_OscConfig+0x36e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x334>
 8002b2e:	4b6a      	ldr	r3, [pc, #424]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	4a69      	ldr	r2, [pc, #420]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	6213      	str	r3, [r2, #32]
 8002b3a:	4b67      	ldr	r3, [pc, #412]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	4a66      	ldr	r2, [pc, #408]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	f023 0304 	bic.w	r3, r3, #4
 8002b44:	6213      	str	r3, [r2, #32]
 8002b46:	e01c      	b.n	8002b82 <HAL_RCC_OscConfig+0x36e>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	2b05      	cmp	r3, #5
 8002b4e:	d10c      	bne.n	8002b6a <HAL_RCC_OscConfig+0x356>
 8002b50:	4b61      	ldr	r3, [pc, #388]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	4a60      	ldr	r2, [pc, #384]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	f043 0304 	orr.w	r3, r3, #4
 8002b5a:	6213      	str	r3, [r2, #32]
 8002b5c:	4b5e      	ldr	r3, [pc, #376]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	4a5d      	ldr	r2, [pc, #372]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	6213      	str	r3, [r2, #32]
 8002b68:	e00b      	b.n	8002b82 <HAL_RCC_OscConfig+0x36e>
 8002b6a:	4b5b      	ldr	r3, [pc, #364]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	4a5a      	ldr	r2, [pc, #360]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	6213      	str	r3, [r2, #32]
 8002b76:	4b58      	ldr	r3, [pc, #352]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	4a57      	ldr	r2, [pc, #348]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	f023 0304 	bic.w	r3, r3, #4
 8002b80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d015      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8a:	f7fd fde3 	bl	8000754 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b90:	e00a      	b.n	8002ba8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b92:	f7fd fddf 	bl	8000754 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e0b1      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba8:	4b4b      	ldr	r3, [pc, #300]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0ee      	beq.n	8002b92 <HAL_RCC_OscConfig+0x37e>
 8002bb4:	e014      	b.n	8002be0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb6:	f7fd fdcd 	bl	8000754 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bbc:	e00a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bbe:	f7fd fdc9 	bl	8000754 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e09b      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd4:	4b40      	ldr	r3, [pc, #256]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1ee      	bne.n	8002bbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d105      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be6:	4b3c      	ldr	r3, [pc, #240]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	4a3b      	ldr	r2, [pc, #236]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 8087 	beq.w	8002d0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bfc:	4b36      	ldr	r3, [pc, #216]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d061      	beq.n	8002ccc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d146      	bne.n	8002c9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c10:	4b33      	ldr	r3, [pc, #204]	; (8002ce0 <HAL_RCC_OscConfig+0x4cc>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c16:	f7fd fd9d 	bl	8000754 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1e:	f7fd fd99 	bl	8000754 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e06d      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c30:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1f0      	bne.n	8002c1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c44:	d108      	bne.n	8002c58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c46:	4b24      	ldr	r3, [pc, #144]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	4921      	ldr	r1, [pc, #132]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c58:	4b1f      	ldr	r3, [pc, #124]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a19      	ldr	r1, [r3, #32]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	491b      	ldr	r1, [pc, #108]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c70:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <HAL_RCC_OscConfig+0x4cc>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c76:	f7fd fd6d 	bl	8000754 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7e:	f7fd fd69 	bl	8000754 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e03d      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c90:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCC_OscConfig+0x46a>
 8002c9c:	e035      	b.n	8002d0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <HAL_RCC_OscConfig+0x4cc>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7fd fd56 	bl	8000754 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cac:	f7fd fd52 	bl	8000754 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e026      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x498>
 8002cca:	e01e      	b.n	8002d0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d107      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e019      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40007000 	.word	0x40007000
 8002ce0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <HAL_RCC_OscConfig+0x500>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d106      	bne.n	8002d06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d001      	beq.n	8002d0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40021000 	.word	0x40021000

08002d18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0d0      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d2c:	4b6a      	ldr	r3, [pc, #424]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d910      	bls.n	8002d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3a:	4b67      	ldr	r3, [pc, #412]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 0207 	bic.w	r2, r3, #7
 8002d42:	4965      	ldr	r1, [pc, #404]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4a:	4b63      	ldr	r3, [pc, #396]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0b8      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d020      	beq.n	8002daa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d74:	4b59      	ldr	r3, [pc, #356]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a58      	ldr	r2, [pc, #352]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d8c:	4b53      	ldr	r3, [pc, #332]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4a52      	ldr	r2, [pc, #328]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d98:	4b50      	ldr	r3, [pc, #320]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	494d      	ldr	r1, [pc, #308]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d040      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d107      	bne.n	8002dce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	4b47      	ldr	r3, [pc, #284]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d115      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e07f      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd6:	4b41      	ldr	r3, [pc, #260]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e073      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de6:	4b3d      	ldr	r3, [pc, #244]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e06b      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002df6:	4b39      	ldr	r3, [pc, #228]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f023 0203 	bic.w	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4936      	ldr	r1, [pc, #216]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e08:	f7fd fca4 	bl	8000754 <HAL_GetTick>
 8002e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e10:	f7fd fca0 	bl	8000754 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e053      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e26:	4b2d      	ldr	r3, [pc, #180]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 020c 	and.w	r2, r3, #12
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d1eb      	bne.n	8002e10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e38:	4b27      	ldr	r3, [pc, #156]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d210      	bcs.n	8002e68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e46:	4b24      	ldr	r3, [pc, #144]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 0207 	bic.w	r2, r3, #7
 8002e4e:	4922      	ldr	r1, [pc, #136]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e56:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e032      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e74:	4b19      	ldr	r3, [pc, #100]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	4916      	ldr	r1, [pc, #88]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d009      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e92:	4b12      	ldr	r3, [pc, #72]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	490e      	ldr	r1, [pc, #56]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ea6:	f000 f821 	bl	8002eec <HAL_RCC_GetSysClockFreq>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	490a      	ldr	r1, [pc, #40]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb8:	5ccb      	ldrb	r3, [r1, r3]
 8002eba:	fa22 f303 	lsr.w	r3, r2, r3
 8002ebe:	4a09      	ldr	r2, [pc, #36]	; (8002ee4 <HAL_RCC_ClockConfig+0x1cc>)
 8002ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ec2:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd fc02 	bl	80006d0 <HAL_InitTick>

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40022000 	.word	0x40022000
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	08008148 	.word	0x08008148
 8002ee4:	20000000 	.word	0x20000000
 8002ee8:	20000004 	.word	0x20000004

08002eec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	2300      	movs	r3, #0
 8002f00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f06:	4b1e      	ldr	r3, [pc, #120]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d002      	beq.n	8002f1c <HAL_RCC_GetSysClockFreq+0x30>
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d003      	beq.n	8002f22 <HAL_RCC_GetSysClockFreq+0x36>
 8002f1a:	e027      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f1c:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f1e:	613b      	str	r3, [r7, #16]
      break;
 8002f20:	e027      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	0c9b      	lsrs	r3, r3, #18
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	4a17      	ldr	r2, [pc, #92]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f2c:	5cd3      	ldrb	r3, [r2, r3]
 8002f2e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d010      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f3a:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	0c5b      	lsrs	r3, r3, #17
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	4a11      	ldr	r2, [pc, #68]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f46:	5cd3      	ldrb	r3, [r2, r3]
 8002f48:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a0d      	ldr	r2, [pc, #52]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f4e:	fb03 f202 	mul.w	r2, r3, r2
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	e004      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a0c      	ldr	r2, [pc, #48]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f60:	fb02 f303 	mul.w	r3, r2, r3
 8002f64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	613b      	str	r3, [r7, #16]
      break;
 8002f6a:	e002      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002f6e:	613b      	str	r3, [r7, #16]
      break;
 8002f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f72:	693b      	ldr	r3, [r7, #16]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	371c      	adds	r7, #28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40021000 	.word	0x40021000
 8002f84:	00b71b00 	.word	0x00b71b00
 8002f88:	08008160 	.word	0x08008160
 8002f8c:	08008170 	.word	0x08008170
 8002f90:	003d0900 	.word	0x003d0900
 8002f94:	007a1200 	.word	0x007a1200

08002f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f9c:	4b02      	ldr	r3, [pc, #8]	; (8002fa8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	20000000 	.word	0x20000000

08002fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fb0:	f7ff fff2 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	4903      	ldr	r1, [pc, #12]	; (8002fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc2:	5ccb      	ldrb	r3, [r1, r3]
 8002fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	08008158 	.word	0x08008158

08002fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fd8:	f7ff ffde 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	0adb      	lsrs	r3, r3, #11
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	4903      	ldr	r1, [pc, #12]	; (8002ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fea:	5ccb      	ldrb	r3, [r1, r3]
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	08008158 	.word	0x08008158

08002ffc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003004:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <RCC_Delay+0x34>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <RCC_Delay+0x38>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	0a5b      	lsrs	r3, r3, #9
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003018:	bf00      	nop
  }
  while (Delay --);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1e5a      	subs	r2, r3, #1
 800301e:	60fa      	str	r2, [r7, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f9      	bne.n	8003018 <RCC_Delay+0x1c>
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr
 8003030:	20000000 	.word	0x20000000
 8003034:	10624dd3 	.word	0x10624dd3

08003038 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d07d      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003054:	2300      	movs	r3, #0
 8003056:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003058:	4b4f      	ldr	r3, [pc, #316]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10d      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003064:	4b4c      	ldr	r3, [pc, #304]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	4a4b      	ldr	r2, [pc, #300]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800306e:	61d3      	str	r3, [r2, #28]
 8003070:	4b49      	ldr	r3, [pc, #292]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800307c:	2301      	movs	r3, #1
 800307e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003080:	4b46      	ldr	r3, [pc, #280]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003088:	2b00      	cmp	r3, #0
 800308a:	d118      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800308c:	4b43      	ldr	r3, [pc, #268]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a42      	ldr	r2, [pc, #264]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003096:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003098:	f7fd fb5c 	bl	8000754 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309e:	e008      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a0:	f7fd fb58 	bl	8000754 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	; 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e06d      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b2:	4b3a      	ldr	r3, [pc, #232]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030be:	4b36      	ldr	r3, [pc, #216]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d02e      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d027      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030dc:	4b2e      	ldr	r3, [pc, #184]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030e6:	4b2e      	ldr	r3, [pc, #184]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030ec:	4b2c      	ldr	r3, [pc, #176]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030f2:	4a29      	ldr	r2, [pc, #164]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d014      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003102:	f7fd fb27 	bl	8000754 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003108:	e00a      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310a:	f7fd fb23 	bl	8000754 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	f241 3288 	movw	r2, #5000	; 0x1388
 8003118:	4293      	cmp	r3, r2
 800311a:	d901      	bls.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e036      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003120:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0ee      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800312c:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	4917      	ldr	r1, [pc, #92]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313a:	4313      	orrs	r3, r2
 800313c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800313e:	7dfb      	ldrb	r3, [r7, #23]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d105      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003144:	4b14      	ldr	r3, [pc, #80]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	4a13      	ldr	r2, [pc, #76]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800314a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800314e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800315c:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	490b      	ldr	r1, [pc, #44]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316a:	4313      	orrs	r3, r2
 800316c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800317a:	4b07      	ldr	r3, [pc, #28]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	4904      	ldr	r1, [pc, #16]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000
 800319c:	40007000 	.word	0x40007000
 80031a0:	42420440 	.word	0x42420440

080031a4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e041      	b.n	800323a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fd f9a2 	bl	8000514 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3304      	adds	r3, #4
 80031e0:	4619      	mov	r1, r3
 80031e2:	4610      	mov	r0, r2
 80031e4:	f000 f88a 	bl	80032fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_TIM_OC_ConfigChannel+0x1e>
 800325e:	2302      	movs	r3, #2
 8003260:	e048      	b.n	80032f4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b0c      	cmp	r3, #12
 800326e:	d839      	bhi.n	80032e4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003270:	a201      	add	r2, pc, #4	; (adr r2, 8003278 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003276:	bf00      	nop
 8003278:	080032ad 	.word	0x080032ad
 800327c:	080032e5 	.word	0x080032e5
 8003280:	080032e5 	.word	0x080032e5
 8003284:	080032e5 	.word	0x080032e5
 8003288:	080032bb 	.word	0x080032bb
 800328c:	080032e5 	.word	0x080032e5
 8003290:	080032e5 	.word	0x080032e5
 8003294:	080032e5 	.word	0x080032e5
 8003298:	080032c9 	.word	0x080032c9
 800329c:	080032e5 	.word	0x080032e5
 80032a0:	080032e5 	.word	0x080032e5
 80032a4:	080032e5 	.word	0x080032e5
 80032a8:	080032d7 	.word	0x080032d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 f884 	bl	80033c0 <TIM_OC1_SetConfig>
      break;
 80032b8:	e017      	b.n	80032ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68b9      	ldr	r1, [r7, #8]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 f8e3 	bl	800348c <TIM_OC2_SetConfig>
      break;
 80032c6:	e010      	b.n	80032ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f946 	bl	8003560 <TIM_OC3_SetConfig>
      break;
 80032d4:	e009      	b.n	80032ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 f9a9 	bl	8003634 <TIM_OC4_SetConfig>
      break;
 80032e2:	e002      	b.n	80032ea <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	75fb      	strb	r3, [r7, #23]
      break;
 80032e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a29      	ldr	r2, [pc, #164]	; (80033b4 <TIM_Base_SetConfig+0xb8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00b      	beq.n	800332c <TIM_Base_SetConfig+0x30>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331a:	d007      	beq.n	800332c <TIM_Base_SetConfig+0x30>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a26      	ldr	r2, [pc, #152]	; (80033b8 <TIM_Base_SetConfig+0xbc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d003      	beq.n	800332c <TIM_Base_SetConfig+0x30>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a25      	ldr	r2, [pc, #148]	; (80033bc <TIM_Base_SetConfig+0xc0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d108      	bne.n	800333e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a1c      	ldr	r2, [pc, #112]	; (80033b4 <TIM_Base_SetConfig+0xb8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00b      	beq.n	800335e <TIM_Base_SetConfig+0x62>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334c:	d007      	beq.n	800335e <TIM_Base_SetConfig+0x62>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a19      	ldr	r2, [pc, #100]	; (80033b8 <TIM_Base_SetConfig+0xbc>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d003      	beq.n	800335e <TIM_Base_SetConfig+0x62>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a18      	ldr	r2, [pc, #96]	; (80033bc <TIM_Base_SetConfig+0xc0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d108      	bne.n	8003370 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a07      	ldr	r2, [pc, #28]	; (80033b4 <TIM_Base_SetConfig+0xb8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d103      	bne.n	80033a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	615a      	str	r2, [r3, #20]
}
 80033aa:	bf00      	nop
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr
 80033b4:	40012c00 	.word	0x40012c00
 80033b8:	40000400 	.word	0x40000400
 80033bc:	40000800 	.word	0x40000800

080033c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	f023 0201 	bic.w	r2, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0303 	bic.w	r3, r3, #3
 80033f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f023 0302 	bic.w	r3, r3, #2
 8003408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a1c      	ldr	r2, [pc, #112]	; (8003488 <TIM_OC1_SetConfig+0xc8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d10c      	bne.n	8003436 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f023 0308 	bic.w	r3, r3, #8
 8003422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f023 0304 	bic.w	r3, r3, #4
 8003434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a13      	ldr	r2, [pc, #76]	; (8003488 <TIM_OC1_SetConfig+0xc8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d111      	bne.n	8003462 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800344c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	621a      	str	r2, [r3, #32]
}
 800347c:	bf00      	nop
 800347e:	371c      	adds	r7, #28
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40012c00 	.word	0x40012c00

0800348c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f023 0210 	bic.w	r2, r3, #16
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f023 0320 	bic.w	r3, r3, #32
 80034d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a1d      	ldr	r2, [pc, #116]	; (800355c <TIM_OC2_SetConfig+0xd0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d10d      	bne.n	8003508 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003506:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a14      	ldr	r2, [pc, #80]	; (800355c <TIM_OC2_SetConfig+0xd0>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d113      	bne.n	8003538 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003516:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800351e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	621a      	str	r2, [r3, #32]
}
 8003552:	bf00      	nop
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr
 800355c:	40012c00 	.word	0x40012c00

08003560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0303 	bic.w	r3, r3, #3
 8003596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a1d      	ldr	r2, [pc, #116]	; (8003630 <TIM_OC3_SetConfig+0xd0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d10d      	bne.n	80035da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a14      	ldr	r2, [pc, #80]	; (8003630 <TIM_OC3_SetConfig+0xd0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d113      	bne.n	800360a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	621a      	str	r2, [r3, #32]
}
 8003624:	bf00      	nop
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40012c00 	.word	0x40012c00

08003634 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800367e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	031b      	lsls	r3, r3, #12
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a0f      	ldr	r2, [pc, #60]	; (80036cc <TIM_OC4_SetConfig+0x98>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d109      	bne.n	80036a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800369a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	019b      	lsls	r3, r3, #6
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	621a      	str	r2, [r3, #32]
}
 80036c2:	bf00      	nop
 80036c4:	371c      	adds	r7, #28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr
 80036cc:	40012c00 	.word	0x40012c00

080036d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e046      	b.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a16      	ldr	r2, [pc, #88]	; (8003780 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00e      	beq.n	800374a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003734:	d009      	beq.n	800374a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a12      	ldr	r2, [pc, #72]	; (8003784 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d004      	beq.n	800374a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a10      	ldr	r2, [pc, #64]	; (8003788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d10c      	bne.n	8003764 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003750:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	4313      	orrs	r3, r2
 800375a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr
 8003780:	40012c00 	.word	0x40012c00
 8003784:	40000400 	.word	0x40000400
 8003788:	40000800 	.word	0x40000800

0800378c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e03d      	b.n	8003824 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr

0800382e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e042      	b.n	80038c6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d106      	bne.n	800385a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7fc fe7b 	bl	8000550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2224      	movs	r2, #36	; 0x24
 800385e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003870:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f82c 	bl	80038d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003886:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695a      	ldr	r2, [r3, #20]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003896:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800390a:	f023 030c 	bic.w	r3, r3, #12
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6812      	ldr	r2, [r2, #0]
 8003912:	68b9      	ldr	r1, [r7, #8]
 8003914:	430b      	orrs	r3, r1
 8003916:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699a      	ldr	r2, [r3, #24]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a2c      	ldr	r2, [pc, #176]	; (80039e4 <UART_SetConfig+0x114>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d103      	bne.n	8003940 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003938:	f7ff fb4c 	bl	8002fd4 <HAL_RCC_GetPCLK2Freq>
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	e002      	b.n	8003946 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003940:	f7ff fb34 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 8003944:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4613      	mov	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	009a      	lsls	r2, r3, #2
 8003950:	441a      	add	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	fbb2 f3f3 	udiv	r3, r2, r3
 800395c:	4a22      	ldr	r2, [pc, #136]	; (80039e8 <UART_SetConfig+0x118>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	0119      	lsls	r1, r3, #4
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	009a      	lsls	r2, r3, #2
 8003970:	441a      	add	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	fbb2 f2f3 	udiv	r2, r2, r3
 800397c:	4b1a      	ldr	r3, [pc, #104]	; (80039e8 <UART_SetConfig+0x118>)
 800397e:	fba3 0302 	umull	r0, r3, r3, r2
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	2064      	movs	r0, #100	; 0x64
 8003986:	fb00 f303 	mul.w	r3, r0, r3
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	3332      	adds	r3, #50	; 0x32
 8003990:	4a15      	ldr	r2, [pc, #84]	; (80039e8 <UART_SetConfig+0x118>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800399c:	4419      	add	r1, r3
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	009a      	lsls	r2, r3, #2
 80039a8:	441a      	add	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039b4:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <UART_SetConfig+0x118>)
 80039b6:	fba3 0302 	umull	r0, r3, r3, r2
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	2064      	movs	r0, #100	; 0x64
 80039be:	fb00 f303 	mul.w	r3, r0, r3
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	3332      	adds	r3, #50	; 0x32
 80039c8:	4a07      	ldr	r2, [pc, #28]	; (80039e8 <UART_SetConfig+0x118>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	095b      	lsrs	r3, r3, #5
 80039d0:	f003 020f 	and.w	r2, r3, #15
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	440a      	add	r2, r1
 80039da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40013800 	.word	0x40013800
 80039e8:	51eb851f 	.word	0x51eb851f

080039ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80039ec:	b084      	sub	sp, #16
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	f107 0014 	add.w	r0, r7, #20
 80039fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	b004      	add	sp, #16
 8003a0a:	4770      	bx	lr

08003a0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003a1c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003a20:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003a40:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003a44:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	43db      	mvns	r3, r3
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	4013      	ands	r3, r2
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr

08003a84 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a84:	b084      	sub	sp, #16
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	f107 0014 	add.w	r0, r7, #20
 8003a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bc80      	pop	{r7}
 8003ac0:	b004      	add	sp, #16
 8003ac2:	4770      	bx	lr

08003ac4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b09d      	sub	sp, #116	; 0x74
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	78db      	ldrb	r3, [r3, #3]
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d81f      	bhi.n	8003b36 <USB_ActivateEndpoint+0x72>
 8003af6:	a201      	add	r2, pc, #4	; (adr r2, 8003afc <USB_ActivateEndpoint+0x38>)
 8003af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afc:	08003b0d 	.word	0x08003b0d
 8003b00:	08003b29 	.word	0x08003b29
 8003b04:	08003b3f 	.word	0x08003b3f
 8003b08:	08003b1b 	.word	0x08003b1b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003b0c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003b10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b14:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003b18:	e012      	b.n	8003b40 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003b1a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003b1e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003b22:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003b26:	e00b      	b.n	8003b40 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003b28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003b2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003b34:	e004      	b.n	8003b40 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8003b3c:	e000      	b.n	8003b40 <USB_ActivateEndpoint+0x7c>
      break;
 8003b3e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	441a      	add	r2, r3
 8003b4a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	441a      	add	r2, r3
 8003b90:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	7b1b      	ldrb	r3, [r3, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f040 8178 	bne.w	8003ea2 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	785b      	ldrb	r3, [r3, #1]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 8084 	beq.w	8003cc4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	61bb      	str	r3, [r7, #24]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	4413      	add	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	011a      	lsls	r2, r3, #4
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	88db      	ldrh	r3, [r3, #6]
 8003be4:	085b      	lsrs	r3, r3, #1
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	827b      	strh	r3, [r7, #18]
 8003bfe:	8a7b      	ldrh	r3, [r7, #18]
 8003c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d01b      	beq.n	8003c40 <USB_ActivateEndpoint+0x17c>
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1e:	823b      	strh	r3, [r7, #16]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	441a      	add	r2, r3
 8003c2a:	8a3b      	ldrh	r3, [r7, #16]
 8003c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	78db      	ldrb	r3, [r3, #3]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d020      	beq.n	8003c8a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c5e:	81bb      	strh	r3, [r7, #12]
 8003c60:	89bb      	ldrh	r3, [r7, #12]
 8003c62:	f083 0320 	eor.w	r3, r3, #32
 8003c66:	81bb      	strh	r3, [r7, #12]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	441a      	add	r2, r3
 8003c72:	89bb      	ldrh	r3, [r7, #12]
 8003c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	8013      	strh	r3, [r2, #0]
 8003c88:	e2d5      	b.n	8004236 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ca0:	81fb      	strh	r3, [r7, #14]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	441a      	add	r2, r3
 8003cac:	89fb      	ldrh	r3, [r7, #14]
 8003cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	8013      	strh	r3, [r2, #0]
 8003cc2:	e2b8      	b.n	8004236 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	633b      	str	r3, [r7, #48]	; 0x30
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd4:	4413      	add	r3, r2
 8003cd6:	633b      	str	r3, [r7, #48]	; 0x30
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	011a      	lsls	r2, r3, #4
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	88db      	ldrh	r3, [r3, #6]
 8003cec:	085b      	lsrs	r3, r3, #1
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	461a      	mov	r2, r3
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	4413      	add	r3, r2
 8003d0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	011a      	lsls	r2, r3, #4
 8003d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d14:	4413      	add	r3, r2
 8003d16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	801a      	strh	r2, [r3, #0]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	2b3e      	cmp	r3, #62	; 0x3e
 8003d32:	d91d      	bls.n	8003d70 <USB_ActivateEndpoint+0x2ac>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	095b      	lsrs	r3, r3, #5
 8003d3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d102      	bne.n	8003d4e <USB_ActivateEndpoint+0x28a>
 8003d48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	029b      	lsls	r3, r3, #10
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	801a      	strh	r2, [r3, #0]
 8003d6e:	e026      	b.n	8003dbe <USB_ActivateEndpoint+0x2fa>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10a      	bne.n	8003d8e <USB_ActivateEndpoint+0x2ca>
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	801a      	strh	r2, [r3, #0]
 8003d8c:	e017      	b.n	8003dbe <USB_ActivateEndpoint+0x2fa>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	085b      	lsrs	r3, r3, #1
 8003d94:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <USB_ActivateEndpoint+0x2e4>
 8003da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003da4:	3301      	adds	r3, #1
 8003da6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	029b      	lsls	r3, r3, #10
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	4313      	orrs	r3, r2
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	847b      	strh	r3, [r7, #34]	; 0x22
 8003dcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01b      	beq.n	8003e0e <USB_ActivateEndpoint+0x34a>
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4413      	add	r3, r2
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dec:	843b      	strh	r3, [r7, #32]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	441a      	add	r2, r3
 8003df8:	8c3b      	ldrh	r3, [r7, #32]
 8003dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d124      	bne.n	8003e60 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2c:	83bb      	strh	r3, [r7, #28]
 8003e2e:	8bbb      	ldrh	r3, [r7, #28]
 8003e30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003e34:	83bb      	strh	r3, [r7, #28]
 8003e36:	8bbb      	ldrh	r3, [r7, #28]
 8003e38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e3c:	83bb      	strh	r3, [r7, #28]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	441a      	add	r2, r3
 8003e48:	8bbb      	ldrh	r3, [r7, #28]
 8003e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	8013      	strh	r3, [r2, #0]
 8003e5e:	e1ea      	b.n	8004236 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e76:	83fb      	strh	r3, [r7, #30]
 8003e78:	8bfb      	ldrh	r3, [r7, #30]
 8003e7a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e7e:	83fb      	strh	r3, [r7, #30]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	441a      	add	r2, r3
 8003e8a:	8bfb      	ldrh	r3, [r7, #30]
 8003e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	8013      	strh	r3, [r2, #0]
 8003ea0:	e1c9      	b.n	8004236 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	78db      	ldrb	r3, [r3, #3]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d11e      	bne.n	8003ee8 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	441a      	add	r2, r3
 8003ece:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eda:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	8013      	strh	r3, [r2, #0]
 8003ee6:	e01d      	b.n	8003f24 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	441a      	add	r2, r3
 8003f0c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	461a      	mov	r2, r3
 8003f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f34:	4413      	add	r3, r2
 8003f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	011a      	lsls	r2, r3, #4
 8003f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f46:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	891b      	ldrh	r3, [r3, #8]
 8003f4c:	085b      	lsrs	r3, r3, #1
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f56:	801a      	strh	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	657b      	str	r3, [r7, #84]	; 0x54
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	461a      	mov	r2, r3
 8003f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f68:	4413      	add	r3, r2
 8003f6a:	657b      	str	r3, [r7, #84]	; 0x54
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	011a      	lsls	r2, r3, #4
 8003f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f7a:	653b      	str	r3, [r7, #80]	; 0x50
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	895b      	ldrh	r3, [r3, #10]
 8003f80:	085b      	lsrs	r3, r3, #1
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f8a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	785b      	ldrb	r3, [r3, #1]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f040 8093 	bne.w	80040bc <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003fa6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d01b      	beq.n	8003fea <USB_ActivateEndpoint+0x526>
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	441a      	add	r2, r3
 8003fd4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003ff8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01b      	beq.n	800403a <USB_ActivateEndpoint+0x576>
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	b29b      	uxth	r3, r3
 8004010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004018:	877b      	strh	r3, [r7, #58]	; 0x3a
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	441a      	add	r2, r3
 8004024:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800402a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800402e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004032:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004036:	b29b      	uxth	r3, r3
 8004038:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	b29b      	uxth	r3, r3
 8004048:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800404c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004050:	873b      	strh	r3, [r7, #56]	; 0x38
 8004052:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004054:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004058:	873b      	strh	r3, [r7, #56]	; 0x38
 800405a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800405c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004060:	873b      	strh	r3, [r7, #56]	; 0x38
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	441a      	add	r2, r3
 800406c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800406e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800407a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800407e:	b29b      	uxth	r3, r3
 8004080:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	b29b      	uxth	r3, r3
 8004090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004098:	86fb      	strh	r3, [r7, #54]	; 0x36
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	441a      	add	r2, r3
 80040a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	8013      	strh	r3, [r2, #0]
 80040ba:	e0bc      	b.n	8004236 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80040cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d01d      	beq.n	8004114 <USB_ActivateEndpoint+0x650>
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ee:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	441a      	add	r2, r3
 80040fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004108:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800410c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004110:	b29b      	uxth	r3, r3
 8004112:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004124:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01d      	beq.n	800416c <USB_ActivateEndpoint+0x6a8>
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	b29b      	uxth	r3, r3
 800413e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004146:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	441a      	add	r2, r3
 8004154:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800415c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004164:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004168:	b29b      	uxth	r3, r3
 800416a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	78db      	ldrb	r3, [r3, #3]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d024      	beq.n	80041be <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	b29b      	uxth	r3, r3
 8004182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800418a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800418e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004192:	f083 0320 	eor.w	r3, r3, #32
 8004196:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	441a      	add	r2, r3
 80041a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80041a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	8013      	strh	r3, [r2, #0]
 80041bc:	e01d      	b.n	80041fa <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	441a      	add	r2, r3
 80041e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80041e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	b29b      	uxth	r3, r3
 8004208:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800420c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004210:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	441a      	add	r2, r3
 800421e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800422a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004232:	b29b      	uxth	r3, r3
 8004234:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004236:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800423a:	4618      	mov	r0, r3
 800423c:	3774      	adds	r7, #116	; 0x74
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr

08004244 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004244:	b480      	push	{r7}
 8004246:	b08d      	sub	sp, #52	; 0x34
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	7b1b      	ldrb	r3, [r3, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	f040 808e 	bne.w	8004374 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	785b      	ldrb	r3, [r3, #1]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d044      	beq.n	80042ea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	81bb      	strh	r3, [r7, #12]
 800426e:	89bb      	ldrh	r3, [r7, #12]
 8004270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004274:	2b00      	cmp	r3, #0
 8004276:	d01b      	beq.n	80042b0 <USB_DeactivateEndpoint+0x6c>
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	b29b      	uxth	r3, r3
 8004286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800428a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428e:	817b      	strh	r3, [r7, #10]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	441a      	add	r2, r3
 800429a:	897b      	ldrh	r3, [r7, #10]
 800429c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042c6:	813b      	strh	r3, [r7, #8]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	441a      	add	r2, r3
 80042d2:	893b      	ldrh	r3, [r7, #8]
 80042d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	8013      	strh	r3, [r2, #0]
 80042e8:	e192      	b.n	8004610 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	827b      	strh	r3, [r7, #18]
 80042f8:	8a7b      	ldrh	r3, [r7, #18]
 80042fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d01b      	beq.n	800433a <USB_DeactivateEndpoint+0xf6>
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	b29b      	uxth	r3, r3
 8004310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004318:	823b      	strh	r3, [r7, #16]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	441a      	add	r2, r3
 8004324:	8a3b      	ldrh	r3, [r7, #16]
 8004326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800432a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800432e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004336:	b29b      	uxth	r3, r3
 8004338:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800434c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004350:	81fb      	strh	r3, [r7, #14]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	441a      	add	r2, r3
 800435c:	89fb      	ldrh	r3, [r7, #14]
 800435e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800436a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800436e:	b29b      	uxth	r3, r3
 8004370:	8013      	strh	r3, [r2, #0]
 8004372:	e14d      	b.n	8004610 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	785b      	ldrb	r3, [r3, #1]
 8004378:	2b00      	cmp	r3, #0
 800437a:	f040 80a5 	bne.w	80044c8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	843b      	strh	r3, [r7, #32]
 800438c:	8c3b      	ldrh	r3, [r7, #32]
 800438e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01b      	beq.n	80043ce <USB_DeactivateEndpoint+0x18a>
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ac:	83fb      	strh	r3, [r7, #30]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	441a      	add	r2, r3
 80043b8:	8bfb      	ldrh	r3, [r7, #30]
 80043ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	83bb      	strh	r3, [r7, #28]
 80043dc:	8bbb      	ldrh	r3, [r7, #28]
 80043de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d01b      	beq.n	800441e <USB_DeactivateEndpoint+0x1da>
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fc:	837b      	strh	r3, [r7, #26]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	441a      	add	r2, r3
 8004408:	8b7b      	ldrh	r3, [r7, #26]
 800440a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800440e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004416:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800441a:	b29b      	uxth	r3, r3
 800441c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004434:	833b      	strh	r3, [r7, #24]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	441a      	add	r2, r3
 8004440:	8b3b      	ldrh	r3, [r7, #24]
 8004442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800444a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800444e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004452:	b29b      	uxth	r3, r3
 8004454:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	b29b      	uxth	r3, r3
 8004464:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446c:	82fb      	strh	r3, [r7, #22]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	441a      	add	r2, r3
 8004478:	8afb      	ldrh	r3, [r7, #22]
 800447a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800447e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800448a:	b29b      	uxth	r3, r3
 800448c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	b29b      	uxth	r3, r3
 800449c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044a4:	82bb      	strh	r3, [r7, #20]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	441a      	add	r2, r3
 80044b0:	8abb      	ldrh	r3, [r7, #20]
 80044b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	8013      	strh	r3, [r2, #0]
 80044c6:	e0a3      	b.n	8004610 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80044d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80044d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d01b      	beq.n	8004518 <USB_DeactivateEndpoint+0x2d4>
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	441a      	add	r2, r3
 8004502:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800450c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004514:	b29b      	uxth	r3, r3
 8004516:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004526:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452c:	2b00      	cmp	r3, #0
 800452e:	d01b      	beq.n	8004568 <USB_DeactivateEndpoint+0x324>
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	b29b      	uxth	r3, r3
 800453e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004546:	853b      	strh	r3, [r7, #40]	; 0x28
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	441a      	add	r2, r3
 8004552:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800455c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004560:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004564:	b29b      	uxth	r3, r3
 8004566:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	b29b      	uxth	r3, r3
 8004576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800457a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	441a      	add	r2, r3
 800458a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800458c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459c:	b29b      	uxth	r3, r3
 800459e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	441a      	add	r2, r3
 80045c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	441a      	add	r2, r3
 80045fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460c:	b29b      	uxth	r3, r3
 800460e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3734      	adds	r7, #52	; 0x34
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr

0800461c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b0c2      	sub	sp, #264	; 0x108
 8004620:	af00      	add	r7, sp, #0
 8004622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800462a:	6018      	str	r0, [r3, #0]
 800462c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004634:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800463a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	785b      	ldrb	r3, [r3, #1]
 8004642:	2b01      	cmp	r3, #1
 8004644:	f040 86b7 	bne.w	80053b6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800464c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	699a      	ldr	r2, [r3, #24]
 8004654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	429a      	cmp	r2, r3
 8004662:	d908      	bls.n	8004676 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004674:	e007      	b.n	8004686 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800467a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800468a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	7b1b      	ldrb	r3, [r3, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d13a      	bne.n	800470c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800469a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6959      	ldr	r1, [r3, #20]
 80046a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	88da      	ldrh	r2, [r3, #6]
 80046ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80046b8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80046bc:	6800      	ldr	r0, [r0, #0]
 80046be:	f001 fc9c 	bl	8005ffa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80046c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046dc:	b29b      	uxth	r3, r3
 80046de:	461a      	mov	r2, r3
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	4413      	add	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
 80046e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	011a      	lsls	r2, r3, #4
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	4413      	add	r3, r2
 80046f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	801a      	strh	r2, [r3, #0]
 8004708:	f000 be1f 	b.w	800534a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800470c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	78db      	ldrb	r3, [r3, #3]
 8004718:	2b02      	cmp	r3, #2
 800471a:	f040 8462 	bne.w	8004fe2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800471e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6a1a      	ldr	r2, [r3, #32]
 800472a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800472e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	429a      	cmp	r2, r3
 8004738:	f240 83df 	bls.w	8004efa <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800473c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800474a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	b29b      	uxth	r3, r3
 800475a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004762:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800476a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	441a      	add	r2, r3
 8004780:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800478c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004794:	b29b      	uxth	r3, r3
 8004796:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800479c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6a1a      	ldr	r2, [r3, #32]
 80047a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047a8:	1ad2      	subs	r2, r2, r3
 80047aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80047b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 81c7 	beq.w	8004b6c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80047de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	633b      	str	r3, [r7, #48]	; 0x30
 80047ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	785b      	ldrb	r3, [r3, #1]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d177      	bne.n	80048ea <USB_EPStartXfer+0x2ce>
 80047fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	62bb      	str	r3, [r7, #40]	; 0x28
 8004806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800480a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004814:	b29b      	uxth	r3, r3
 8004816:	461a      	mov	r2, r3
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481a:	4413      	add	r3, r2
 800481c:	62bb      	str	r3, [r7, #40]	; 0x28
 800481e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	011a      	lsls	r2, r3, #4
 800482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482e:	4413      	add	r3, r2
 8004830:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	b29b      	uxth	r3, r3
 800483c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004840:	b29a      	uxth	r2, r3
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	801a      	strh	r2, [r3, #0]
 8004846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800484a:	2b3e      	cmp	r3, #62	; 0x3e
 800484c:	d921      	bls.n	8004892 <USB_EPStartXfer+0x276>
 800484e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004852:	095b      	lsrs	r3, r3, #5
 8004854:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800485c:	f003 031f 	and.w	r3, r3, #31
 8004860:	2b00      	cmp	r3, #0
 8004862:	d104      	bne.n	800486e <USB_EPStartXfer+0x252>
 8004864:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004868:	3b01      	subs	r3, #1
 800486a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	b29a      	uxth	r2, r3
 8004874:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004878:	b29b      	uxth	r3, r3
 800487a:	029b      	lsls	r3, r3, #10
 800487c:	b29b      	uxth	r3, r3
 800487e:	4313      	orrs	r3, r2
 8004880:	b29b      	uxth	r3, r3
 8004882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800488a:	b29a      	uxth	r2, r3
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	801a      	strh	r2, [r3, #0]
 8004890:	e050      	b.n	8004934 <USB_EPStartXfer+0x318>
 8004892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10a      	bne.n	80048b0 <USB_EPStartXfer+0x294>
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	801a      	strh	r2, [r3, #0]
 80048ae:	e041      	b.n	8004934 <USB_EPStartXfer+0x318>
 80048b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048b4:	085b      	lsrs	r3, r3, #1
 80048b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80048ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d004      	beq.n	80048d0 <USB_EPStartXfer+0x2b4>
 80048c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80048ca:	3301      	adds	r3, #1
 80048cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80048da:	b29b      	uxth	r3, r3
 80048dc:	029b      	lsls	r3, r3, #10
 80048de:	b29b      	uxth	r3, r3
 80048e0:	4313      	orrs	r3, r2
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	801a      	strh	r2, [r3, #0]
 80048e8:	e024      	b.n	8004934 <USB_EPStartXfer+0x318>
 80048ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	785b      	ldrb	r3, [r3, #1]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d11c      	bne.n	8004934 <USB_EPStartXfer+0x318>
 80048fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004908:	b29b      	uxth	r3, r3
 800490a:	461a      	mov	r2, r3
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490e:	4413      	add	r3, r2
 8004910:	633b      	str	r3, [r7, #48]	; 0x30
 8004912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	011a      	lsls	r2, r3, #4
 8004920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004922:	4413      	add	r3, r2
 8004924:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800492a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800492e:	b29a      	uxth	r2, r3
 8004930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004932:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	895b      	ldrh	r3, [r3, #10]
 8004940:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6959      	ldr	r1, [r3, #20]
 8004950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004954:	b29b      	uxth	r3, r3
 8004956:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800495a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800495e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004962:	6800      	ldr	r0, [r0, #0]
 8004964:	f001 fb49 	bl	8005ffa <USB_WritePMA>
            ep->xfer_buff += len;
 8004968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800496c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695a      	ldr	r2, [r3, #20]
 8004974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004978:	441a      	add	r2, r3
 800497a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800497e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800498a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6a1a      	ldr	r2, [r3, #32]
 8004992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d90f      	bls.n	80049c2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80049a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6a1a      	ldr	r2, [r3, #32]
 80049ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049b2:	1ad2      	subs	r2, r2, r3
 80049b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	621a      	str	r2, [r3, #32]
 80049c0:	e00e      	b.n	80049e0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80049c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80049d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2200      	movs	r2, #0
 80049de:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80049e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	785b      	ldrb	r3, [r3, #1]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d177      	bne.n	8004ae0 <USB_EPStartXfer+0x4c4>
 80049f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	61bb      	str	r3, [r7, #24]
 80049fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	4413      	add	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
 8004a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	011a      	lsls	r2, r3, #4
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	4413      	add	r3, r2
 8004a26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	801a      	strh	r2, [r3, #0]
 8004a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a40:	2b3e      	cmp	r3, #62	; 0x3e
 8004a42:	d921      	bls.n	8004a88 <USB_EPStartXfer+0x46c>
 8004a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d104      	bne.n	8004a64 <USB_EPStartXfer+0x448>
 8004a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	029b      	lsls	r3, r3, #10
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	4313      	orrs	r3, r2
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	801a      	strh	r2, [r3, #0]
 8004a86:	e056      	b.n	8004b36 <USB_EPStartXfer+0x51a>
 8004a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10a      	bne.n	8004aa6 <USB_EPStartXfer+0x48a>
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	801a      	strh	r2, [r3, #0]
 8004aa4:	e047      	b.n	8004b36 <USB_EPStartXfer+0x51a>
 8004aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aaa:	085b      	lsrs	r3, r3, #1
 8004aac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d004      	beq.n	8004ac6 <USB_EPStartXfer+0x4aa>
 8004abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	029b      	lsls	r3, r3, #10
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	801a      	strh	r2, [r3, #0]
 8004ade:	e02a      	b.n	8004b36 <USB_EPStartXfer+0x51a>
 8004ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	785b      	ldrb	r3, [r3, #1]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d122      	bne.n	8004b36 <USB_EPStartXfer+0x51a>
 8004af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004af4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	623b      	str	r3, [r7, #32]
 8004afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	4413      	add	r3, r2
 8004b12:	623b      	str	r3, [r7, #32]
 8004b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	011a      	lsls	r2, r3, #4
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	4413      	add	r3, r2
 8004b26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b2a:	61fb      	str	r3, [r7, #28]
 8004b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	891b      	ldrh	r3, [r3, #8]
 8004b42:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6959      	ldr	r1, [r3, #20]
 8004b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004b5c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004b60:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004b64:	6800      	ldr	r0, [r0, #0]
 8004b66:	f001 fa48 	bl	8005ffa <USB_WritePMA>
 8004b6a:	e3ee      	b.n	800534a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	785b      	ldrb	r3, [r3, #1]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d177      	bne.n	8004c6c <USB_EPStartXfer+0x650>
 8004b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	461a      	mov	r2, r3
 8004b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b9c:	4413      	add	r3, r2
 8004b9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	011a      	lsls	r2, r3, #4
 8004bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8004bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bc6:	801a      	strh	r2, [r3, #0]
 8004bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bcc:	2b3e      	cmp	r3, #62	; 0x3e
 8004bce:	d921      	bls.n	8004c14 <USB_EPStartXfer+0x5f8>
 8004bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bde:	f003 031f 	and.w	r3, r3, #31
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d104      	bne.n	8004bf0 <USB_EPStartXfer+0x5d4>
 8004be6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bea:	3b01      	subs	r3, #1
 8004bec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	029b      	lsls	r3, r3, #10
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	4313      	orrs	r3, r2
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c10:	801a      	strh	r2, [r3, #0]
 8004c12:	e056      	b.n	8004cc2 <USB_EPStartXfer+0x6a6>
 8004c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10a      	bne.n	8004c32 <USB_EPStartXfer+0x616>
 8004c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c2e:	801a      	strh	r2, [r3, #0]
 8004c30:	e047      	b.n	8004cc2 <USB_EPStartXfer+0x6a6>
 8004c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c36:	085b      	lsrs	r3, r3, #1
 8004c38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d004      	beq.n	8004c52 <USB_EPStartXfer+0x636>
 8004c48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	029b      	lsls	r3, r3, #10
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	4313      	orrs	r3, r2
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c68:	801a      	strh	r2, [r3, #0]
 8004c6a:	e02a      	b.n	8004cc2 <USB_EPStartXfer+0x6a6>
 8004c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	785b      	ldrb	r3, [r3, #1]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d122      	bne.n	8004cc2 <USB_EPStartXfer+0x6a6>
 8004c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	653b      	str	r3, [r7, #80]	; 0x50
 8004c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	461a      	mov	r2, r3
 8004c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c9c:	4413      	add	r3, r2
 8004c9e:	653b      	str	r3, [r7, #80]	; 0x50
 8004ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	011a      	lsls	r2, r3, #4
 8004cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	891b      	ldrh	r3, [r3, #8]
 8004cce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6959      	ldr	r1, [r3, #20]
 8004cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004ce8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004cec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004cf0:	6800      	ldr	r0, [r0, #0]
 8004cf2:	f001 f982 	bl	8005ffa <USB_WritePMA>
            ep->xfer_buff += len;
 8004cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695a      	ldr	r2, [r3, #20]
 8004d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d06:	441a      	add	r2, r3
 8004d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6a1a      	ldr	r2, [r3, #32]
 8004d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d90f      	bls.n	8004d50 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6a1a      	ldr	r2, [r3, #32]
 8004d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d40:	1ad2      	subs	r2, r2, r3
 8004d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	621a      	str	r2, [r3, #32]
 8004d4e:	e00e      	b.n	8004d6e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	643b      	str	r3, [r7, #64]	; 0x40
 8004d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	785b      	ldrb	r3, [r3, #1]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d177      	bne.n	8004e7a <USB_EPStartXfer+0x85e>
 8004d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	461a      	mov	r2, r3
 8004da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004daa:	4413      	add	r3, r2
 8004dac:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	011a      	lsls	r2, r3, #4
 8004dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd4:	801a      	strh	r2, [r3, #0]
 8004dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dda:	2b3e      	cmp	r3, #62	; 0x3e
 8004ddc:	d921      	bls.n	8004e22 <USB_EPStartXfer+0x806>
 8004dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004de2:	095b      	lsrs	r3, r3, #5
 8004de4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dec:	f003 031f 	and.w	r3, r3, #31
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d104      	bne.n	8004dfe <USB_EPStartXfer+0x7e2>
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	029b      	lsls	r3, r3, #10
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1e:	801a      	strh	r2, [r3, #0]
 8004e20:	e050      	b.n	8004ec4 <USB_EPStartXfer+0x8a8>
 8004e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10a      	bne.n	8004e40 <USB_EPStartXfer+0x824>
 8004e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3c:	801a      	strh	r2, [r3, #0]
 8004e3e:	e041      	b.n	8004ec4 <USB_EPStartXfer+0x8a8>
 8004e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e44:	085b      	lsrs	r3, r3, #1
 8004e46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d004      	beq.n	8004e60 <USB_EPStartXfer+0x844>
 8004e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	029b      	lsls	r3, r3, #10
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	4313      	orrs	r3, r2
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e76:	801a      	strh	r2, [r3, #0]
 8004e78:	e024      	b.n	8004ec4 <USB_EPStartXfer+0x8a8>
 8004e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	785b      	ldrb	r3, [r3, #1]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d11c      	bne.n	8004ec4 <USB_EPStartXfer+0x8a8>
 8004e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e9e:	4413      	add	r3, r2
 8004ea0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	011a      	lsls	r2, r3, #4
 8004eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	895b      	ldrh	r3, [r3, #10]
 8004ed0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6959      	ldr	r1, [r3, #20]
 8004ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004eea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004eee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004ef2:	6800      	ldr	r0, [r0, #0]
 8004ef4:	f001 f881 	bl	8005ffa <USB_WritePMA>
 8004ef8:	e227      	b.n	800534a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	441a      	add	r2, r3
 8004f4e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	461a      	mov	r2, r3
 8004f84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f86:	4413      	add	r3, r2
 8004f88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	011a      	lsls	r2, r3, #4
 8004f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fa0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004faa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	891b      	ldrh	r3, [r3, #8]
 8004fb8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6959      	ldr	r1, [r3, #20]
 8004fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004fd2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004fd6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004fda:	6800      	ldr	r0, [r0, #0]
 8004fdc:	f001 f80d 	bl	8005ffa <USB_WritePMA>
 8004fe0:	e1b3      	b.n	800534a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6a1a      	ldr	r2, [r3, #32]
 8004fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ff2:	1ad2      	subs	r2, r2, r3
 8004ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005004:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800500e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	b29b      	uxth	r3, r3
 800501e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 80c6 	beq.w	80051b4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800502c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	673b      	str	r3, [r7, #112]	; 0x70
 8005034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	785b      	ldrb	r3, [r3, #1]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d177      	bne.n	8005134 <USB_EPStartXfer+0xb18>
 8005044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005048:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005054:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800505e:	b29b      	uxth	r3, r3
 8005060:	461a      	mov	r2, r3
 8005062:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005064:	4413      	add	r3, r2
 8005066:	66bb      	str	r3, [r7, #104]	; 0x68
 8005068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800506c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	011a      	lsls	r2, r3, #4
 8005076:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005078:	4413      	add	r3, r2
 800507a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800507e:	667b      	str	r3, [r7, #100]	; 0x64
 8005080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	b29b      	uxth	r3, r3
 8005086:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800508a:	b29a      	uxth	r2, r3
 800508c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800508e:	801a      	strh	r2, [r3, #0]
 8005090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005094:	2b3e      	cmp	r3, #62	; 0x3e
 8005096:	d921      	bls.n	80050dc <USB_EPStartXfer+0xac0>
 8005098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80050a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050a6:	f003 031f 	and.w	r3, r3, #31
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d104      	bne.n	80050b8 <USB_EPStartXfer+0xa9c>
 80050ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050b2:	3b01      	subs	r3, #1
 80050b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80050b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	b29a      	uxth	r2, r3
 80050be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	029b      	lsls	r3, r3, #10
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	4313      	orrs	r3, r2
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050d8:	801a      	strh	r2, [r3, #0]
 80050da:	e050      	b.n	800517e <USB_EPStartXfer+0xb62>
 80050dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10a      	bne.n	80050fa <USB_EPStartXfer+0xade>
 80050e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050f6:	801a      	strh	r2, [r3, #0]
 80050f8:	e041      	b.n	800517e <USB_EPStartXfer+0xb62>
 80050fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050fe:	085b      	lsrs	r3, r3, #1
 8005100:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b00      	cmp	r3, #0
 800510e:	d004      	beq.n	800511a <USB_EPStartXfer+0xafe>
 8005110:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005114:	3301      	adds	r3, #1
 8005116:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800511a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	b29a      	uxth	r2, r3
 8005120:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005124:	b29b      	uxth	r3, r3
 8005126:	029b      	lsls	r3, r3, #10
 8005128:	b29b      	uxth	r3, r3
 800512a:	4313      	orrs	r3, r2
 800512c:	b29a      	uxth	r2, r3
 800512e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005130:	801a      	strh	r2, [r3, #0]
 8005132:	e024      	b.n	800517e <USB_EPStartXfer+0xb62>
 8005134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	785b      	ldrb	r3, [r3, #1]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d11c      	bne.n	800517e <USB_EPStartXfer+0xb62>
 8005144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005148:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005152:	b29b      	uxth	r3, r3
 8005154:	461a      	mov	r2, r3
 8005156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005158:	4413      	add	r3, r2
 800515a:	673b      	str	r3, [r7, #112]	; 0x70
 800515c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	011a      	lsls	r2, r3, #4
 800516a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800516c:	4413      	add	r3, r2
 800516e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005172:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005178:	b29a      	uxth	r2, r3
 800517a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800517c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800517e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	895b      	ldrh	r3, [r3, #10]
 800518a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800518e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6959      	ldr	r1, [r3, #20]
 800519a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800519e:	b29b      	uxth	r3, r3
 80051a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80051a4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80051a8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80051ac:	6800      	ldr	r0, [r0, #0]
 80051ae:	f000 ff24 	bl	8005ffa <USB_WritePMA>
 80051b2:	e0ca      	b.n	800534a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	785b      	ldrb	r3, [r3, #1]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d177      	bne.n	80052b4 <USB_EPStartXfer+0xc98>
 80051c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80051d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051de:	b29b      	uxth	r3, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051e4:	4413      	add	r3, r2
 80051e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80051e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	011a      	lsls	r2, r3, #4
 80051f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051f8:	4413      	add	r3, r2
 80051fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8005200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	b29b      	uxth	r3, r3
 8005206:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800520a:	b29a      	uxth	r2, r3
 800520c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800520e:	801a      	strh	r2, [r3, #0]
 8005210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005214:	2b3e      	cmp	r3, #62	; 0x3e
 8005216:	d921      	bls.n	800525c <USB_EPStartXfer+0xc40>
 8005218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800521c:	095b      	lsrs	r3, r3, #5
 800521e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005226:	f003 031f 	and.w	r3, r3, #31
 800522a:	2b00      	cmp	r3, #0
 800522c:	d104      	bne.n	8005238 <USB_EPStartXfer+0xc1c>
 800522e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005232:	3b01      	subs	r3, #1
 8005234:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	b29a      	uxth	r2, r3
 800523e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005242:	b29b      	uxth	r3, r3
 8005244:	029b      	lsls	r3, r3, #10
 8005246:	b29b      	uxth	r3, r3
 8005248:	4313      	orrs	r3, r2
 800524a:	b29b      	uxth	r3, r3
 800524c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005254:	b29a      	uxth	r2, r3
 8005256:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005258:	801a      	strh	r2, [r3, #0]
 800525a:	e05c      	b.n	8005316 <USB_EPStartXfer+0xcfa>
 800525c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10a      	bne.n	800527a <USB_EPStartXfer+0xc5e>
 8005264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	b29b      	uxth	r3, r3
 800526a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800526e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005272:	b29a      	uxth	r2, r3
 8005274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005276:	801a      	strh	r2, [r3, #0]
 8005278:	e04d      	b.n	8005316 <USB_EPStartXfer+0xcfa>
 800527a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800527e:	085b      	lsrs	r3, r3, #1
 8005280:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d004      	beq.n	800529a <USB_EPStartXfer+0xc7e>
 8005290:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005294:	3301      	adds	r3, #1
 8005296:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800529a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	b29a      	uxth	r2, r3
 80052a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	029b      	lsls	r3, r3, #10
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	4313      	orrs	r3, r2
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052b0:	801a      	strh	r2, [r3, #0]
 80052b2:	e030      	b.n	8005316 <USB_EPStartXfer+0xcfa>
 80052b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	785b      	ldrb	r3, [r3, #1]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d128      	bne.n	8005316 <USB_EPStartXfer+0xcfa>
 80052c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	461a      	mov	r2, r3
 80052e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052e8:	4413      	add	r3, r2
 80052ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	011a      	lsls	r2, r3, #4
 80052fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005300:	4413      	add	r3, r2
 8005302:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005306:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800530a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800530e:	b29a      	uxth	r2, r3
 8005310:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005314:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800531a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	891b      	ldrh	r3, [r3, #8]
 8005322:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800532a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6959      	ldr	r1, [r3, #20]
 8005332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005336:	b29b      	uxth	r3, r3
 8005338:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800533c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005340:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005344:	6800      	ldr	r0, [r0, #0]
 8005346:	f000 fe58 	bl	8005ffa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800534a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800534e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	b29b      	uxth	r3, r3
 8005368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800536c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005370:	817b      	strh	r3, [r7, #10]
 8005372:	897b      	ldrh	r3, [r7, #10]
 8005374:	f083 0310 	eor.w	r3, r3, #16
 8005378:	817b      	strh	r3, [r7, #10]
 800537a:	897b      	ldrh	r3, [r7, #10]
 800537c:	f083 0320 	eor.w	r3, r3, #32
 8005380:	817b      	strh	r3, [r7, #10]
 8005382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005386:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	441a      	add	r2, r3
 800539c:	897b      	ldrh	r3, [r7, #10]
 800539e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	8013      	strh	r3, [r2, #0]
 80053b2:	f000 bcde 	b.w	8005d72 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80053b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	7b1b      	ldrb	r3, [r3, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f040 80bb 	bne.w	800553e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80053c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	699a      	ldr	r2, [r3, #24]
 80053d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d917      	bls.n	8005414 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80053e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80053f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699a      	ldr	r2, [r3, #24]
 8005400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005404:	1ad2      	subs	r2, r2, r3
 8005406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800540a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	619a      	str	r2, [r3, #24]
 8005412:	e00e      	b.n	8005432 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2200      	movs	r2, #0
 8005430:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005436:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005444:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800544e:	b29b      	uxth	r3, r3
 8005450:	461a      	mov	r2, r3
 8005452:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005456:	4413      	add	r3, r2
 8005458:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800545c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	011a      	lsls	r2, r3, #4
 800546a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800546e:	4413      	add	r3, r2
 8005470:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005474:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005478:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29b      	uxth	r3, r3
 8005480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005484:	b29a      	uxth	r2, r3
 8005486:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800548a:	801a      	strh	r2, [r3, #0]
 800548c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005490:	2b3e      	cmp	r3, #62	; 0x3e
 8005492:	d924      	bls.n	80054de <USB_EPStartXfer+0xec2>
 8005494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005498:	095b      	lsrs	r3, r3, #5
 800549a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800549e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054a2:	f003 031f 	and.w	r3, r3, #31
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d104      	bne.n	80054b4 <USB_EPStartXfer+0xe98>
 80054aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054ae:	3b01      	subs	r3, #1
 80054b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	029b      	lsls	r3, r3, #10
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	4313      	orrs	r3, r2
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054d8:	801a      	strh	r2, [r3, #0]
 80054da:	f000 bc10 	b.w	8005cfe <USB_EPStartXfer+0x16e2>
 80054de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10c      	bne.n	8005500 <USB_EPStartXfer+0xee4>
 80054e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054fc:	801a      	strh	r2, [r3, #0]
 80054fe:	e3fe      	b.n	8005cfe <USB_EPStartXfer+0x16e2>
 8005500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005504:	085b      	lsrs	r3, r3, #1
 8005506:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800550a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d004      	beq.n	8005520 <USB_EPStartXfer+0xf04>
 8005516:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800551a:	3301      	adds	r3, #1
 800551c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005520:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	b29a      	uxth	r2, r3
 8005528:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800552c:	b29b      	uxth	r3, r3
 800552e:	029b      	lsls	r3, r3, #10
 8005530:	b29b      	uxth	r3, r3
 8005532:	4313      	orrs	r3, r2
 8005534:	b29a      	uxth	r2, r3
 8005536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800553a:	801a      	strh	r2, [r3, #0]
 800553c:	e3df      	b.n	8005cfe <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800553e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	78db      	ldrb	r3, [r3, #3]
 800554a:	2b02      	cmp	r3, #2
 800554c:	f040 8218 	bne.w	8005980 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	785b      	ldrb	r3, [r3, #1]
 800555c:	2b00      	cmp	r3, #0
 800555e:	f040 809d 	bne.w	800569c <USB_EPStartXfer+0x1080>
 8005562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005566:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005574:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800557e:	b29b      	uxth	r3, r3
 8005580:	461a      	mov	r2, r3
 8005582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005586:	4413      	add	r3, r2
 8005588:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800558c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	011a      	lsls	r2, r3, #4
 800559a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800559e:	4413      	add	r3, r2
 80055a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80055ba:	801a      	strh	r2, [r3, #0]
 80055bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	2b3e      	cmp	r3, #62	; 0x3e
 80055ca:	d92b      	bls.n	8005624 <USB_EPStartXfer+0x1008>
 80055cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	095b      	lsrs	r3, r3, #5
 80055da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f003 031f 	and.w	r3, r3, #31
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d104      	bne.n	80055fc <USB_EPStartXfer+0xfe0>
 80055f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f6:	3b01      	subs	r3, #1
 80055f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	b29a      	uxth	r2, r3
 8005604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005608:	b29b      	uxth	r3, r3
 800560a:	029b      	lsls	r3, r3, #10
 800560c:	b29b      	uxth	r3, r3
 800560e:	4313      	orrs	r3, r2
 8005610:	b29b      	uxth	r3, r3
 8005612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800561a:	b29a      	uxth	r2, r3
 800561c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005620:	801a      	strh	r2, [r3, #0]
 8005622:	e070      	b.n	8005706 <USB_EPStartXfer+0x10ea>
 8005624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10c      	bne.n	800564e <USB_EPStartXfer+0x1032>
 8005634:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	b29b      	uxth	r3, r3
 800563c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005644:	b29a      	uxth	r2, r3
 8005646:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800564a:	801a      	strh	r2, [r3, #0]
 800564c:	e05b      	b.n	8005706 <USB_EPStartXfer+0x10ea>
 800564e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	085b      	lsrs	r3, r3, #1
 800565c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	d004      	beq.n	800567e <USB_EPStartXfer+0x1062>
 8005674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005678:	3301      	adds	r3, #1
 800567a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800567e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005682:	881b      	ldrh	r3, [r3, #0]
 8005684:	b29a      	uxth	r2, r3
 8005686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568a:	b29b      	uxth	r3, r3
 800568c:	029b      	lsls	r3, r3, #10
 800568e:	b29b      	uxth	r3, r3
 8005690:	4313      	orrs	r3, r2
 8005692:	b29a      	uxth	r2, r3
 8005694:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005698:	801a      	strh	r2, [r3, #0]
 800569a:	e034      	b.n	8005706 <USB_EPStartXfer+0x10ea>
 800569c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	785b      	ldrb	r3, [r3, #1]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d12c      	bne.n	8005706 <USB_EPStartXfer+0x10ea>
 80056ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	461a      	mov	r2, r3
 80056cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80056d0:	4413      	add	r3, r2
 80056d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	011a      	lsls	r2, r3, #4
 80056e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80056e8:	4413      	add	r3, r2
 80056ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	b29a      	uxth	r2, r3
 8005700:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005704:	801a      	strh	r2, [r3, #0]
 8005706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800570a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	785b      	ldrb	r3, [r3, #1]
 8005720:	2b00      	cmp	r3, #0
 8005722:	f040 809d 	bne.w	8005860 <USB_EPStartXfer+0x1244>
 8005726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800572a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005738:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005742:	b29b      	uxth	r3, r3
 8005744:	461a      	mov	r2, r3
 8005746:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800574a:	4413      	add	r3, r2
 800574c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	011a      	lsls	r2, r3, #4
 800575e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005762:	4413      	add	r3, r2
 8005764:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800576c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	b29b      	uxth	r3, r3
 8005774:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005778:	b29a      	uxth	r2, r3
 800577a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800577e:	801a      	strh	r2, [r3, #0]
 8005780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	2b3e      	cmp	r3, #62	; 0x3e
 800578e:	d92b      	bls.n	80057e8 <USB_EPStartXfer+0x11cc>
 8005790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	095b      	lsrs	r3, r3, #5
 800579e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 031f 	and.w	r3, r3, #31
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d104      	bne.n	80057c0 <USB_EPStartXfer+0x11a4>
 80057b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ba:	3b01      	subs	r3, #1
 80057bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	029b      	lsls	r3, r3, #10
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	4313      	orrs	r3, r2
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057de:	b29a      	uxth	r2, r3
 80057e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057e4:	801a      	strh	r2, [r3, #0]
 80057e6:	e069      	b.n	80058bc <USB_EPStartXfer+0x12a0>
 80057e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10c      	bne.n	8005812 <USB_EPStartXfer+0x11f6>
 80057f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057fc:	881b      	ldrh	r3, [r3, #0]
 80057fe:	b29b      	uxth	r3, r3
 8005800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005808:	b29a      	uxth	r2, r3
 800580a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800580e:	801a      	strh	r2, [r3, #0]
 8005810:	e054      	b.n	80058bc <USB_EPStartXfer+0x12a0>
 8005812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	085b      	lsrs	r3, r3, #1
 8005820:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005828:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d004      	beq.n	8005842 <USB_EPStartXfer+0x1226>
 8005838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800583c:	3301      	adds	r3, #1
 800583e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005842:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	b29a      	uxth	r2, r3
 800584a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800584e:	b29b      	uxth	r3, r3
 8005850:	029b      	lsls	r3, r3, #10
 8005852:	b29b      	uxth	r3, r3
 8005854:	4313      	orrs	r3, r2
 8005856:	b29a      	uxth	r2, r3
 8005858:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800585c:	801a      	strh	r2, [r3, #0]
 800585e:	e02d      	b.n	80058bc <USB_EPStartXfer+0x12a0>
 8005860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	785b      	ldrb	r3, [r3, #1]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d125      	bne.n	80058bc <USB_EPStartXfer+0x12a0>
 8005870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005874:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800587e:	b29b      	uxth	r3, r3
 8005880:	461a      	mov	r2, r3
 8005882:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005886:	4413      	add	r3, r2
 8005888:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800588c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	011a      	lsls	r2, r3, #4
 800589a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800589e:	4413      	add	r3, r2
 80058a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058ba:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80058bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 8218 	beq.w	8005cfe <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80058ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80058ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80058f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d005      	beq.n	8005906 <USB_EPStartXfer+0x12ea>
 80058fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80058fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10d      	bne.n	8005922 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005906:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800590a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800590e:	2b00      	cmp	r3, #0
 8005910:	f040 81f5 	bne.w	8005cfe <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005914:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	f040 81ee 	bne.w	8005cfe <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	b29b      	uxth	r3, r3
 8005940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005948:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800594c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005950:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800595a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	441a      	add	r2, r3
 8005966:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800596a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800596e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005976:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800597a:	b29b      	uxth	r3, r3
 800597c:	8013      	strh	r3, [r2, #0]
 800597e:	e1be      	b.n	8005cfe <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	78db      	ldrb	r3, [r3, #3]
 800598c:	2b01      	cmp	r3, #1
 800598e:	f040 81b4 	bne.w	8005cfa <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d917      	bls.n	80059de <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80059ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80059be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699a      	ldr	r2, [r3, #24]
 80059ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059ce:	1ad2      	subs	r2, r2, r3
 80059d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	619a      	str	r2, [r3, #24]
 80059dc:	e00e      	b.n	80059fc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80059de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80059ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2200      	movs	r2, #0
 80059fa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80059fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	785b      	ldrb	r3, [r3, #1]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f040 8085 	bne.w	8005b18 <USB_EPStartXfer+0x14fc>
 8005a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a32:	4413      	add	r3, r2
 8005a34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	011a      	lsls	r2, r3, #4
 8005a46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a66:	801a      	strh	r2, [r3, #0]
 8005a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a6c:	2b3e      	cmp	r3, #62	; 0x3e
 8005a6e:	d923      	bls.n	8005ab8 <USB_EPStartXfer+0x149c>
 8005a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a7e:	f003 031f 	and.w	r3, r3, #31
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d104      	bne.n	8005a90 <USB_EPStartXfer+0x1474>
 8005a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005a90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	029b      	lsls	r3, r3, #10
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ab4:	801a      	strh	r2, [r3, #0]
 8005ab6:	e060      	b.n	8005b7a <USB_EPStartXfer+0x155e>
 8005ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10c      	bne.n	8005ada <USB_EPStartXfer+0x14be>
 8005ac0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ad6:	801a      	strh	r2, [r3, #0]
 8005ad8:	e04f      	b.n	8005b7a <USB_EPStartXfer+0x155e>
 8005ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ade:	085b      	lsrs	r3, r3, #1
 8005ae0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d004      	beq.n	8005afa <USB_EPStartXfer+0x14de>
 8005af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005af4:	3301      	adds	r3, #1
 8005af6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005afa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	029b      	lsls	r3, r3, #10
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b14:	801a      	strh	r2, [r3, #0]
 8005b16:	e030      	b.n	8005b7a <USB_EPStartXfer+0x155e>
 8005b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	785b      	ldrb	r3, [r3, #1]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d128      	bne.n	8005b7a <USB_EPStartXfer+0x155e>
 8005b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	461a      	mov	r2, r3
 8005b48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	011a      	lsls	r2, r3, #4
 8005b60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b64:	4413      	add	r3, r2
 8005b66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b78:	801a      	strh	r2, [r3, #0]
 8005b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	785b      	ldrb	r3, [r3, #1]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f040 8085 	bne.w	8005ca4 <USB_EPStartXfer+0x1688>
 8005b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	461a      	mov	r2, r3
 8005bba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	011a      	lsls	r2, r3, #4
 8005bd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005be0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bf2:	801a      	strh	r2, [r3, #0]
 8005bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bf8:	2b3e      	cmp	r3, #62	; 0x3e
 8005bfa:	d923      	bls.n	8005c44 <USB_EPStartXfer+0x1628>
 8005bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c00:	095b      	lsrs	r3, r3, #5
 8005c02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c0a:	f003 031f 	and.w	r3, r3, #31
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d104      	bne.n	8005c1c <USB_EPStartXfer+0x1600>
 8005c12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c16:	3b01      	subs	r3, #1
 8005c18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	029b      	lsls	r3, r3, #10
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c40:	801a      	strh	r2, [r3, #0]
 8005c42:	e05c      	b.n	8005cfe <USB_EPStartXfer+0x16e2>
 8005c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10c      	bne.n	8005c66 <USB_EPStartXfer+0x164a>
 8005c4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c62:	801a      	strh	r2, [r3, #0]
 8005c64:	e04b      	b.n	8005cfe <USB_EPStartXfer+0x16e2>
 8005c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c6a:	085b      	lsrs	r3, r3, #1
 8005c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d004      	beq.n	8005c86 <USB_EPStartXfer+0x166a>
 8005c7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c80:	3301      	adds	r3, #1
 8005c82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	029b      	lsls	r3, r3, #10
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ca0:	801a      	strh	r2, [r3, #0]
 8005ca2:	e02c      	b.n	8005cfe <USB_EPStartXfer+0x16e2>
 8005ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	785b      	ldrb	r3, [r3, #1]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d124      	bne.n	8005cfe <USB_EPStartXfer+0x16e2>
 8005cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005cca:	4413      	add	r3, r2
 8005ccc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	011a      	lsls	r2, r3, #4
 8005cde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ce8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005cf6:	801a      	strh	r2, [r3, #0]
 8005cf8:	e001      	b.n	8005cfe <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e03a      	b.n	8005d74 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d24:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005d28:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005d2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d30:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005d34:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005d38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d3c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	441a      	add	r2, r3
 8005d5a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b085      	sub	sp, #20
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	785b      	ldrb	r3, [r3, #1]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d020      	beq.n	8005dd2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005da6:	81bb      	strh	r3, [r7, #12]
 8005da8:	89bb      	ldrh	r3, [r7, #12]
 8005daa:	f083 0310 	eor.w	r3, r3, #16
 8005dae:	81bb      	strh	r3, [r7, #12]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	441a      	add	r2, r3
 8005dba:	89bb      	ldrh	r3, [r7, #12]
 8005dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	8013      	strh	r3, [r2, #0]
 8005dd0:	e01f      	b.n	8005e12 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de8:	81fb      	strh	r3, [r7, #14]
 8005dea:	89fb      	ldrh	r3, [r7, #14]
 8005dec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005df0:	81fb      	strh	r3, [r7, #14]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	441a      	add	r2, r3
 8005dfc:	89fb      	ldrh	r3, [r7, #14]
 8005dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bc80      	pop	{r7}
 8005e1c:	4770      	bx	lr

08005e1e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b087      	sub	sp, #28
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	7b1b      	ldrb	r3, [r3, #12]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f040 809d 	bne.w	8005f6c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	785b      	ldrb	r3, [r3, #1]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d04c      	beq.n	8005ed4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	823b      	strh	r3, [r7, #16]
 8005e48:	8a3b      	ldrh	r3, [r7, #16]
 8005e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d01b      	beq.n	8005e8a <USB_EPClearStall+0x6c>
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e68:	81fb      	strh	r3, [r7, #14]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	441a      	add	r2, r3
 8005e74:	89fb      	ldrh	r3, [r7, #14]
 8005e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	78db      	ldrb	r3, [r3, #3]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d06c      	beq.n	8005f6c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ea8:	81bb      	strh	r3, [r7, #12]
 8005eaa:	89bb      	ldrh	r3, [r7, #12]
 8005eac:	f083 0320 	eor.w	r3, r3, #32
 8005eb0:	81bb      	strh	r3, [r7, #12]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	441a      	add	r2, r3
 8005ebc:	89bb      	ldrh	r3, [r7, #12]
 8005ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	8013      	strh	r3, [r2, #0]
 8005ed2:	e04b      	b.n	8005f6c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	82fb      	strh	r3, [r7, #22]
 8005ee2:	8afb      	ldrh	r3, [r7, #22]
 8005ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d01b      	beq.n	8005f24 <USB_EPClearStall+0x106>
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f02:	82bb      	strh	r3, [r7, #20]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	441a      	add	r2, r3
 8005f0e:	8abb      	ldrh	r3, [r7, #20]
 8005f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	881b      	ldrh	r3, [r3, #0]
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3a:	827b      	strh	r3, [r7, #18]
 8005f3c:	8a7b      	ldrh	r3, [r7, #18]
 8005f3e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f42:	827b      	strh	r3, [r7, #18]
 8005f44:	8a7b      	ldrh	r3, [r7, #18]
 8005f46:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f4a:	827b      	strh	r3, [r7, #18]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	441a      	add	r2, r3
 8005f56:	8a7b      	ldrh	r3, [r7, #18]
 8005f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bc80      	pop	{r7}
 8005f76:	4770      	bx	lr

08005f78 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	460b      	mov	r3, r1
 8005f82:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005f84:	78fb      	ldrb	r3, [r7, #3]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d103      	bne.n	8005f92 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2280      	movs	r2, #128	; 0x80
 8005f8e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bc80      	pop	{r7}
 8005f9c:	4770      	bx	lr

08005f9e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bc80      	pop	{r7}
 8005fb0:	4770      	bx	lr

08005fb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bc80      	pop	{r7}
 8005fc4:	4770      	bx	lr

08005fc6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b085      	sub	sp, #20
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bc80      	pop	{r7}
 8005fe2:	4770      	bx	lr

08005fe4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bc80      	pop	{r7}
 8005ff8:	4770      	bx	lr

08005ffa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b08b      	sub	sp, #44	; 0x2c
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	4611      	mov	r1, r2
 8006006:	461a      	mov	r2, r3
 8006008:	460b      	mov	r3, r1
 800600a:	80fb      	strh	r3, [r7, #6]
 800600c:	4613      	mov	r3, r2
 800600e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006010:	88bb      	ldrh	r3, [r7, #4]
 8006012:	3301      	adds	r3, #1
 8006014:	085b      	lsrs	r3, r3, #1
 8006016:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006020:	88fb      	ldrh	r3, [r7, #6]
 8006022:	005a      	lsls	r2, r3, #1
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800602c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	627b      	str	r3, [r7, #36]	; 0x24
 8006032:	e01e      	b.n	8006072 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	3301      	adds	r3, #1
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	021b      	lsls	r3, r3, #8
 8006042:	b21a      	sxth	r2, r3
 8006044:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006048:	4313      	orrs	r3, r2
 800604a:	b21b      	sxth	r3, r3
 800604c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	8a7a      	ldrh	r2, [r7, #18]
 8006052:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	3302      	adds	r3, #2
 8006058:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	3302      	adds	r3, #2
 800605e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	3301      	adds	r3, #1
 8006064:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	3301      	adds	r3, #1
 800606a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	3b01      	subs	r3, #1
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1dd      	bne.n	8006034 <USB_WritePMA+0x3a>
  }
}
 8006078:	bf00      	nop
 800607a:	bf00      	nop
 800607c:	372c      	adds	r7, #44	; 0x2c
 800607e:	46bd      	mov	sp, r7
 8006080:	bc80      	pop	{r7}
 8006082:	4770      	bx	lr

08006084 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006084:	b480      	push	{r7}
 8006086:	b08b      	sub	sp, #44	; 0x2c
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	4611      	mov	r1, r2
 8006090:	461a      	mov	r2, r3
 8006092:	460b      	mov	r3, r1
 8006094:	80fb      	strh	r3, [r7, #6]
 8006096:	4613      	mov	r3, r2
 8006098:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800609a:	88bb      	ldrh	r3, [r7, #4]
 800609c:	085b      	lsrs	r3, r3, #1
 800609e:	b29b      	uxth	r3, r3
 80060a0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80060aa:	88fb      	ldrh	r3, [r7, #6]
 80060ac:	005a      	lsls	r2, r3, #1
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060b6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
 80060bc:	e01b      	b.n	80060f6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	3302      	adds	r3, #2
 80060ca:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	3301      	adds	r3, #1
 80060d8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	0a1b      	lsrs	r3, r3, #8
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	3301      	adds	r3, #1
 80060e8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	3302      	adds	r3, #2
 80060ee:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	3b01      	subs	r3, #1
 80060f4:	627b      	str	r3, [r7, #36]	; 0x24
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e0      	bne.n	80060be <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80060fc:	88bb      	ldrh	r3, [r7, #4]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	b29b      	uxth	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d007      	beq.n	8006118 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	b29b      	uxth	r3, r3
 800610e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	b2da      	uxtb	r2, r3
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	701a      	strb	r2, [r3, #0]
  }
}
 8006118:	bf00      	nop
 800611a:	372c      	adds	r7, #44	; 0x2c
 800611c:	46bd      	mov	sp, r7
 800611e:	bc80      	pop	{r7}
 8006120:	4770      	bx	lr

08006122 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b084      	sub	sp, #16
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	460b      	mov	r3, r1
 800612c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	7c1b      	ldrb	r3, [r3, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d115      	bne.n	8006166 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800613a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800613e:	2202      	movs	r2, #2
 8006140:	2181      	movs	r1, #129	; 0x81
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f001 fe31 	bl	8007daa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800614e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006152:	2202      	movs	r2, #2
 8006154:	2101      	movs	r1, #1
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f001 fe27 	bl	8007daa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006164:	e012      	b.n	800618c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006166:	2340      	movs	r3, #64	; 0x40
 8006168:	2202      	movs	r2, #2
 800616a:	2181      	movs	r1, #129	; 0x81
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f001 fe1c 	bl	8007daa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006178:	2340      	movs	r3, #64	; 0x40
 800617a:	2202      	movs	r2, #2
 800617c:	2101      	movs	r1, #1
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f001 fe13 	bl	8007daa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800618c:	2308      	movs	r3, #8
 800618e:	2203      	movs	r2, #3
 8006190:	2182      	movs	r1, #130	; 0x82
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f001 fe09 	bl	8007daa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800619e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80061a2:	f001 ff29 	bl	8007ff8 <USBD_static_malloc>
 80061a6:	4602      	mov	r2, r0
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d102      	bne.n	80061be <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80061b8:	2301      	movs	r3, #1
 80061ba:	73fb      	strb	r3, [r7, #15]
 80061bc:	e026      	b.n	800620c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2200      	movs	r2, #0
 80061dc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	7c1b      	ldrb	r3, [r3, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d109      	bne.n	80061fc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061f2:	2101      	movs	r1, #1
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f001 fec9 	bl	8007f8c <USBD_LL_PrepareReceive>
 80061fa:	e007      	b.n	800620c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006202:	2340      	movs	r3, #64	; 0x40
 8006204:	2101      	movs	r1, #1
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f001 fec0 	bl	8007f8c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800620c:	7bfb      	ldrb	r3, [r7, #15]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b084      	sub	sp, #16
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	460b      	mov	r3, r1
 8006220:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006222:	2300      	movs	r3, #0
 8006224:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006226:	2181      	movs	r1, #129	; 0x81
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f001 fde4 	bl	8007df6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006234:	2101      	movs	r1, #1
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f001 fddd 	bl	8007df6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006244:	2182      	movs	r1, #130	; 0x82
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f001 fdd5 	bl	8007df6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00e      	beq.n	800627a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800626c:	4618      	mov	r0, r3
 800626e:	f001 fecf 	bl	8008010 <USBD_static_free>
    pdev->pClassData = NULL;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800627a:	7bfb      	ldrb	r3, [r7, #15]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006294:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d039      	beq.n	8006322 <USBD_CDC_Setup+0x9e>
 80062ae:	2b20      	cmp	r3, #32
 80062b0:	d17f      	bne.n	80063b2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	88db      	ldrh	r3, [r3, #6]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d029      	beq.n	800630e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	b25b      	sxtb	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	da11      	bge.n	80062e8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80062d0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	88d2      	ldrh	r2, [r2, #6]
 80062d6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80062d8:	6939      	ldr	r1, [r7, #16]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	88db      	ldrh	r3, [r3, #6]
 80062de:	461a      	mov	r2, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f001 f9da 	bl	800769a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80062e6:	e06b      	b.n	80063c0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	785a      	ldrb	r2, [r3, #1]
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	88db      	ldrh	r3, [r3, #6]
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80062fe:	6939      	ldr	r1, [r7, #16]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	88db      	ldrh	r3, [r3, #6]
 8006304:	461a      	mov	r2, r3
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f001 f9f5 	bl	80076f6 <USBD_CtlPrepareRx>
      break;
 800630c:	e058      	b.n	80063c0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	7850      	ldrb	r0, [r2, #1]
 800631a:	2200      	movs	r2, #0
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	4798      	blx	r3
      break;
 8006320:	e04e      	b.n	80063c0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	785b      	ldrb	r3, [r3, #1]
 8006326:	2b0b      	cmp	r3, #11
 8006328:	d02e      	beq.n	8006388 <USBD_CDC_Setup+0x104>
 800632a:	2b0b      	cmp	r3, #11
 800632c:	dc38      	bgt.n	80063a0 <USBD_CDC_Setup+0x11c>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <USBD_CDC_Setup+0xb4>
 8006332:	2b0a      	cmp	r3, #10
 8006334:	d014      	beq.n	8006360 <USBD_CDC_Setup+0xdc>
 8006336:	e033      	b.n	80063a0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800633e:	2b03      	cmp	r3, #3
 8006340:	d107      	bne.n	8006352 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006342:	f107 030c 	add.w	r3, r7, #12
 8006346:	2202      	movs	r2, #2
 8006348:	4619      	mov	r1, r3
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f001 f9a5 	bl	800769a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006350:	e02e      	b.n	80063b0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f001 f936 	bl	80075c6 <USBD_CtlError>
            ret = USBD_FAIL;
 800635a:	2302      	movs	r3, #2
 800635c:	75fb      	strb	r3, [r7, #23]
          break;
 800635e:	e027      	b.n	80063b0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006366:	2b03      	cmp	r3, #3
 8006368:	d107      	bne.n	800637a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800636a:	f107 030f 	add.w	r3, r7, #15
 800636e:	2201      	movs	r2, #1
 8006370:	4619      	mov	r1, r3
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f001 f991 	bl	800769a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006378:	e01a      	b.n	80063b0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800637a:	6839      	ldr	r1, [r7, #0]
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f001 f922 	bl	80075c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006382:	2302      	movs	r3, #2
 8006384:	75fb      	strb	r3, [r7, #23]
          break;
 8006386:	e013      	b.n	80063b0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800638e:	2b03      	cmp	r3, #3
 8006390:	d00d      	beq.n	80063ae <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f001 f916 	bl	80075c6 <USBD_CtlError>
            ret = USBD_FAIL;
 800639a:	2302      	movs	r3, #2
 800639c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800639e:	e006      	b.n	80063ae <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f001 f90f 	bl	80075c6 <USBD_CtlError>
          ret = USBD_FAIL;
 80063a8:	2302      	movs	r3, #2
 80063aa:	75fb      	strb	r3, [r7, #23]
          break;
 80063ac:	e000      	b.n	80063b0 <USBD_CDC_Setup+0x12c>
          break;
 80063ae:	bf00      	nop
      }
      break;
 80063b0:	e006      	b.n	80063c0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80063b2:	6839      	ldr	r1, [r7, #0]
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f001 f906 	bl	80075c6 <USBD_CtlError>
      ret = USBD_FAIL;
 80063ba:	2302      	movs	r3, #2
 80063bc:	75fb      	strb	r3, [r7, #23]
      break;
 80063be:	bf00      	nop
  }

  return ret;
 80063c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3718      	adds	r7, #24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	460b      	mov	r3, r1
 80063d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063dc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063e4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d03a      	beq.n	8006466 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80063f0:	78fa      	ldrb	r2, [r7, #3]
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	440b      	add	r3, r1
 80063fe:	331c      	adds	r3, #28
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d029      	beq.n	800645a <USBD_CDC_DataIn+0x90>
 8006406:	78fa      	ldrb	r2, [r7, #3]
 8006408:	6879      	ldr	r1, [r7, #4]
 800640a:	4613      	mov	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	440b      	add	r3, r1
 8006414:	331c      	adds	r3, #28
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	78f9      	ldrb	r1, [r7, #3]
 800641a:	68b8      	ldr	r0, [r7, #8]
 800641c:	460b      	mov	r3, r1
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	440b      	add	r3, r1
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	4403      	add	r3, r0
 8006426:	3338      	adds	r3, #56	; 0x38
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	fbb2 f1f3 	udiv	r1, r2, r3
 800642e:	fb01 f303 	mul.w	r3, r1, r3
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d110      	bne.n	800645a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006438:	78fa      	ldrb	r2, [r7, #3]
 800643a:	6879      	ldr	r1, [r7, #4]
 800643c:	4613      	mov	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	440b      	add	r3, r1
 8006446:	331c      	adds	r3, #28
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800644c:	78f9      	ldrb	r1, [r7, #3]
 800644e:	2300      	movs	r3, #0
 8006450:	2200      	movs	r2, #0
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f001 fd77 	bl	8007f46 <USBD_LL_Transmit>
 8006458:	e003      	b.n	8006462 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	e000      	b.n	8006468 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006466:	2302      	movs	r3, #2
  }
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006482:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f001 fda2 	bl	8007fd2 <USBD_LL_GetRxDataSize>
 800648e:	4602      	mov	r2, r0
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00d      	beq.n	80064bc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80064b4:	4611      	mov	r1, r2
 80064b6:	4798      	blx	r3

    return USBD_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	e000      	b.n	80064be <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80064bc:	2302      	movs	r3, #2
  }
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b084      	sub	sp, #16
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d015      	beq.n	800650c <USBD_CDC_EP0_RxReady+0x46>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80064e6:	2bff      	cmp	r3, #255	; 0xff
 80064e8:	d010      	beq.n	800650c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80064f8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006500:	b292      	uxth	r2, r2
 8006502:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	22ff      	movs	r2, #255	; 0xff
 8006508:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
	...

08006518 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2243      	movs	r2, #67	; 0x43
 8006524:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006526:	4b03      	ldr	r3, [pc, #12]	; (8006534 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	bc80      	pop	{r7}
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	20000094 	.word	0x20000094

08006538 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2243      	movs	r2, #67	; 0x43
 8006544:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006546:	4b03      	ldr	r3, [pc, #12]	; (8006554 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006548:	4618      	mov	r0, r3
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	bc80      	pop	{r7}
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	20000050 	.word	0x20000050

08006558 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2243      	movs	r2, #67	; 0x43
 8006564:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006566:	4b03      	ldr	r3, [pc, #12]	; (8006574 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006568:	4618      	mov	r0, r3
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	bc80      	pop	{r7}
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	200000d8 	.word	0x200000d8

08006578 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	220a      	movs	r2, #10
 8006584:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006586:	4b03      	ldr	r3, [pc, #12]	; (8006594 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006588:	4618      	mov	r0, r3
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	bc80      	pop	{r7}
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	2000000c 	.word	0x2000000c

08006598 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80065a2:	2302      	movs	r3, #2
 80065a4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d005      	beq.n	80065b8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	bc80      	pop	{r7}
 80065c2:	4770      	bx	lr

080065c4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	4613      	mov	r3, r2
 80065d0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80065e2:	88fa      	ldrh	r2, [r7, #6]
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	371c      	adds	r7, #28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bc80      	pop	{r7}
 80065f4:	4770      	bx	lr

080065f6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b085      	sub	sp, #20
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006606:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	bc80      	pop	{r7}
 800661a:	4770      	bx	lr

0800661c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006632:	2b00      	cmp	r3, #0
 8006634:	d017      	beq.n	8006666 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	7c1b      	ldrb	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d109      	bne.n	8006652 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006648:	2101      	movs	r1, #1
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f001 fc9e 	bl	8007f8c <USBD_LL_PrepareReceive>
 8006650:	e007      	b.n	8006662 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006658:	2340      	movs	r3, #64	; 0x40
 800665a:	2101      	movs	r1, #1
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f001 fc95 	bl	8007f8c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006662:	2300      	movs	r3, #0
 8006664:	e000      	b.n	8006668 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006666:	2302      	movs	r3, #2
  }
}
 8006668:	4618      	mov	r0, r3
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	4613      	mov	r3, r2
 800667c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006684:	2302      	movs	r3, #2
 8006686:	e01a      	b.n	80066be <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	79fa      	ldrb	r2, [r7, #7]
 80066b4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f001 fb02 	bl	8007cc0 <USBD_LL_Init>

  return USBD_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b085      	sub	sp, #20
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80066d0:	2300      	movs	r3, #0
 80066d2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d006      	beq.n	80066e8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	73fb      	strb	r3, [r7, #15]
 80066e6:	e001      	b.n	80066ec <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80066e8:	2302      	movs	r3, #2
 80066ea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bc80      	pop	{r7}
 80066f6:	4770      	bx	lr

080066f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 fb37 	bl	8007d74 <USBD_LL_Start>

  return USBD_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	bc80      	pop	{r7}
 8006722:	4770      	bx	lr

08006724 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006730:	2302      	movs	r3, #2
 8006732:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00c      	beq.n	8006758 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	78fa      	ldrb	r2, [r7, #3]
 8006748:	4611      	mov	r1, r2
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	4798      	blx	r3
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006754:	2300      	movs	r3, #0
 8006756:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006758:	7bfb      	ldrb	r3, [r7, #15]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	460b      	mov	r3, r1
 800676c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	78fa      	ldrb	r2, [r7, #3]
 8006778:	4611      	mov	r1, r2
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	4798      	blx	r3

  return USBD_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	4618      	mov	r0, r3
 800679c:	f000 fed7 	bl	800754e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80067ae:	461a      	mov	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80067bc:	f003 031f 	and.w	r3, r3, #31
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d016      	beq.n	80067f2 <USBD_LL_SetupStage+0x6a>
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d81c      	bhi.n	8006802 <USBD_LL_SetupStage+0x7a>
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <USBD_LL_SetupStage+0x4a>
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d008      	beq.n	80067e2 <USBD_LL_SetupStage+0x5a>
 80067d0:	e017      	b.n	8006802 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80067d8:	4619      	mov	r1, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f9ca 	bl	8006b74 <USBD_StdDevReq>
      break;
 80067e0:	e01a      	b.n	8006818 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80067e8:	4619      	mov	r1, r3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fa2c 	bl	8006c48 <USBD_StdItfReq>
      break;
 80067f0:	e012      	b.n	8006818 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fa6c 	bl	8006cd8 <USBD_StdEPReq>
      break;
 8006800:	e00a      	b.n	8006818 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006808:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800680c:	b2db      	uxtb	r3, r3
 800680e:	4619      	mov	r1, r3
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f001 fb0f 	bl	8007e34 <USBD_LL_StallEP>
      break;
 8006816:	bf00      	nop
  }

  return USBD_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b086      	sub	sp, #24
 8006826:	af00      	add	r7, sp, #0
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	460b      	mov	r3, r1
 800682c:	607a      	str	r2, [r7, #4]
 800682e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006830:	7afb      	ldrb	r3, [r7, #11]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d14b      	bne.n	80068ce <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800683c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006844:	2b03      	cmp	r3, #3
 8006846:	d134      	bne.n	80068b2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	68da      	ldr	r2, [r3, #12]
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	429a      	cmp	r2, r3
 8006852:	d919      	bls.n	8006888 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	68da      	ldr	r2, [r3, #12]
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	1ad2      	subs	r2, r2, r3
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	68da      	ldr	r2, [r3, #12]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800686a:	429a      	cmp	r2, r3
 800686c:	d203      	bcs.n	8006876 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006872:	b29b      	uxth	r3, r3
 8006874:	e002      	b.n	800687c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800687a:	b29b      	uxth	r3, r3
 800687c:	461a      	mov	r2, r3
 800687e:	6879      	ldr	r1, [r7, #4]
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 ff56 	bl	8007732 <USBD_CtlContinueRx>
 8006886:	e038      	b.n	80068fa <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00a      	beq.n	80068aa <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800689a:	2b03      	cmp	r3, #3
 800689c:	d105      	bne.n	80068aa <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 ff53 	bl	8007756 <USBD_CtlSendStatus>
 80068b0:	e023      	b.n	80068fa <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068b8:	2b05      	cmp	r3, #5
 80068ba:	d11e      	bne.n	80068fa <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80068c4:	2100      	movs	r1, #0
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f001 fab4 	bl	8007e34 <USBD_LL_StallEP>
 80068cc:	e015      	b.n	80068fa <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00d      	beq.n	80068f6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80068e0:	2b03      	cmp	r3, #3
 80068e2:	d108      	bne.n	80068f6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	7afa      	ldrb	r2, [r7, #11]
 80068ee:	4611      	mov	r1, r2
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	4798      	blx	r3
 80068f4:	e001      	b.n	80068fa <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80068f6:	2302      	movs	r3, #2
 80068f8:	e000      	b.n	80068fc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	460b      	mov	r3, r1
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006912:	7afb      	ldrb	r3, [r7, #11]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d17f      	bne.n	8006a18 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	3314      	adds	r3, #20
 800691c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006924:	2b02      	cmp	r3, #2
 8006926:	d15c      	bne.n	80069e2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	68da      	ldr	r2, [r3, #12]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	429a      	cmp	r2, r3
 8006932:	d915      	bls.n	8006960 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	68da      	ldr	r2, [r3, #12]
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	1ad2      	subs	r2, r2, r3
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	b29b      	uxth	r3, r3
 8006948:	461a      	mov	r2, r3
 800694a:	6879      	ldr	r1, [r7, #4]
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 fec0 	bl	80076d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006952:	2300      	movs	r3, #0
 8006954:	2200      	movs	r2, #0
 8006956:	2100      	movs	r1, #0
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f001 fb17 	bl	8007f8c <USBD_LL_PrepareReceive>
 800695e:	e04e      	b.n	80069fe <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	6912      	ldr	r2, [r2, #16]
 8006968:	fbb3 f1f2 	udiv	r1, r3, r2
 800696c:	fb01 f202 	mul.w	r2, r1, r2
 8006970:	1a9b      	subs	r3, r3, r2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d11c      	bne.n	80069b0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	689a      	ldr	r2, [r3, #8]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800697e:	429a      	cmp	r2, r3
 8006980:	d316      	bcc.n	80069b0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	689a      	ldr	r2, [r3, #8]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800698c:	429a      	cmp	r2, r3
 800698e:	d20f      	bcs.n	80069b0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006990:	2200      	movs	r2, #0
 8006992:	2100      	movs	r1, #0
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 fe9c 	bl	80076d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069a2:	2300      	movs	r3, #0
 80069a4:	2200      	movs	r2, #0
 80069a6:	2100      	movs	r1, #0
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f001 faef 	bl	8007f8c <USBD_LL_PrepareReceive>
 80069ae:	e026      	b.n	80069fe <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00a      	beq.n	80069d2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80069c2:	2b03      	cmp	r3, #3
 80069c4:	d105      	bne.n	80069d2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80069d2:	2180      	movs	r1, #128	; 0x80
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f001 fa2d 	bl	8007e34 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f000 fece 	bl	800777c <USBD_CtlReceiveStatus>
 80069e0:	e00d      	b.n	80069fe <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069e8:	2b04      	cmp	r3, #4
 80069ea:	d004      	beq.n	80069f6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d103      	bne.n	80069fe <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80069f6:	2180      	movs	r1, #128	; 0x80
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f001 fa1b 	bl	8007e34 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d11d      	bne.n	8006a44 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f7ff fe81 	bl	8006710 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a16:	e015      	b.n	8006a44 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00d      	beq.n	8006a40 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a2a:	2b03      	cmp	r3, #3
 8006a2c:	d108      	bne.n	8006a40 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	7afa      	ldrb	r2, [r7, #11]
 8006a38:	4611      	mov	r1, r2
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	4798      	blx	r3
 8006a3e:	e001      	b.n	8006a44 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a40:	2302      	movs	r3, #2
 8006a42:	e000      	b.n	8006a46 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b082      	sub	sp, #8
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a56:	2340      	movs	r3, #64	; 0x40
 8006a58:	2200      	movs	r2, #0
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 f9a4 	bl	8007daa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2240      	movs	r2, #64	; 0x40
 8006a6e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a72:	2340      	movs	r3, #64	; 0x40
 8006a74:	2200      	movs	r2, #0
 8006a76:	2180      	movs	r1, #128	; 0x80
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f001 f996 	bl	8007daa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2240      	movs	r2, #64	; 0x40
 8006a88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d009      	beq.n	8006ac6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	6852      	ldr	r2, [r2, #4]
 8006abe:	b2d2      	uxtb	r2, r2
 8006ac0:	4611      	mov	r1, r2
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	4798      	blx	r3
  }

  return USBD_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	460b      	mov	r3, r1
 8006ada:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	78fa      	ldrb	r2, [r7, #3]
 8006ae0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bc80      	pop	{r7}
 8006aec:	4770      	bx	lr

08006aee <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b083      	sub	sp, #12
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2204      	movs	r2, #4
 8006b06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bc80      	pop	{r7}
 8006b14:	4770      	bx	lr

08006b16 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b083      	sub	sp, #12
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b24:	2b04      	cmp	r3, #4
 8006b26:	d105      	bne.n	8006b34 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bc80      	pop	{r7}
 8006b3e:	4770      	bx	lr

08006b40 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d10b      	bne.n	8006b6a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d005      	beq.n	8006b6a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b8a:	2b40      	cmp	r3, #64	; 0x40
 8006b8c:	d005      	beq.n	8006b9a <USBD_StdDevReq+0x26>
 8006b8e:	2b40      	cmp	r3, #64	; 0x40
 8006b90:	d84f      	bhi.n	8006c32 <USBD_StdDevReq+0xbe>
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d009      	beq.n	8006baa <USBD_StdDevReq+0x36>
 8006b96:	2b20      	cmp	r3, #32
 8006b98:	d14b      	bne.n	8006c32 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	4798      	blx	r3
      break;
 8006ba8:	e048      	b.n	8006c3c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	785b      	ldrb	r3, [r3, #1]
 8006bae:	2b09      	cmp	r3, #9
 8006bb0:	d839      	bhi.n	8006c26 <USBD_StdDevReq+0xb2>
 8006bb2:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <USBD_StdDevReq+0x44>)
 8006bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb8:	08006c09 	.word	0x08006c09
 8006bbc:	08006c1d 	.word	0x08006c1d
 8006bc0:	08006c27 	.word	0x08006c27
 8006bc4:	08006c13 	.word	0x08006c13
 8006bc8:	08006c27 	.word	0x08006c27
 8006bcc:	08006beb 	.word	0x08006beb
 8006bd0:	08006be1 	.word	0x08006be1
 8006bd4:	08006c27 	.word	0x08006c27
 8006bd8:	08006bff 	.word	0x08006bff
 8006bdc:	08006bf5 	.word	0x08006bf5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f9dc 	bl	8006fa0 <USBD_GetDescriptor>
          break;
 8006be8:	e022      	b.n	8006c30 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006bea:	6839      	ldr	r1, [r7, #0]
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fb3f 	bl	8007270 <USBD_SetAddress>
          break;
 8006bf2:	e01d      	b.n	8006c30 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fb7e 	bl	80072f8 <USBD_SetConfig>
          break;
 8006bfc:	e018      	b.n	8006c30 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fc07 	bl	8007414 <USBD_GetConfig>
          break;
 8006c06:	e013      	b.n	8006c30 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fc37 	bl	800747e <USBD_GetStatus>
          break;
 8006c10:	e00e      	b.n	8006c30 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fc65 	bl	80074e4 <USBD_SetFeature>
          break;
 8006c1a:	e009      	b.n	8006c30 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006c1c:	6839      	ldr	r1, [r7, #0]
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fc74 	bl	800750c <USBD_ClrFeature>
          break;
 8006c24:	e004      	b.n	8006c30 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fccc 	bl	80075c6 <USBD_CtlError>
          break;
 8006c2e:	bf00      	nop
      }
      break;
 8006c30:	e004      	b.n	8006c3c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006c32:	6839      	ldr	r1, [r7, #0]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fcc6 	bl	80075c6 <USBD_CtlError>
      break;
 8006c3a:	bf00      	nop
  }

  return ret;
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop

08006c48 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c5e:	2b40      	cmp	r3, #64	; 0x40
 8006c60:	d005      	beq.n	8006c6e <USBD_StdItfReq+0x26>
 8006c62:	2b40      	cmp	r3, #64	; 0x40
 8006c64:	d82e      	bhi.n	8006cc4 <USBD_StdItfReq+0x7c>
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <USBD_StdItfReq+0x26>
 8006c6a:	2b20      	cmp	r3, #32
 8006c6c:	d12a      	bne.n	8006cc4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c74:	3b01      	subs	r3, #1
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d81d      	bhi.n	8006cb6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	889b      	ldrh	r3, [r3, #4]
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d813      	bhi.n	8006cac <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	4798      	blx	r3
 8006c92:	4603      	mov	r3, r0
 8006c94:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	88db      	ldrh	r3, [r3, #6]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d110      	bne.n	8006cc0 <USBD_StdItfReq+0x78>
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10d      	bne.n	8006cc0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fd56 	bl	8007756 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006caa:	e009      	b.n	8006cc0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fc89 	bl	80075c6 <USBD_CtlError>
          break;
 8006cb4:	e004      	b.n	8006cc0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006cb6:	6839      	ldr	r1, [r7, #0]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 fc84 	bl	80075c6 <USBD_CtlError>
          break;
 8006cbe:	e000      	b.n	8006cc2 <USBD_StdItfReq+0x7a>
          break;
 8006cc0:	bf00      	nop
      }
      break;
 8006cc2:	e004      	b.n	8006cce <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fc7d 	bl	80075c6 <USBD_CtlError>
      break;
 8006ccc:	bf00      	nop
  }

  return USBD_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	889b      	ldrh	r3, [r3, #4]
 8006cea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cf4:	2b40      	cmp	r3, #64	; 0x40
 8006cf6:	d007      	beq.n	8006d08 <USBD_StdEPReq+0x30>
 8006cf8:	2b40      	cmp	r3, #64	; 0x40
 8006cfa:	f200 8146 	bhi.w	8006f8a <USBD_StdEPReq+0x2b2>
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <USBD_StdEPReq+0x40>
 8006d02:	2b20      	cmp	r3, #32
 8006d04:	f040 8141 	bne.w	8006f8a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	4798      	blx	r3
      break;
 8006d16:	e13d      	b.n	8006f94 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d20:	2b20      	cmp	r3, #32
 8006d22:	d10a      	bne.n	8006d3a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	4798      	blx	r3
 8006d32:	4603      	mov	r3, r0
 8006d34:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
 8006d38:	e12d      	b.n	8006f96 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	785b      	ldrb	r3, [r3, #1]
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d007      	beq.n	8006d52 <USBD_StdEPReq+0x7a>
 8006d42:	2b03      	cmp	r3, #3
 8006d44:	f300 811b 	bgt.w	8006f7e <USBD_StdEPReq+0x2a6>
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d072      	beq.n	8006e32 <USBD_StdEPReq+0x15a>
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d03a      	beq.n	8006dc6 <USBD_StdEPReq+0xee>
 8006d50:	e115      	b.n	8006f7e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d002      	beq.n	8006d62 <USBD_StdEPReq+0x8a>
 8006d5c:	2b03      	cmp	r3, #3
 8006d5e:	d015      	beq.n	8006d8c <USBD_StdEPReq+0xb4>
 8006d60:	e02b      	b.n	8006dba <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00c      	beq.n	8006d82 <USBD_StdEPReq+0xaa>
 8006d68:	7bbb      	ldrb	r3, [r7, #14]
 8006d6a:	2b80      	cmp	r3, #128	; 0x80
 8006d6c:	d009      	beq.n	8006d82 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006d6e:	7bbb      	ldrb	r3, [r7, #14]
 8006d70:	4619      	mov	r1, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f001 f85e 	bl	8007e34 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006d78:	2180      	movs	r1, #128	; 0x80
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f001 f85a 	bl	8007e34 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d80:	e020      	b.n	8006dc4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fc1e 	bl	80075c6 <USBD_CtlError>
              break;
 8006d8a:	e01b      	b.n	8006dc4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	885b      	ldrh	r3, [r3, #2]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10e      	bne.n	8006db2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006d94:	7bbb      	ldrb	r3, [r7, #14]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00b      	beq.n	8006db2 <USBD_StdEPReq+0xda>
 8006d9a:	7bbb      	ldrb	r3, [r7, #14]
 8006d9c:	2b80      	cmp	r3, #128	; 0x80
 8006d9e:	d008      	beq.n	8006db2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	88db      	ldrh	r3, [r3, #6]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d104      	bne.n	8006db2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006da8:	7bbb      	ldrb	r3, [r7, #14]
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f001 f841 	bl	8007e34 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fccf 	bl	8007756 <USBD_CtlSendStatus>

              break;
 8006db8:	e004      	b.n	8006dc4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006dba:	6839      	ldr	r1, [r7, #0]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fc02 	bl	80075c6 <USBD_CtlError>
              break;
 8006dc2:	bf00      	nop
          }
          break;
 8006dc4:	e0e0      	b.n	8006f88 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d002      	beq.n	8006dd6 <USBD_StdEPReq+0xfe>
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d015      	beq.n	8006e00 <USBD_StdEPReq+0x128>
 8006dd4:	e026      	b.n	8006e24 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dd6:	7bbb      	ldrb	r3, [r7, #14]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00c      	beq.n	8006df6 <USBD_StdEPReq+0x11e>
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	2b80      	cmp	r3, #128	; 0x80
 8006de0:	d009      	beq.n	8006df6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006de2:	7bbb      	ldrb	r3, [r7, #14]
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f001 f824 	bl	8007e34 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006dec:	2180      	movs	r1, #128	; 0x80
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f001 f820 	bl	8007e34 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006df4:	e01c      	b.n	8006e30 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fbe4 	bl	80075c6 <USBD_CtlError>
              break;
 8006dfe:	e017      	b.n	8006e30 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	885b      	ldrh	r3, [r3, #2]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d112      	bne.n	8006e2e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e08:	7bbb      	ldrb	r3, [r7, #14]
 8006e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d004      	beq.n	8006e1c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
 8006e14:	4619      	mov	r1, r3
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 f82b 	bl	8007e72 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fc9a 	bl	8007756 <USBD_CtlSendStatus>
              }
              break;
 8006e22:	e004      	b.n	8006e2e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fbcd 	bl	80075c6 <USBD_CtlError>
              break;
 8006e2c:	e000      	b.n	8006e30 <USBD_StdEPReq+0x158>
              break;
 8006e2e:	bf00      	nop
          }
          break;
 8006e30:	e0aa      	b.n	8006f88 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d002      	beq.n	8006e42 <USBD_StdEPReq+0x16a>
 8006e3c:	2b03      	cmp	r3, #3
 8006e3e:	d032      	beq.n	8006ea6 <USBD_StdEPReq+0x1ce>
 8006e40:	e097      	b.n	8006f72 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e42:	7bbb      	ldrb	r3, [r7, #14]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d007      	beq.n	8006e58 <USBD_StdEPReq+0x180>
 8006e48:	7bbb      	ldrb	r3, [r7, #14]
 8006e4a:	2b80      	cmp	r3, #128	; 0x80
 8006e4c:	d004      	beq.n	8006e58 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fbb8 	bl	80075c6 <USBD_CtlError>
                break;
 8006e56:	e091      	b.n	8006f7c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	da0b      	bge.n	8006e78 <USBD_StdEPReq+0x1a0>
 8006e60:	7bbb      	ldrb	r3, [r7, #14]
 8006e62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e66:	4613      	mov	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	3310      	adds	r3, #16
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	4413      	add	r3, r2
 8006e74:	3304      	adds	r3, #4
 8006e76:	e00b      	b.n	8006e90 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e78:	7bbb      	ldrb	r3, [r7, #14]
 8006e7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e7e:	4613      	mov	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	3304      	adds	r3, #4
 8006e90:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fbfb 	bl	800769a <USBD_CtlSendData>
              break;
 8006ea4:	e06a      	b.n	8006f7c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ea6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	da11      	bge.n	8006ed2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006eae:	7bbb      	ldrb	r3, [r7, #14]
 8006eb0:	f003 020f 	and.w	r2, r3, #15
 8006eb4:	6879      	ldr	r1, [r7, #4]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	440b      	add	r3, r1
 8006ec0:	3318      	adds	r3, #24
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d117      	bne.n	8006ef8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fb7b 	bl	80075c6 <USBD_CtlError>
                  break;
 8006ed0:	e054      	b.n	8006f7c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
 8006ed4:	f003 020f 	and.w	r2, r3, #15
 8006ed8:	6879      	ldr	r1, [r7, #4]
 8006eda:	4613      	mov	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	440b      	add	r3, r1
 8006ee4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d104      	bne.n	8006ef8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006eee:	6839      	ldr	r1, [r7, #0]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fb68 	bl	80075c6 <USBD_CtlError>
                  break;
 8006ef6:	e041      	b.n	8006f7c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ef8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	da0b      	bge.n	8006f18 <USBD_StdEPReq+0x240>
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f06:	4613      	mov	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	3310      	adds	r3, #16
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	4413      	add	r3, r2
 8006f14:	3304      	adds	r3, #4
 8006f16:	e00b      	b.n	8006f30 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f18:	7bbb      	ldrb	r3, [r7, #14]
 8006f1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f1e:	4613      	mov	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	3304      	adds	r3, #4
 8006f30:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f32:	7bbb      	ldrb	r3, [r7, #14]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <USBD_StdEPReq+0x266>
 8006f38:	7bbb      	ldrb	r3, [r7, #14]
 8006f3a:	2b80      	cmp	r3, #128	; 0x80
 8006f3c:	d103      	bne.n	8006f46 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2200      	movs	r2, #0
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	e00e      	b.n	8006f64 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	4619      	mov	r1, r3
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 ffb0 	bl	8007eb0 <USBD_LL_IsStallEP>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	e002      	b.n	8006f64 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2202      	movs	r2, #2
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fb95 	bl	800769a <USBD_CtlSendData>
              break;
 8006f70:	e004      	b.n	8006f7c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fb26 	bl	80075c6 <USBD_CtlError>
              break;
 8006f7a:	bf00      	nop
          }
          break;
 8006f7c:	e004      	b.n	8006f88 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fb20 	bl	80075c6 <USBD_CtlError>
          break;
 8006f86:	bf00      	nop
      }
      break;
 8006f88:	e004      	b.n	8006f94 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 fb1a 	bl	80075c6 <USBD_CtlError>
      break;
 8006f92:	bf00      	nop
  }

  return ret;
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
	...

08006fa0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	885b      	ldrh	r3, [r3, #2]
 8006fba:	0a1b      	lsrs	r3, r3, #8
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	2b06      	cmp	r3, #6
 8006fc2:	f200 8128 	bhi.w	8007216 <USBD_GetDescriptor+0x276>
 8006fc6:	a201      	add	r2, pc, #4	; (adr r2, 8006fcc <USBD_GetDescriptor+0x2c>)
 8006fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fcc:	08006fe9 	.word	0x08006fe9
 8006fd0:	08007001 	.word	0x08007001
 8006fd4:	08007041 	.word	0x08007041
 8006fd8:	08007217 	.word	0x08007217
 8006fdc:	08007217 	.word	0x08007217
 8006fe0:	080071b7 	.word	0x080071b7
 8006fe4:	080071e3 	.word	0x080071e3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	7c12      	ldrb	r2, [r2, #16]
 8006ff4:	f107 0108 	add.w	r1, r7, #8
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	4798      	blx	r3
 8006ffc:	60f8      	str	r0, [r7, #12]
      break;
 8006ffe:	e112      	b.n	8007226 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	7c1b      	ldrb	r3, [r3, #16]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10d      	bne.n	8007024 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800700e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007010:	f107 0208 	add.w	r2, r7, #8
 8007014:	4610      	mov	r0, r2
 8007016:	4798      	blx	r3
 8007018:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	3301      	adds	r3, #1
 800701e:	2202      	movs	r2, #2
 8007020:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007022:	e100      	b.n	8007226 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800702a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702c:	f107 0208 	add.w	r2, r7, #8
 8007030:	4610      	mov	r0, r2
 8007032:	4798      	blx	r3
 8007034:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	3301      	adds	r3, #1
 800703a:	2202      	movs	r2, #2
 800703c:	701a      	strb	r2, [r3, #0]
      break;
 800703e:	e0f2      	b.n	8007226 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	885b      	ldrh	r3, [r3, #2]
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b05      	cmp	r3, #5
 8007048:	f200 80ac 	bhi.w	80071a4 <USBD_GetDescriptor+0x204>
 800704c:	a201      	add	r2, pc, #4	; (adr r2, 8007054 <USBD_GetDescriptor+0xb4>)
 800704e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007052:	bf00      	nop
 8007054:	0800706d 	.word	0x0800706d
 8007058:	080070a1 	.word	0x080070a1
 800705c:	080070d5 	.word	0x080070d5
 8007060:	08007109 	.word	0x08007109
 8007064:	0800713d 	.word	0x0800713d
 8007068:	08007171 	.word	0x08007171
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00b      	beq.n	8007090 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	7c12      	ldrb	r2, [r2, #16]
 8007084:	f107 0108 	add.w	r1, r7, #8
 8007088:	4610      	mov	r0, r2
 800708a:	4798      	blx	r3
 800708c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800708e:	e091      	b.n	80071b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fa97 	bl	80075c6 <USBD_CtlError>
            err++;
 8007098:	7afb      	ldrb	r3, [r7, #11]
 800709a:	3301      	adds	r3, #1
 800709c:	72fb      	strb	r3, [r7, #11]
          break;
 800709e:	e089      	b.n	80071b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00b      	beq.n	80070c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	7c12      	ldrb	r2, [r2, #16]
 80070b8:	f107 0108 	add.w	r1, r7, #8
 80070bc:	4610      	mov	r0, r2
 80070be:	4798      	blx	r3
 80070c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070c2:	e077      	b.n	80071b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fa7d 	bl	80075c6 <USBD_CtlError>
            err++;
 80070cc:	7afb      	ldrb	r3, [r7, #11]
 80070ce:	3301      	adds	r3, #1
 80070d0:	72fb      	strb	r3, [r7, #11]
          break;
 80070d2:	e06f      	b.n	80071b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00b      	beq.n	80070f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	7c12      	ldrb	r2, [r2, #16]
 80070ec:	f107 0108 	add.w	r1, r7, #8
 80070f0:	4610      	mov	r0, r2
 80070f2:	4798      	blx	r3
 80070f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070f6:	e05d      	b.n	80071b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fa63 	bl	80075c6 <USBD_CtlError>
            err++;
 8007100:	7afb      	ldrb	r3, [r7, #11]
 8007102:	3301      	adds	r3, #1
 8007104:	72fb      	strb	r3, [r7, #11]
          break;
 8007106:	e055      	b.n	80071b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00b      	beq.n	800712c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	7c12      	ldrb	r2, [r2, #16]
 8007120:	f107 0108 	add.w	r1, r7, #8
 8007124:	4610      	mov	r0, r2
 8007126:	4798      	blx	r3
 8007128:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800712a:	e043      	b.n	80071b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fa49 	bl	80075c6 <USBD_CtlError>
            err++;
 8007134:	7afb      	ldrb	r3, [r7, #11]
 8007136:	3301      	adds	r3, #1
 8007138:	72fb      	strb	r3, [r7, #11]
          break;
 800713a:	e03b      	b.n	80071b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00b      	beq.n	8007160 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	7c12      	ldrb	r2, [r2, #16]
 8007154:	f107 0108 	add.w	r1, r7, #8
 8007158:	4610      	mov	r0, r2
 800715a:	4798      	blx	r3
 800715c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800715e:	e029      	b.n	80071b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fa2f 	bl	80075c6 <USBD_CtlError>
            err++;
 8007168:	7afb      	ldrb	r3, [r7, #11]
 800716a:	3301      	adds	r3, #1
 800716c:	72fb      	strb	r3, [r7, #11]
          break;
 800716e:	e021      	b.n	80071b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00b      	beq.n	8007194 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	7c12      	ldrb	r2, [r2, #16]
 8007188:	f107 0108 	add.w	r1, r7, #8
 800718c:	4610      	mov	r0, r2
 800718e:	4798      	blx	r3
 8007190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007192:	e00f      	b.n	80071b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007194:	6839      	ldr	r1, [r7, #0]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fa15 	bl	80075c6 <USBD_CtlError>
            err++;
 800719c:	7afb      	ldrb	r3, [r7, #11]
 800719e:	3301      	adds	r3, #1
 80071a0:	72fb      	strb	r3, [r7, #11]
          break;
 80071a2:	e007      	b.n	80071b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fa0d 	bl	80075c6 <USBD_CtlError>
          err++;
 80071ac:	7afb      	ldrb	r3, [r7, #11]
 80071ae:	3301      	adds	r3, #1
 80071b0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80071b2:	e038      	b.n	8007226 <USBD_GetDescriptor+0x286>
 80071b4:	e037      	b.n	8007226 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	7c1b      	ldrb	r3, [r3, #16]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d109      	bne.n	80071d2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c6:	f107 0208 	add.w	r2, r7, #8
 80071ca:	4610      	mov	r0, r2
 80071cc:	4798      	blx	r3
 80071ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071d0:	e029      	b.n	8007226 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f9f6 	bl	80075c6 <USBD_CtlError>
        err++;
 80071da:	7afb      	ldrb	r3, [r7, #11]
 80071dc:	3301      	adds	r3, #1
 80071de:	72fb      	strb	r3, [r7, #11]
      break;
 80071e0:	e021      	b.n	8007226 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	7c1b      	ldrb	r3, [r3, #16]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10d      	bne.n	8007206 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f2:	f107 0208 	add.w	r2, r7, #8
 80071f6:	4610      	mov	r0, r2
 80071f8:	4798      	blx	r3
 80071fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	3301      	adds	r3, #1
 8007200:	2207      	movs	r2, #7
 8007202:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007204:	e00f      	b.n	8007226 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f9dc 	bl	80075c6 <USBD_CtlError>
        err++;
 800720e:	7afb      	ldrb	r3, [r7, #11]
 8007210:	3301      	adds	r3, #1
 8007212:	72fb      	strb	r3, [r7, #11]
      break;
 8007214:	e007      	b.n	8007226 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007216:	6839      	ldr	r1, [r7, #0]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f9d4 	bl	80075c6 <USBD_CtlError>
      err++;
 800721e:	7afb      	ldrb	r3, [r7, #11]
 8007220:	3301      	adds	r3, #1
 8007222:	72fb      	strb	r3, [r7, #11]
      break;
 8007224:	bf00      	nop
  }

  if (err != 0U)
 8007226:	7afb      	ldrb	r3, [r7, #11]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d11c      	bne.n	8007266 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800722c:	893b      	ldrh	r3, [r7, #8]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d011      	beq.n	8007256 <USBD_GetDescriptor+0x2b6>
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	88db      	ldrh	r3, [r3, #6]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00d      	beq.n	8007256 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	88da      	ldrh	r2, [r3, #6]
 800723e:	893b      	ldrh	r3, [r7, #8]
 8007240:	4293      	cmp	r3, r2
 8007242:	bf28      	it	cs
 8007244:	4613      	movcs	r3, r2
 8007246:	b29b      	uxth	r3, r3
 8007248:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800724a:	893b      	ldrh	r3, [r7, #8]
 800724c:	461a      	mov	r2, r3
 800724e:	68f9      	ldr	r1, [r7, #12]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fa22 	bl	800769a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	88db      	ldrh	r3, [r3, #6]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d104      	bne.n	8007268 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fa79 	bl	8007756 <USBD_CtlSendStatus>
 8007264:	e000      	b.n	8007268 <USBD_GetDescriptor+0x2c8>
    return;
 8007266:	bf00      	nop
    }
  }
}
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop

08007270 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	889b      	ldrh	r3, [r3, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d130      	bne.n	80072e4 <USBD_SetAddress+0x74>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	88db      	ldrh	r3, [r3, #6]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d12c      	bne.n	80072e4 <USBD_SetAddress+0x74>
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	885b      	ldrh	r3, [r3, #2]
 800728e:	2b7f      	cmp	r3, #127	; 0x7f
 8007290:	d828      	bhi.n	80072e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	885b      	ldrh	r3, [r3, #2]
 8007296:	b2db      	uxtb	r3, r3
 8007298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800729c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a4:	2b03      	cmp	r3, #3
 80072a6:	d104      	bne.n	80072b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f98b 	bl	80075c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072b0:	e01d      	b.n	80072ee <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	7bfa      	ldrb	r2, [r7, #15]
 80072b6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fe22 	bl	8007f08 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fa46 	bl	8007756 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d004      	beq.n	80072da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d8:	e009      	b.n	80072ee <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072e2:	e004      	b.n	80072ee <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f96d 	bl	80075c6 <USBD_CtlError>
  }
}
 80072ec:	bf00      	nop
 80072ee:	bf00      	nop
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	885b      	ldrh	r3, [r3, #2]
 8007306:	b2da      	uxtb	r2, r3
 8007308:	4b41      	ldr	r3, [pc, #260]	; (8007410 <USBD_SetConfig+0x118>)
 800730a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800730c:	4b40      	ldr	r3, [pc, #256]	; (8007410 <USBD_SetConfig+0x118>)
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d904      	bls.n	800731e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f955 	bl	80075c6 <USBD_CtlError>
 800731c:	e075      	b.n	800740a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007324:	2b02      	cmp	r3, #2
 8007326:	d002      	beq.n	800732e <USBD_SetConfig+0x36>
 8007328:	2b03      	cmp	r3, #3
 800732a:	d023      	beq.n	8007374 <USBD_SetConfig+0x7c>
 800732c:	e062      	b.n	80073f4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800732e:	4b38      	ldr	r3, [pc, #224]	; (8007410 <USBD_SetConfig+0x118>)
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d01a      	beq.n	800736c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007336:	4b36      	ldr	r3, [pc, #216]	; (8007410 <USBD_SetConfig+0x118>)
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	461a      	mov	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2203      	movs	r2, #3
 8007344:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007348:	4b31      	ldr	r3, [pc, #196]	; (8007410 <USBD_SetConfig+0x118>)
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7ff f9e8 	bl	8006724 <USBD_SetClassConfig>
 8007354:	4603      	mov	r3, r0
 8007356:	2b02      	cmp	r3, #2
 8007358:	d104      	bne.n	8007364 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f932 	bl	80075c6 <USBD_CtlError>
            return;
 8007362:	e052      	b.n	800740a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f9f6 	bl	8007756 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800736a:	e04e      	b.n	800740a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f9f2 	bl	8007756 <USBD_CtlSendStatus>
        break;
 8007372:	e04a      	b.n	800740a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007374:	4b26      	ldr	r3, [pc, #152]	; (8007410 <USBD_SetConfig+0x118>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d112      	bne.n	80073a2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007384:	4b22      	ldr	r3, [pc, #136]	; (8007410 <USBD_SetConfig+0x118>)
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	461a      	mov	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800738e:	4b20      	ldr	r3, [pc, #128]	; (8007410 <USBD_SetConfig+0x118>)
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7ff f9e4 	bl	8006762 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f9db 	bl	8007756 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80073a0:	e033      	b.n	800740a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80073a2:	4b1b      	ldr	r3, [pc, #108]	; (8007410 <USBD_SetConfig+0x118>)
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d01d      	beq.n	80073ec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff f9d2 	bl	8006762 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80073be:	4b14      	ldr	r3, [pc, #80]	; (8007410 <USBD_SetConfig+0x118>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80073c8:	4b11      	ldr	r3, [pc, #68]	; (8007410 <USBD_SetConfig+0x118>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7ff f9a8 	bl	8006724 <USBD_SetClassConfig>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d104      	bne.n	80073e4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f8f2 	bl	80075c6 <USBD_CtlError>
            return;
 80073e2:	e012      	b.n	800740a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f9b6 	bl	8007756 <USBD_CtlSendStatus>
        break;
 80073ea:	e00e      	b.n	800740a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f9b2 	bl	8007756 <USBD_CtlSendStatus>
        break;
 80073f2:	e00a      	b.n	800740a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80073f4:	6839      	ldr	r1, [r7, #0]
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f8e5 	bl	80075c6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80073fc:	4b04      	ldr	r3, [pc, #16]	; (8007410 <USBD_SetConfig+0x118>)
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	4619      	mov	r1, r3
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7ff f9ad 	bl	8006762 <USBD_ClrClassConfig>
        break;
 8007408:	bf00      	nop
    }
  }
}
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	2000022c 	.word	0x2000022c

08007414 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	88db      	ldrh	r3, [r3, #6]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d004      	beq.n	8007430 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007426:	6839      	ldr	r1, [r7, #0]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f8cc 	bl	80075c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800742e:	e022      	b.n	8007476 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007436:	2b02      	cmp	r3, #2
 8007438:	dc02      	bgt.n	8007440 <USBD_GetConfig+0x2c>
 800743a:	2b00      	cmp	r3, #0
 800743c:	dc03      	bgt.n	8007446 <USBD_GetConfig+0x32>
 800743e:	e015      	b.n	800746c <USBD_GetConfig+0x58>
 8007440:	2b03      	cmp	r3, #3
 8007442:	d00b      	beq.n	800745c <USBD_GetConfig+0x48>
 8007444:	e012      	b.n	800746c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3308      	adds	r3, #8
 8007450:	2201      	movs	r2, #1
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f920 	bl	800769a <USBD_CtlSendData>
        break;
 800745a:	e00c      	b.n	8007476 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	3304      	adds	r3, #4
 8007460:	2201      	movs	r2, #1
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f918 	bl	800769a <USBD_CtlSendData>
        break;
 800746a:	e004      	b.n	8007476 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f8a9 	bl	80075c6 <USBD_CtlError>
        break;
 8007474:	bf00      	nop
}
 8007476:	bf00      	nop
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b082      	sub	sp, #8
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800748e:	3b01      	subs	r3, #1
 8007490:	2b02      	cmp	r3, #2
 8007492:	d81e      	bhi.n	80074d2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	88db      	ldrh	r3, [r3, #6]
 8007498:	2b02      	cmp	r3, #2
 800749a:	d004      	beq.n	80074a6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800749c:	6839      	ldr	r1, [r7, #0]
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f891 	bl	80075c6 <USBD_CtlError>
        break;
 80074a4:	e01a      	b.n	80074dc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d005      	beq.n	80074c2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	f043 0202 	orr.w	r2, r3, #2
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	330c      	adds	r3, #12
 80074c6:	2202      	movs	r2, #2
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f8e5 	bl	800769a <USBD_CtlSendData>
      break;
 80074d0:	e004      	b.n	80074dc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f876 	bl	80075c6 <USBD_CtlError>
      break;
 80074da:	bf00      	nop
  }
}
 80074dc:	bf00      	nop
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	885b      	ldrh	r3, [r3, #2]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d106      	bne.n	8007504 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f929 	bl	8007756 <USBD_CtlSendStatus>
  }
}
 8007504:	bf00      	nop
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800751c:	3b01      	subs	r3, #1
 800751e:	2b02      	cmp	r3, #2
 8007520:	d80b      	bhi.n	800753a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	885b      	ldrh	r3, [r3, #2]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d10c      	bne.n	8007544 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f90f 	bl	8007756 <USBD_CtlSendStatus>
      }
      break;
 8007538:	e004      	b.n	8007544 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f842 	bl	80075c6 <USBD_CtlError>
      break;
 8007542:	e000      	b.n	8007546 <USBD_ClrFeature+0x3a>
      break;
 8007544:	bf00      	nop
  }
}
 8007546:	bf00      	nop
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800754e:	b480      	push	{r7}
 8007550:	b083      	sub	sp, #12
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	781a      	ldrb	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	785a      	ldrb	r2, [r3, #1]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	3302      	adds	r3, #2
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	b29a      	uxth	r2, r3
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	3303      	adds	r3, #3
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	b29b      	uxth	r3, r3
 8007578:	021b      	lsls	r3, r3, #8
 800757a:	b29b      	uxth	r3, r3
 800757c:	4413      	add	r3, r2
 800757e:	b29a      	uxth	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	3304      	adds	r3, #4
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	b29a      	uxth	r2, r3
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	3305      	adds	r3, #5
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	b29b      	uxth	r3, r3
 8007594:	021b      	lsls	r3, r3, #8
 8007596:	b29b      	uxth	r3, r3
 8007598:	4413      	add	r3, r2
 800759a:	b29a      	uxth	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	3306      	adds	r3, #6
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	3307      	adds	r3, #7
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	021b      	lsls	r3, r3, #8
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	4413      	add	r3, r2
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	80da      	strh	r2, [r3, #6]

}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bc80      	pop	{r7}
 80075c4:	4770      	bx	lr

080075c6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b082      	sub	sp, #8
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80075d0:	2180      	movs	r1, #128	; 0x80
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fc2e 	bl	8007e34 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80075d8:	2100      	movs	r1, #0
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fc2a 	bl	8007e34 <USBD_LL_StallEP>
}
 80075e0:	bf00      	nop
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d032      	beq.n	8007664 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f000 f834 	bl	800766c <USBD_GetLen>
 8007604:	4603      	mov	r3, r0
 8007606:	3301      	adds	r3, #1
 8007608:	b29b      	uxth	r3, r3
 800760a:	005b      	lsls	r3, r3, #1
 800760c:	b29a      	uxth	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007612:	7dfb      	ldrb	r3, [r7, #23]
 8007614:	1c5a      	adds	r2, r3, #1
 8007616:	75fa      	strb	r2, [r7, #23]
 8007618:	461a      	mov	r2, r3
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	4413      	add	r3, r2
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	7812      	ldrb	r2, [r2, #0]
 8007622:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007624:	7dfb      	ldrb	r3, [r7, #23]
 8007626:	1c5a      	adds	r2, r3, #1
 8007628:	75fa      	strb	r2, [r7, #23]
 800762a:	461a      	mov	r2, r3
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	4413      	add	r3, r2
 8007630:	2203      	movs	r2, #3
 8007632:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007634:	e012      	b.n	800765c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	1c5a      	adds	r2, r3, #1
 800763a:	60fa      	str	r2, [r7, #12]
 800763c:	7dfa      	ldrb	r2, [r7, #23]
 800763e:	1c51      	adds	r1, r2, #1
 8007640:	75f9      	strb	r1, [r7, #23]
 8007642:	4611      	mov	r1, r2
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	440a      	add	r2, r1
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	75fa      	strb	r2, [r7, #23]
 8007652:	461a      	mov	r2, r3
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	4413      	add	r3, r2
 8007658:	2200      	movs	r2, #0
 800765a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1e8      	bne.n	8007636 <USBD_GetString+0x4e>
    }
  }
}
 8007664:	bf00      	nop
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007678:	e005      	b.n	8007686 <USBD_GetLen+0x1a>
  {
    len++;
 800767a:	7bfb      	ldrb	r3, [r7, #15]
 800767c:	3301      	adds	r3, #1
 800767e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	3301      	adds	r3, #1
 8007684:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1f5      	bne.n	800767a <USBD_GetLen+0xe>
  }

  return len;
 800768e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	bc80      	pop	{r7}
 8007698:	4770      	bx	lr

0800769a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	4613      	mov	r3, r2
 80076a6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2202      	movs	r2, #2
 80076ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80076b0:	88fa      	ldrh	r2, [r7, #6]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80076b6:	88fa      	ldrh	r2, [r7, #6]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076bc:	88fb      	ldrh	r3, [r7, #6]
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	2100      	movs	r1, #0
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f000 fc3f 	bl	8007f46 <USBD_LL_Transmit>

  return USBD_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b084      	sub	sp, #16
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	4613      	mov	r3, r2
 80076de:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076e0:	88fb      	ldrh	r3, [r7, #6]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	2100      	movs	r1, #0
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f000 fc2d 	bl	8007f46 <USBD_LL_Transmit>

  return USBD_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	60f8      	str	r0, [r7, #12]
 80076fe:	60b9      	str	r1, [r7, #8]
 8007700:	4613      	mov	r3, r2
 8007702:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2203      	movs	r2, #3
 8007708:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800770c:	88fa      	ldrh	r2, [r7, #6]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007714:	88fa      	ldrh	r2, [r7, #6]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800771c:	88fb      	ldrh	r3, [r7, #6]
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	2100      	movs	r1, #0
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f000 fc32 	bl	8007f8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	60f8      	str	r0, [r7, #12]
 800773a:	60b9      	str	r1, [r7, #8]
 800773c:	4613      	mov	r3, r2
 800773e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007740:	88fb      	ldrh	r3, [r7, #6]
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	2100      	movs	r1, #0
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 fc20 	bl	8007f8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b082      	sub	sp, #8
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2204      	movs	r2, #4
 8007762:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007766:	2300      	movs	r3, #0
 8007768:	2200      	movs	r2, #0
 800776a:	2100      	movs	r1, #0
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fbea 	bl	8007f46 <USBD_LL_Transmit>

  return USBD_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2205      	movs	r2, #5
 8007788:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800778c:	2300      	movs	r3, #0
 800778e:	2200      	movs	r2, #0
 8007790:	2100      	movs	r1, #0
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fbfa 	bl	8007f8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
	...

080077a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80077a8:	2200      	movs	r2, #0
 80077aa:	4912      	ldr	r1, [pc, #72]	; (80077f4 <MX_USB_DEVICE_Init+0x50>)
 80077ac:	4812      	ldr	r0, [pc, #72]	; (80077f8 <MX_USB_DEVICE_Init+0x54>)
 80077ae:	f7fe ff5f 	bl	8006670 <USBD_Init>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80077b8:	f7f8 fe74 	bl	80004a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80077bc:	490f      	ldr	r1, [pc, #60]	; (80077fc <MX_USB_DEVICE_Init+0x58>)
 80077be:	480e      	ldr	r0, [pc, #56]	; (80077f8 <MX_USB_DEVICE_Init+0x54>)
 80077c0:	f7fe ff81 	bl	80066c6 <USBD_RegisterClass>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d001      	beq.n	80077ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80077ca:	f7f8 fe6b 	bl	80004a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80077ce:	490c      	ldr	r1, [pc, #48]	; (8007800 <MX_USB_DEVICE_Init+0x5c>)
 80077d0:	4809      	ldr	r0, [pc, #36]	; (80077f8 <MX_USB_DEVICE_Init+0x54>)
 80077d2:	f7fe fee1 	bl	8006598 <USBD_CDC_RegisterInterface>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80077dc:	f7f8 fe62 	bl	80004a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80077e0:	4805      	ldr	r0, [pc, #20]	; (80077f8 <MX_USB_DEVICE_Init+0x54>)
 80077e2:	f7fe ff89 	bl	80066f8 <USBD_Start>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d001      	beq.n	80077f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80077ec:	f7f8 fe5a 	bl	80004a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80077f0:	bf00      	nop
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	2000012c 	.word	0x2000012c
 80077f8:	20000230 	.word	0x20000230
 80077fc:	20000018 	.word	0x20000018
 8007800:	2000011c 	.word	0x2000011c

08007804 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007808:	2200      	movs	r2, #0
 800780a:	4905      	ldr	r1, [pc, #20]	; (8007820 <CDC_Init_FS+0x1c>)
 800780c:	4805      	ldr	r0, [pc, #20]	; (8007824 <CDC_Init_FS+0x20>)
 800780e:	f7fe fed9 	bl	80065c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007812:	4905      	ldr	r1, [pc, #20]	; (8007828 <CDC_Init_FS+0x24>)
 8007814:	4803      	ldr	r0, [pc, #12]	; (8007824 <CDC_Init_FS+0x20>)
 8007816:	f7fe feee 	bl	80065f6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800781a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800781c:	4618      	mov	r0, r3
 800781e:	bd80      	pop	{r7, pc}
 8007820:	200008f4 	.word	0x200008f4
 8007824:	20000230 	.word	0x20000230
 8007828:	200004f4 	.word	0x200004f4

0800782c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007830:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007832:	4618      	mov	r0, r3
 8007834:	46bd      	mov	sp, r7
 8007836:	bc80      	pop	{r7}
 8007838:	4770      	bx	lr
	...

0800783c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	4603      	mov	r3, r0
 8007844:	6039      	str	r1, [r7, #0]
 8007846:	71fb      	strb	r3, [r7, #7]
 8007848:	4613      	mov	r3, r2
 800784a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800784c:	79fb      	ldrb	r3, [r7, #7]
 800784e:	2b23      	cmp	r3, #35	; 0x23
 8007850:	d84a      	bhi.n	80078e8 <CDC_Control_FS+0xac>
 8007852:	a201      	add	r2, pc, #4	; (adr r2, 8007858 <CDC_Control_FS+0x1c>)
 8007854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007858:	080078e9 	.word	0x080078e9
 800785c:	080078e9 	.word	0x080078e9
 8007860:	080078e9 	.word	0x080078e9
 8007864:	080078e9 	.word	0x080078e9
 8007868:	080078e9 	.word	0x080078e9
 800786c:	080078e9 	.word	0x080078e9
 8007870:	080078e9 	.word	0x080078e9
 8007874:	080078e9 	.word	0x080078e9
 8007878:	080078e9 	.word	0x080078e9
 800787c:	080078e9 	.word	0x080078e9
 8007880:	080078e9 	.word	0x080078e9
 8007884:	080078e9 	.word	0x080078e9
 8007888:	080078e9 	.word	0x080078e9
 800788c:	080078e9 	.word	0x080078e9
 8007890:	080078e9 	.word	0x080078e9
 8007894:	080078e9 	.word	0x080078e9
 8007898:	080078e9 	.word	0x080078e9
 800789c:	080078e9 	.word	0x080078e9
 80078a0:	080078e9 	.word	0x080078e9
 80078a4:	080078e9 	.word	0x080078e9
 80078a8:	080078e9 	.word	0x080078e9
 80078ac:	080078e9 	.word	0x080078e9
 80078b0:	080078e9 	.word	0x080078e9
 80078b4:	080078e9 	.word	0x080078e9
 80078b8:	080078e9 	.word	0x080078e9
 80078bc:	080078e9 	.word	0x080078e9
 80078c0:	080078e9 	.word	0x080078e9
 80078c4:	080078e9 	.word	0x080078e9
 80078c8:	080078e9 	.word	0x080078e9
 80078cc:	080078e9 	.word	0x080078e9
 80078d0:	080078e9 	.word	0x080078e9
 80078d4:	080078e9 	.word	0x080078e9
 80078d8:	080078e9 	.word	0x080078e9
 80078dc:	080078e9 	.word	0x080078e9
 80078e0:	080078e9 	.word	0x080078e9
 80078e4:	080078e9 	.word	0x080078e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80078e8:	bf00      	nop
  }

  return (USBD_OK);
 80078ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bc80      	pop	{r7}
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop

080078f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007902:	6879      	ldr	r1, [r7, #4]
 8007904:	4805      	ldr	r0, [pc, #20]	; (800791c <CDC_Receive_FS+0x24>)
 8007906:	f7fe fe76 	bl	80065f6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800790a:	4804      	ldr	r0, [pc, #16]	; (800791c <CDC_Receive_FS+0x24>)
 800790c:	f7fe fe86 	bl	800661c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007910:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007912:	4618      	mov	r0, r3
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	20000230 	.word	0x20000230

08007920 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	4603      	mov	r3, r0
 8007928:	6039      	str	r1, [r7, #0]
 800792a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2212      	movs	r2, #18
 8007930:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007932:	4b03      	ldr	r3, [pc, #12]	; (8007940 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007934:	4618      	mov	r0, r3
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	bc80      	pop	{r7}
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	20000148 	.word	0x20000148

08007944 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	4603      	mov	r3, r0
 800794c:	6039      	str	r1, [r7, #0]
 800794e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2204      	movs	r2, #4
 8007954:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007956:	4b03      	ldr	r3, [pc, #12]	; (8007964 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007958:	4618      	mov	r0, r3
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	bc80      	pop	{r7}
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	2000015c 	.word	0x2000015c

08007968 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	4603      	mov	r3, r0
 8007970:	6039      	str	r1, [r7, #0]
 8007972:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007974:	79fb      	ldrb	r3, [r7, #7]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d105      	bne.n	8007986 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	4907      	ldr	r1, [pc, #28]	; (800799c <USBD_FS_ProductStrDescriptor+0x34>)
 800797e:	4808      	ldr	r0, [pc, #32]	; (80079a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007980:	f7ff fe32 	bl	80075e8 <USBD_GetString>
 8007984:	e004      	b.n	8007990 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	4904      	ldr	r1, [pc, #16]	; (800799c <USBD_FS_ProductStrDescriptor+0x34>)
 800798a:	4805      	ldr	r0, [pc, #20]	; (80079a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800798c:	f7ff fe2c 	bl	80075e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007990:	4b02      	ldr	r3, [pc, #8]	; (800799c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007992:	4618      	mov	r0, r3
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	20000cf4 	.word	0x20000cf4
 80079a0:	08008100 	.word	0x08008100

080079a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	4603      	mov	r3, r0
 80079ac:	6039      	str	r1, [r7, #0]
 80079ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	4904      	ldr	r1, [pc, #16]	; (80079c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80079b4:	4804      	ldr	r0, [pc, #16]	; (80079c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80079b6:	f7ff fe17 	bl	80075e8 <USBD_GetString>
  return USBD_StrDesc;
 80079ba:	4b02      	ldr	r3, [pc, #8]	; (80079c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	20000cf4 	.word	0x20000cf4
 80079c8:	08008118 	.word	0x08008118

080079cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	4603      	mov	r3, r0
 80079d4:	6039      	str	r1, [r7, #0]
 80079d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	221a      	movs	r2, #26
 80079dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80079de:	f000 f843 	bl	8007a68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80079e2:	4b02      	ldr	r3, [pc, #8]	; (80079ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	20000160 	.word	0x20000160

080079f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	6039      	str	r1, [r7, #0]
 80079fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80079fc:	79fb      	ldrb	r3, [r7, #7]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d105      	bne.n	8007a0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	4907      	ldr	r1, [pc, #28]	; (8007a24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a06:	4808      	ldr	r0, [pc, #32]	; (8007a28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a08:	f7ff fdee 	bl	80075e8 <USBD_GetString>
 8007a0c:	e004      	b.n	8007a18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a0e:	683a      	ldr	r2, [r7, #0]
 8007a10:	4904      	ldr	r1, [pc, #16]	; (8007a24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a12:	4805      	ldr	r0, [pc, #20]	; (8007a28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a14:	f7ff fde8 	bl	80075e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a18:	4b02      	ldr	r3, [pc, #8]	; (8007a24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	20000cf4 	.word	0x20000cf4
 8007a28:	0800812c 	.word	0x0800812c

08007a2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	4603      	mov	r3, r0
 8007a34:	6039      	str	r1, [r7, #0]
 8007a36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a38:	79fb      	ldrb	r3, [r7, #7]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d105      	bne.n	8007a4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	4907      	ldr	r1, [pc, #28]	; (8007a60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a42:	4808      	ldr	r0, [pc, #32]	; (8007a64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a44:	f7ff fdd0 	bl	80075e8 <USBD_GetString>
 8007a48:	e004      	b.n	8007a54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	4904      	ldr	r1, [pc, #16]	; (8007a60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a4e:	4805      	ldr	r0, [pc, #20]	; (8007a64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a50:	f7ff fdca 	bl	80075e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a54:	4b02      	ldr	r3, [pc, #8]	; (8007a60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	20000cf4 	.word	0x20000cf4
 8007a64:	08008138 	.word	0x08008138

08007a68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a6e:	4b0f      	ldr	r3, [pc, #60]	; (8007aac <Get_SerialNum+0x44>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a74:	4b0e      	ldr	r3, [pc, #56]	; (8007ab0 <Get_SerialNum+0x48>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a7a:	4b0e      	ldr	r3, [pc, #56]	; (8007ab4 <Get_SerialNum+0x4c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4413      	add	r3, r2
 8007a86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d009      	beq.n	8007aa2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a8e:	2208      	movs	r2, #8
 8007a90:	4909      	ldr	r1, [pc, #36]	; (8007ab8 <Get_SerialNum+0x50>)
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f000 f814 	bl	8007ac0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a98:	2204      	movs	r2, #4
 8007a9a:	4908      	ldr	r1, [pc, #32]	; (8007abc <Get_SerialNum+0x54>)
 8007a9c:	68b8      	ldr	r0, [r7, #8]
 8007a9e:	f000 f80f 	bl	8007ac0 <IntToUnicode>
  }
}
 8007aa2:	bf00      	nop
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	1ffff7e8 	.word	0x1ffff7e8
 8007ab0:	1ffff7ec 	.word	0x1ffff7ec
 8007ab4:	1ffff7f0 	.word	0x1ffff7f0
 8007ab8:	20000162 	.word	0x20000162
 8007abc:	20000172 	.word	0x20000172

08007ac0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	4613      	mov	r3, r2
 8007acc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	75fb      	strb	r3, [r7, #23]
 8007ad6:	e027      	b.n	8007b28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	0f1b      	lsrs	r3, r3, #28
 8007adc:	2b09      	cmp	r3, #9
 8007ade:	d80b      	bhi.n	8007af8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	0f1b      	lsrs	r3, r3, #28
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	4619      	mov	r1, r3
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	440b      	add	r3, r1
 8007af0:	3230      	adds	r2, #48	; 0x30
 8007af2:	b2d2      	uxtb	r2, r2
 8007af4:	701a      	strb	r2, [r3, #0]
 8007af6:	e00a      	b.n	8007b0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	0f1b      	lsrs	r3, r3, #28
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	7dfb      	ldrb	r3, [r7, #23]
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	4619      	mov	r1, r3
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	440b      	add	r3, r1
 8007b08:	3237      	adds	r2, #55	; 0x37
 8007b0a:	b2d2      	uxtb	r2, r2
 8007b0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	011b      	lsls	r3, r3, #4
 8007b12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007b14:	7dfb      	ldrb	r3, [r7, #23]
 8007b16:	005b      	lsls	r3, r3, #1
 8007b18:	3301      	adds	r3, #1
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	2200      	movs	r2, #0
 8007b20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
 8007b24:	3301      	adds	r3, #1
 8007b26:	75fb      	strb	r3, [r7, #23]
 8007b28:	7dfa      	ldrb	r2, [r7, #23]
 8007b2a:	79fb      	ldrb	r3, [r7, #7]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d3d3      	bcc.n	8007ad8 <IntToUnicode+0x18>
  }
}
 8007b30:	bf00      	nop
 8007b32:	bf00      	nop
 8007b34:	371c      	adds	r7, #28
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bc80      	pop	{r7}
 8007b3a:	4770      	bx	lr

08007b3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a0d      	ldr	r2, [pc, #52]	; (8007b80 <HAL_PCD_MspInit+0x44>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d113      	bne.n	8007b76 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007b4e:	4b0d      	ldr	r3, [pc, #52]	; (8007b84 <HAL_PCD_MspInit+0x48>)
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	4a0c      	ldr	r2, [pc, #48]	; (8007b84 <HAL_PCD_MspInit+0x48>)
 8007b54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b58:	61d3      	str	r3, [r2, #28]
 8007b5a:	4b0a      	ldr	r3, [pc, #40]	; (8007b84 <HAL_PCD_MspInit+0x48>)
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007b66:	2200      	movs	r2, #0
 8007b68:	2100      	movs	r1, #0
 8007b6a:	2014      	movs	r0, #20
 8007b6c:	f7f8 fef7 	bl	800095e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007b70:	2014      	movs	r0, #20
 8007b72:	f7f8 ff10 	bl	8000996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007b76:	bf00      	nop
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	40005c00 	.word	0x40005c00
 8007b84:	40021000 	.word	0x40021000

08007b88 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	f7fe fdf2 	bl	8006788 <USBD_LL_SetupStage>
}
 8007ba4:	bf00      	nop
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8007bbe:	78fa      	ldrb	r2, [r7, #3]
 8007bc0:	6879      	ldr	r1, [r7, #4]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	440b      	add	r3, r1
 8007bcc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	78fb      	ldrb	r3, [r7, #3]
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	f7fe fe24 	bl	8006822 <USBD_LL_DataOutStage>
}
 8007bda:	bf00      	nop
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b082      	sub	sp, #8
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	460b      	mov	r3, r1
 8007bec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8007bf4:	78fa      	ldrb	r2, [r7, #3]
 8007bf6:	6879      	ldr	r1, [r7, #4]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	00db      	lsls	r3, r3, #3
 8007c00:	440b      	add	r3, r1
 8007c02:	333c      	adds	r3, #60	; 0x3c
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	78fb      	ldrb	r3, [r7, #3]
 8007c08:	4619      	mov	r1, r3
 8007c0a:	f7fe fe7b 	bl	8006904 <USBD_LL_DataInStage>
}
 8007c0e:	bf00      	nop
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b082      	sub	sp, #8
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fe ff8b 	bl	8006b40 <USBD_LL_SOF>
}
 8007c2a:	bf00      	nop
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d001      	beq.n	8007c4a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007c46:	f7f8 fc2d 	bl	80004a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007c50:	7bfa      	ldrb	r2, [r7, #15]
 8007c52:	4611      	mov	r1, r2
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fe ff3b 	bl	8006ad0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fe fef4 	bl	8006a4e <USBD_LL_Reset>
}
 8007c66:	bf00      	nop
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
	...

08007c70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fe ff35 	bl	8006aee <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d005      	beq.n	8007c98 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c8c:	4b04      	ldr	r3, [pc, #16]	; (8007ca0 <HAL_PCD_SuspendCallback+0x30>)
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	4a03      	ldr	r2, [pc, #12]	; (8007ca0 <HAL_PCD_SuspendCallback+0x30>)
 8007c92:	f043 0306 	orr.w	r3, r3, #6
 8007c96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c98:	bf00      	nop
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	e000ed00 	.word	0xe000ed00

08007ca4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fe ff2f 	bl	8006b16 <USBD_LL_Resume>
}
 8007cb8:	bf00      	nop
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007cc8:	4a28      	ldr	r2, [pc, #160]	; (8007d6c <USBD_LL_Init+0xac>)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a26      	ldr	r2, [pc, #152]	; (8007d6c <USBD_LL_Init+0xac>)
 8007cd4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007cd8:	4b24      	ldr	r3, [pc, #144]	; (8007d6c <USBD_LL_Init+0xac>)
 8007cda:	4a25      	ldr	r2, [pc, #148]	; (8007d70 <USBD_LL_Init+0xb0>)
 8007cdc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007cde:	4b23      	ldr	r3, [pc, #140]	; (8007d6c <USBD_LL_Init+0xac>)
 8007ce0:	2208      	movs	r2, #8
 8007ce2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007ce4:	4b21      	ldr	r3, [pc, #132]	; (8007d6c <USBD_LL_Init+0xac>)
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007cea:	4b20      	ldr	r3, [pc, #128]	; (8007d6c <USBD_LL_Init+0xac>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007cf0:	4b1e      	ldr	r3, [pc, #120]	; (8007d6c <USBD_LL_Init+0xac>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007cf6:	4b1d      	ldr	r3, [pc, #116]	; (8007d6c <USBD_LL_Init+0xac>)
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007cfc:	481b      	ldr	r0, [pc, #108]	; (8007d6c <USBD_LL_Init+0xac>)
 8007cfe:	f7f9 f81a 	bl	8000d36 <HAL_PCD_Init>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d001      	beq.n	8007d0c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007d08:	f7f8 fbcc 	bl	80004a4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d12:	2318      	movs	r3, #24
 8007d14:	2200      	movs	r2, #0
 8007d16:	2100      	movs	r1, #0
 8007d18:	f7fa fd39 	bl	800278e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d22:	2358      	movs	r3, #88	; 0x58
 8007d24:	2200      	movs	r2, #0
 8007d26:	2180      	movs	r1, #128	; 0x80
 8007d28:	f7fa fd31 	bl	800278e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d32:	23c0      	movs	r3, #192	; 0xc0
 8007d34:	2200      	movs	r2, #0
 8007d36:	2181      	movs	r1, #129	; 0x81
 8007d38:	f7fa fd29 	bl	800278e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d42:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007d46:	2200      	movs	r2, #0
 8007d48:	2101      	movs	r1, #1
 8007d4a:	f7fa fd20 	bl	800278e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d58:	2200      	movs	r2, #0
 8007d5a:	2182      	movs	r1, #130	; 0x82
 8007d5c:	f7fa fd17 	bl	800278e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	20000ef4 	.word	0x20000ef4
 8007d70:	40005c00 	.word	0x40005c00

08007d74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7f9 f8d2 	bl	8000f34 <HAL_PCD_Start>
 8007d90:	4603      	mov	r3, r0
 8007d92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 f94e 	bl	8008038 <USBD_Get_USB_Status>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007da0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b084      	sub	sp, #16
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	4608      	mov	r0, r1
 8007db4:	4611      	mov	r1, r2
 8007db6:	461a      	mov	r2, r3
 8007db8:	4603      	mov	r3, r0
 8007dba:	70fb      	strb	r3, [r7, #3]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	70bb      	strb	r3, [r7, #2]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007dd2:	78bb      	ldrb	r3, [r7, #2]
 8007dd4:	883a      	ldrh	r2, [r7, #0]
 8007dd6:	78f9      	ldrb	r1, [r7, #3]
 8007dd8:	f7f9 fa27 	bl	800122a <HAL_PCD_EP_Open>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 f928 	bl	8008038 <USBD_Get_USB_Status>
 8007de8:	4603      	mov	r3, r0
 8007dea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b084      	sub	sp, #16
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	460b      	mov	r3, r1
 8007e00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e10:	78fa      	ldrb	r2, [r7, #3]
 8007e12:	4611      	mov	r1, r2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7f9 fa65 	bl	80012e4 <HAL_PCD_EP_Close>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e1e:	7bfb      	ldrb	r3, [r7, #15]
 8007e20:	4618      	mov	r0, r3
 8007e22:	f000 f909 	bl	8008038 <USBD_Get_USB_Status>
 8007e26:	4603      	mov	r3, r0
 8007e28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e4e:	78fa      	ldrb	r2, [r7, #3]
 8007e50:	4611      	mov	r1, r2
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7f9 fb0d 	bl	8001472 <HAL_PCD_EP_SetStall>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 f8ea 	bl	8008038 <USBD_Get_USB_Status>
 8007e64:	4603      	mov	r3, r0
 8007e66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e8c:	78fa      	ldrb	r2, [r7, #3]
 8007e8e:	4611      	mov	r1, r2
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7f9 fb4e 	bl	8001532 <HAL_PCD_EP_ClrStall>
 8007e96:	4603      	mov	r3, r0
 8007e98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 f8cb 	bl	8008038 <USBD_Get_USB_Status>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ea6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ec2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007ec4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	da0c      	bge.n	8007ee6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007ecc:	78fb      	ldrb	r3, [r7, #3]
 8007ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ed2:	68f9      	ldr	r1, [r7, #12]
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4413      	add	r3, r2
 8007edc:	00db      	lsls	r3, r3, #3
 8007ede:	440b      	add	r3, r1
 8007ee0:	3302      	adds	r3, #2
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	e00b      	b.n	8007efe <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ee6:	78fb      	ldrb	r3, [r7, #3]
 8007ee8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007eec:	68f9      	ldr	r1, [r7, #12]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4413      	add	r3, r2
 8007ef4:	00db      	lsls	r3, r3, #3
 8007ef6:	440b      	add	r3, r1
 8007ef8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007efc:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bc80      	pop	{r7}
 8007f06:	4770      	bx	lr

08007f08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f22:	78fa      	ldrb	r2, [r7, #3]
 8007f24:	4611      	mov	r1, r2
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7f9 f95a 	bl	80011e0 <HAL_PCD_SetAddress>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 f880 	bl	8008038 <USBD_Get_USB_Status>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b086      	sub	sp, #24
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	60f8      	str	r0, [r7, #12]
 8007f4e:	607a      	str	r2, [r7, #4]
 8007f50:	461a      	mov	r2, r3
 8007f52:	460b      	mov	r3, r1
 8007f54:	72fb      	strb	r3, [r7, #11]
 8007f56:	4613      	mov	r3, r2
 8007f58:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f68:	893b      	ldrh	r3, [r7, #8]
 8007f6a:	7af9      	ldrb	r1, [r7, #11]
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	f7f9 fa49 	bl	8001404 <HAL_PCD_EP_Transmit>
 8007f72:	4603      	mov	r3, r0
 8007f74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f76:	7dfb      	ldrb	r3, [r7, #23]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 f85d 	bl	8008038 <USBD_Get_USB_Status>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f82:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3718      	adds	r7, #24
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	607a      	str	r2, [r7, #4]
 8007f96:	461a      	mov	r2, r3
 8007f98:	460b      	mov	r3, r1
 8007f9a:	72fb      	strb	r3, [r7, #11]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007fae:	893b      	ldrh	r3, [r7, #8]
 8007fb0:	7af9      	ldrb	r1, [r7, #11]
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	f7f9 f9de 	bl	8001374 <HAL_PCD_EP_Receive>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fbc:	7dfb      	ldrb	r3, [r7, #23]
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 f83a 	bl	8008038 <USBD_Get_USB_Status>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fc8:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3718      	adds	r7, #24
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b082      	sub	sp, #8
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
 8007fda:	460b      	mov	r3, r1
 8007fdc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fe4:	78fa      	ldrb	r2, [r7, #3]
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7f9 f9f4 	bl	80013d6 <HAL_PCD_EP_GetRxCount>
 8007fee:	4603      	mov	r3, r0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008000:	4b02      	ldr	r3, [pc, #8]	; (800800c <USBD_static_malloc+0x14>)
}
 8008002:	4618      	mov	r0, r3
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	bc80      	pop	{r7}
 800800a:	4770      	bx	lr
 800800c:	200011e4 	.word	0x200011e4

08008010 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]

}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	bc80      	pop	{r7}
 8008020:	4770      	bx	lr

08008022 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008022:	b480      	push	{r7}
 8008024:	b083      	sub	sp, #12
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	460b      	mov	r3, r1
 800802c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800802e:	bf00      	nop
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	bc80      	pop	{r7}
 8008036:	4770      	bx	lr

08008038 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	4603      	mov	r3, r0
 8008040:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008046:	79fb      	ldrb	r3, [r7, #7]
 8008048:	2b03      	cmp	r3, #3
 800804a:	d817      	bhi.n	800807c <USBD_Get_USB_Status+0x44>
 800804c:	a201      	add	r2, pc, #4	; (adr r2, 8008054 <USBD_Get_USB_Status+0x1c>)
 800804e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008052:	bf00      	nop
 8008054:	08008065 	.word	0x08008065
 8008058:	0800806b 	.word	0x0800806b
 800805c:	08008071 	.word	0x08008071
 8008060:	08008077 	.word	0x08008077
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008064:	2300      	movs	r3, #0
 8008066:	73fb      	strb	r3, [r7, #15]
    break;
 8008068:	e00b      	b.n	8008082 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800806a:	2302      	movs	r3, #2
 800806c:	73fb      	strb	r3, [r7, #15]
    break;
 800806e:	e008      	b.n	8008082 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008070:	2301      	movs	r3, #1
 8008072:	73fb      	strb	r3, [r7, #15]
    break;
 8008074:	e005      	b.n	8008082 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008076:	2302      	movs	r3, #2
 8008078:	73fb      	strb	r3, [r7, #15]
    break;
 800807a:	e002      	b.n	8008082 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800807c:	2302      	movs	r3, #2
 800807e:	73fb      	strb	r3, [r7, #15]
    break;
 8008080:	bf00      	nop
  }
  return usb_status;
 8008082:	7bfb      	ldrb	r3, [r7, #15]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	bc80      	pop	{r7}
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop

08008090 <__libc_init_array>:
 8008090:	b570      	push	{r4, r5, r6, lr}
 8008092:	2600      	movs	r6, #0
 8008094:	4d0c      	ldr	r5, [pc, #48]	; (80080c8 <__libc_init_array+0x38>)
 8008096:	4c0d      	ldr	r4, [pc, #52]	; (80080cc <__libc_init_array+0x3c>)
 8008098:	1b64      	subs	r4, r4, r5
 800809a:	10a4      	asrs	r4, r4, #2
 800809c:	42a6      	cmp	r6, r4
 800809e:	d109      	bne.n	80080b4 <__libc_init_array+0x24>
 80080a0:	f000 f822 	bl	80080e8 <_init>
 80080a4:	2600      	movs	r6, #0
 80080a6:	4d0a      	ldr	r5, [pc, #40]	; (80080d0 <__libc_init_array+0x40>)
 80080a8:	4c0a      	ldr	r4, [pc, #40]	; (80080d4 <__libc_init_array+0x44>)
 80080aa:	1b64      	subs	r4, r4, r5
 80080ac:	10a4      	asrs	r4, r4, #2
 80080ae:	42a6      	cmp	r6, r4
 80080b0:	d105      	bne.n	80080be <__libc_init_array+0x2e>
 80080b2:	bd70      	pop	{r4, r5, r6, pc}
 80080b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80080b8:	4798      	blx	r3
 80080ba:	3601      	adds	r6, #1
 80080bc:	e7ee      	b.n	800809c <__libc_init_array+0xc>
 80080be:	f855 3b04 	ldr.w	r3, [r5], #4
 80080c2:	4798      	blx	r3
 80080c4:	3601      	adds	r6, #1
 80080c6:	e7f2      	b.n	80080ae <__libc_init_array+0x1e>
 80080c8:	08008174 	.word	0x08008174
 80080cc:	08008174 	.word	0x08008174
 80080d0:	08008174 	.word	0x08008174
 80080d4:	08008178 	.word	0x08008178

080080d8 <memset>:
 80080d8:	4603      	mov	r3, r0
 80080da:	4402      	add	r2, r0
 80080dc:	4293      	cmp	r3, r2
 80080de:	d100      	bne.n	80080e2 <memset+0xa>
 80080e0:	4770      	bx	lr
 80080e2:	f803 1b01 	strb.w	r1, [r3], #1
 80080e6:	e7f9      	b.n	80080dc <memset+0x4>

080080e8 <_init>:
 80080e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ea:	bf00      	nop
 80080ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ee:	bc08      	pop	{r3}
 80080f0:	469e      	mov	lr, r3
 80080f2:	4770      	bx	lr

080080f4 <_fini>:
 80080f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f6:	bf00      	nop
 80080f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080fa:	bc08      	pop	{r3}
 80080fc:	469e      	mov	lr, r3
 80080fe:	4770      	bx	lr
